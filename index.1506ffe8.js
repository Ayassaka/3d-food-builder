!function(){function t(t){return t&&t.__esModule?t.default:t}var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};
/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const l=100,n=301,i=302,a=306,r=307,q=1e3,o=1001,s=1002,m=1003,h=1004,c=1005,u=1006,d=1008,x=1009,p=1012,f=1014,_=1015,g=1016,v=1020,y=1022,w=1023,b=1026,M=1027,z=2300,S=2301,E=2302,T=2400,L=2401,A=2402,R=2500,C=3e3,P=3001,D=3007,N=3002,I=7680,B=35044,O=35048,F="300 es";class H{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const l=this._listeners;void 0===l[t]&&(l[t]=[]),-1===l[t].indexOf(e)&&l[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const l=this._listeners;return void 0!==l[t]&&-1!==l[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const l=this._listeners[t];if(void 0!==l){const t=l.indexOf(e);-1!==t&&l.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const l=e.slice(0);for(let e=0,n=l.length;e<n;e++)l[e].call(this,t);t.target=null}}}const U=[];for(let t=0;t<256;t++)U[t]=(t<16?"0":"")+t.toString(16);const G=Math.PI/180,V=180/Math.PI;function k(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,l=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(U[255&t]+U[t>>8&255]+U[t>>16&255]+U[t>>24&255]+"-"+U[255&e]+U[e>>8&255]+"-"+U[e>>16&15|64]+U[e>>24&255]+"-"+U[63&l|128]+U[l>>8&255]+"-"+U[l>>16&255]+U[l>>24&255]+U[255&n]+U[n>>8&255]+U[n>>16&255]+U[n>>24&255]).toUpperCase()}function W(t,e,l){return Math.max(e,Math.min(l,t))}function j(t,e){return(t%e+e)%e}function X(t,e,l){return(1-l)*t+l*e}function Y(t){return 0==(t&t-1)&&0!==t}function Z(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}class J{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,l=this.y,n=t.elements;return this.x=n[0]*e+n[3]*l+n[6],this.y=n[1]*e+n[4]*l+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Math.max(t,Math.min(e,l)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,l=this.y-t.y;return e*e+l*l}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,l){return this.x=t.x+(e.x-t.x)*l,this.y=t.y+(e.y-t.y)*l,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,l){return void 0!==l&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const l=Math.cos(e),n=Math.sin(e),i=this.x-t.x,a=this.y-t.y;return this.x=i*l-a*n+t.x,this.y=i*n+a*l+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}J.prototype.isVector2=!0;class Q{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,l,n,i,a,r,q,o){const s=this.elements;return s[0]=t,s[1]=n,s[2]=r,s[3]=e,s[4]=i,s[5]=q,s[6]=l,s[7]=a,s[8]=o,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,l=t.elements;return e[0]=l[0],e[1]=l[1],e[2]=l[2],e[3]=l[3],e[4]=l[4],e[5]=l[5],e[6]=l[6],e[7]=l[7],e[8]=l[8],this}extractBasis(t,e,l){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),l.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const l=t.elements,n=e.elements,i=this.elements,a=l[0],r=l[3],q=l[6],o=l[1],s=l[4],m=l[7],h=l[2],c=l[5],u=l[8],d=n[0],x=n[3],p=n[6],f=n[1],_=n[4],g=n[7],v=n[2],y=n[5],w=n[8];return i[0]=a*d+r*f+q*v,i[3]=a*x+r*_+q*y,i[6]=a*p+r*g+q*w,i[1]=o*d+s*f+m*v,i[4]=o*x+s*_+m*y,i[7]=o*p+s*g+m*w,i[2]=h*d+c*f+u*v,i[5]=h*x+c*_+u*y,i[8]=h*p+c*g+u*w,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],l=t[1],n=t[2],i=t[3],a=t[4],r=t[5],q=t[6],o=t[7],s=t[8];return e*a*s-e*r*o-l*i*s+l*r*q+n*i*o-n*a*q}invert(){const t=this.elements,e=t[0],l=t[1],n=t[2],i=t[3],a=t[4],r=t[5],q=t[6],o=t[7],s=t[8],m=s*a-r*o,h=r*q-s*i,c=o*i-a*q,u=e*m+l*h+n*c;if(0===u)return this.set(0,0,0,0,0,0,0,0,0);const d=1/u;return t[0]=m*d,t[1]=(n*o-s*l)*d,t[2]=(r*l-n*a)*d,t[3]=h*d,t[4]=(s*e-n*q)*d,t[5]=(n*i-r*e)*d,t[6]=c*d,t[7]=(l*q-o*e)*d,t[8]=(a*e-l*i)*d,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,l,n,i,a,r){const q=Math.cos(i),o=Math.sin(i);return this.set(l*q,l*o,-l*(q*a+o*r)+a+t,-n*o,n*q,-n*(-o*a+q*r)+r+e,0,0,1),this}scale(t,e){const l=this.elements;return l[0]*=t,l[3]*=t,l[6]*=t,l[1]*=e,l[4]*=e,l[7]*=e,this}rotate(t){const e=Math.cos(t),l=Math.sin(t),n=this.elements,i=n[0],a=n[3],r=n[6],q=n[1],o=n[4],s=n[7];return n[0]=e*i+l*q,n[3]=e*a+l*o,n[6]=e*r+l*s,n[1]=-l*i+e*q,n[4]=-l*a+e*o,n[7]=-l*r+e*s,this}translate(t,e){const l=this.elements;return l[0]+=t*l[2],l[3]+=t*l[5],l[6]+=t*l[8],l[1]+=e*l[2],l[4]+=e*l[5],l[7]+=e*l[8],this}equals(t){const e=this.elements,l=t.elements;for(let t=0;t<9;t++)if(e[t]!==l[t])return!1;return!0}fromArray(t,e=0){for(let l=0;l<9;l++)this.elements[l]=t[l+e];return this}toArray(t=[],e=0){const l=this.elements;return t[e]=l[0],t[e+1]=l[1],t[e+2]=l[2],t[e+3]=l[3],t[e+4]=l[4],t[e+5]=l[5],t[e+6]=l[6],t[e+7]=l[7],t[e+8]=l[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}let K;Q.prototype.isMatrix3=!0;class ${static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===K&&(K=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),K.width=t.width,K.height=t.height;const l=K.getContext("2d");t instanceof ImageData?l.putImageData(t,0,0):l.drawImage(t,0,0,t.width,t.height),e=K}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}}let tt=0;class et extends H{constructor(t=et.DEFAULT_IMAGE,e=et.DEFAULT_MAPPING,l=1001,n=1001,i=1006,a=1008,r=1023,q=1009,o=1,s=3e3){super(),Object.defineProperty(this,"id",{value:tt++}),this.uuid=k(),this.name="",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=l,this.wrapT=n,this.magFilter=i,this.minFilter=a,this.anisotropy=o,this.format=r,this.internalFormat=null,this.type=q,this.offset=new J(0,0),this.repeat=new J(1,1),this.center=new J(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Q,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=s,this.version=0,this.onUpdate=null}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const l={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const n=this.image;if(void 0===n.uuid&&(n.uuid=k()),!e&&void 0===t.images[n.uuid]){let e;if(Array.isArray(n)){e=[];for(let t=0,l=n.length;t<l;t++)n[t].isDataTexture?e.push(lt(n[t].image)):e.push(lt(n[t]))}else e=lt(n);t.images[n.uuid]={uuid:n.uuid,url:e}}l.image=n.uuid}return e||(t.textures[this.uuid]=l),l}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case q:t.x=t.x-Math.floor(t.x);break;case o:t.x=t.x<0?0:1;break;case s:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case q:t.y=t.y-Math.floor(t.y);break;case o:t.y=t.y<0?0:1;break;case s:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&this.version++}}function lt(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?$.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}et.DEFAULT_IMAGE=void 0,et.DEFAULT_MAPPING=300,et.prototype.isTexture=!0;class nt{constructor(t=0,e=0,l=0,n=1){this.x=t,this.y=e,this.z=l,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,l,n){return this.x=t,this.y=e,this.z=l,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,l=this.y,n=this.z,i=this.w,a=t.elements;return this.x=a[0]*e+a[4]*l+a[8]*n+a[12]*i,this.y=a[1]*e+a[5]*l+a[9]*n+a[13]*i,this.z=a[2]*e+a[6]*l+a[10]*n+a[14]*i,this.w=a[3]*e+a[7]*l+a[11]*n+a[15]*i,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,l,n,i;const a=.01,r=.1,q=t.elements,o=q[0],s=q[4],m=q[8],h=q[1],c=q[5],u=q[9],d=q[2],x=q[6],p=q[10];if(Math.abs(s-h)<a&&Math.abs(m-d)<a&&Math.abs(u-x)<a){if(Math.abs(s+h)<r&&Math.abs(m+d)<r&&Math.abs(u+x)<r&&Math.abs(o+c+p-3)<r)return this.set(1,0,0,0),this;e=Math.PI;const t=(o+1)/2,q=(c+1)/2,f=(p+1)/2,_=(s+h)/4,g=(m+d)/4,v=(u+x)/4;return t>q&&t>f?t<a?(l=0,n=.707106781,i=.707106781):(l=Math.sqrt(t),n=_/l,i=g/l):q>f?q<a?(l=.707106781,n=0,i=.707106781):(n=Math.sqrt(q),l=_/n,i=v/n):f<a?(l=.707106781,n=.707106781,i=0):(i=Math.sqrt(f),l=g/i,n=v/i),this.set(l,n,i,e),this}let f=Math.sqrt((x-u)*(x-u)+(m-d)*(m-d)+(h-s)*(h-s));return Math.abs(f)<.001&&(f=1),this.x=(x-u)/f,this.y=(m-d)/f,this.z=(h-s)/f,this.w=Math.acos((o+c+p-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Math.max(t,Math.min(e,l)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,l){return this.x=t.x+(e.x-t.x)*l,this.y=t.y+(e.y-t.y)*l,this.z=t.z+(e.z-t.z)*l,this.w=t.w+(e.w-t.w)*l,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,l){return void 0!==l&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}nt.prototype.isVector4=!0;class it extends H{constructor(t,e,l){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new nt(0,0,t,e),this.scissorTest=!1,this.viewport=new nt(0,0,t,e),l=l||{},this.texture=new et(void 0,l.mapping,l.wrapS,l.wrapT,l.magFilter,l.minFilter,l.format,l.type,l.anisotropy,l.encoding),this.texture.image={},this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=1,this.texture.generateMipmaps=void 0!==l.generateMipmaps&&l.generateMipmaps,this.texture.minFilter=void 0!==l.minFilter?l.minFilter:u,this.depthBuffer=void 0===l.depthBuffer||l.depthBuffer,this.stencilBuffer=void 0!==l.stencilBuffer&&l.stencilBuffer,this.depthTexture=void 0!==l.depthTexture?l.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,l=1){this.width===t&&this.height===e&&this.depth===l||(this.width=t,this.height=e,this.depth=l,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=l,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}it.prototype.isWebGLRenderTarget=!0;(class extends it{constructor(t,e,l){super(t,e);const n=this.texture;this.texture=[];for(let t=0;t<l;t++)this.texture[t]=n.clone()}setSize(t,e,l=1){if(this.width!==t||this.height!==e||this.depth!==l){this.width=t,this.height=e,this.depth=l;for(let n=0,i=this.texture.length;n<i;n++)this.texture[n].image.width=t,this.texture[n].image.height=e,this.texture[n].image.depth=l;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,l=t.texture.length;e<l;e++)this.texture[e]=t.texture[e].clone();return this}}).prototype.isWebGLMultipleRenderTargets=!0;(class extends it{constructor(t,e,l){super(t,e,l),this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}).prototype.isWebGLMultisampleRenderTarget=!0;class at{constructor(t=0,e=0,l=0,n=1){this._x=t,this._y=e,this._z=l,this._w=n}static slerp(t,e,l,n){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),l.slerpQuaternions(t,e,n)}static slerpFlat(t,e,l,n,i,a,r){let q=l[n+0],o=l[n+1],s=l[n+2],m=l[n+3];const h=i[a+0],c=i[a+1],u=i[a+2],d=i[a+3];if(0===r)return t[e+0]=q,t[e+1]=o,t[e+2]=s,void(t[e+3]=m);if(1===r)return t[e+0]=h,t[e+1]=c,t[e+2]=u,void(t[e+3]=d);if(m!==d||q!==h||o!==c||s!==u){let t=1-r;const e=q*h+o*c+s*u+m*d,l=e>=0?1:-1,n=1-e*e;if(n>Number.EPSILON){const i=Math.sqrt(n),a=Math.atan2(i,e*l);t=Math.sin(t*a)/i,r=Math.sin(r*a)/i}const i=r*l;if(q=q*t+h*i,o=o*t+c*i,s=s*t+u*i,m=m*t+d*i,t===1-r){const t=1/Math.sqrt(q*q+o*o+s*s+m*m);q*=t,o*=t,s*=t,m*=t}}t[e]=q,t[e+1]=o,t[e+2]=s,t[e+3]=m}static multiplyQuaternionsFlat(t,e,l,n,i,a){const r=l[n],q=l[n+1],o=l[n+2],s=l[n+3],m=i[a],h=i[a+1],c=i[a+2],u=i[a+3];return t[e]=r*u+s*m+q*c-o*h,t[e+1]=q*u+s*h+o*m-r*c,t[e+2]=o*u+s*c+r*h-q*m,t[e+3]=s*u-r*m-q*h-o*c,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,l,n){return this._x=t,this._y=e,this._z=l,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const l=t._x,n=t._y,i=t._z,a=t._order,r=Math.cos,q=Math.sin,o=r(l/2),s=r(n/2),m=r(i/2),h=q(l/2),c=q(n/2),u=q(i/2);switch(a){case"XYZ":this._x=h*s*m+o*c*u,this._y=o*c*m-h*s*u,this._z=o*s*u+h*c*m,this._w=o*s*m-h*c*u;break;case"YXZ":this._x=h*s*m+o*c*u,this._y=o*c*m-h*s*u,this._z=o*s*u-h*c*m,this._w=o*s*m+h*c*u;break;case"ZXY":this._x=h*s*m-o*c*u,this._y=o*c*m+h*s*u,this._z=o*s*u+h*c*m,this._w=o*s*m-h*c*u;break;case"ZYX":this._x=h*s*m-o*c*u,this._y=o*c*m+h*s*u,this._z=o*s*u-h*c*m,this._w=o*s*m+h*c*u;break;case"YZX":this._x=h*s*m+o*c*u,this._y=o*c*m+h*s*u,this._z=o*s*u-h*c*m,this._w=o*s*m-h*c*u;break;case"XZY":this._x=h*s*m-o*c*u,this._y=o*c*m-h*s*u,this._z=o*s*u+h*c*m,this._w=o*s*m+h*c*u;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const l=e/2,n=Math.sin(l);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(l),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,l=e[0],n=e[4],i=e[8],a=e[1],r=e[5],q=e[9],o=e[2],s=e[6],m=e[10],h=l+r+m;if(h>0){const t=.5/Math.sqrt(h+1);this._w=.25/t,this._x=(s-q)*t,this._y=(i-o)*t,this._z=(a-n)*t}else if(l>r&&l>m){const t=2*Math.sqrt(1+l-r-m);this._w=(s-q)/t,this._x=.25*t,this._y=(n+a)/t,this._z=(i+o)/t}else if(r>m){const t=2*Math.sqrt(1+r-l-m);this._w=(i-o)/t,this._x=(n+a)/t,this._y=.25*t,this._z=(q+s)/t}else{const t=2*Math.sqrt(1+m-l-r);this._w=(a-n)/t,this._x=(i+o)/t,this._y=(q+s)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let l=t.dot(e)+1;return l<Number.EPSILON?(l=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=l):(this._x=0,this._y=-t.z,this._z=t.y,this._w=l)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=l),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(W(this.dot(t),-1,1)))}rotateTowards(t,e){const l=this.angleTo(t);if(0===l)return this;const n=Math.min(1,e/l);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const l=t._x,n=t._y,i=t._z,a=t._w,r=e._x,q=e._y,o=e._z,s=e._w;return this._x=l*s+a*r+n*o-i*q,this._y=n*s+a*q+i*r-l*o,this._z=i*s+a*o+l*q-n*r,this._w=a*s-l*r-n*q-i*o,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const l=this._x,n=this._y,i=this._z,a=this._w;let r=a*t._w+l*t._x+n*t._y+i*t._z;if(r<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,r=-r):this.copy(t),r>=1)return this._w=a,this._x=l,this._y=n,this._z=i,this;const q=1-r*r;if(q<=Number.EPSILON){const t=1-e;return this._w=t*a+e*this._w,this._x=t*l+e*this._x,this._y=t*n+e*this._y,this._z=t*i+e*this._z,this.normalize(),this._onChangeCallback(),this}const o=Math.sqrt(q),s=Math.atan2(o,r),m=Math.sin((1-e)*s)/o,h=Math.sin(e*s)/o;return this._w=a*m+this._w*h,this._x=l*m+this._x*h,this._y=n*m+this._y*h,this._z=i*m+this._z*h,this._onChangeCallback(),this}slerpQuaternions(t,e,l){this.copy(t).slerp(e,l)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}at.prototype.isQuaternion=!0;class rt{constructor(t=0,e=0,l=0){this.x=t,this.y=e,this.z=l}set(t,e,l){return void 0===l&&(l=this.z),this.x=t,this.y=e,this.z=l,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(ot.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ot.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,l=this.y,n=this.z,i=t.elements;return this.x=i[0]*e+i[3]*l+i[6]*n,this.y=i[1]*e+i[4]*l+i[7]*n,this.z=i[2]*e+i[5]*l+i[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,l=this.y,n=this.z,i=t.elements,a=1/(i[3]*e+i[7]*l+i[11]*n+i[15]);return this.x=(i[0]*e+i[4]*l+i[8]*n+i[12])*a,this.y=(i[1]*e+i[5]*l+i[9]*n+i[13])*a,this.z=(i[2]*e+i[6]*l+i[10]*n+i[14])*a,this}applyQuaternion(t){const e=this.x,l=this.y,n=this.z,i=t.x,a=t.y,r=t.z,q=t.w,o=q*e+a*n-r*l,s=q*l+r*e-i*n,m=q*n+i*l-a*e,h=-i*e-a*l-r*n;return this.x=o*q+h*-i+s*-r-m*-a,this.y=s*q+h*-a+m*-i-o*-r,this.z=m*q+h*-r+o*-a-s*-i,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,l=this.y,n=this.z,i=t.elements;return this.x=i[0]*e+i[4]*l+i[8]*n,this.y=i[1]*e+i[5]*l+i[9]*n,this.z=i[2]*e+i[6]*l+i[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const l=this.length();return this.divideScalar(l||1).multiplyScalar(Math.max(t,Math.min(e,l)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,l){return this.x=t.x+(e.x-t.x)*l,this.y=t.y+(e.y-t.y)*l,this.z=t.z+(e.z-t.z)*l,this}cross(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const l=t.x,n=t.y,i=t.z,a=e.x,r=e.y,q=e.z;return this.x=n*q-i*r,this.y=i*a-l*q,this.z=l*r-n*a,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const l=t.dot(this)/e;return this.copy(t).multiplyScalar(l)}projectOnPlane(t){return qt.copy(this).projectOnVector(t),this.sub(qt)}reflect(t){return this.sub(qt.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const l=this.dot(t)/e;return Math.acos(W(l,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,l=this.y-t.y,n=this.z-t.z;return e*e+l*l+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,l){const n=Math.sin(e)*t;return this.x=n*Math.sin(l),this.y=Math.cos(e)*t,this.z=n*Math.cos(l),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,l){return this.x=t*Math.sin(e),this.y=l,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),l=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=l,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,l){return void 0!==l&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}rt.prototype.isVector3=!0;const qt=new rt,ot=new at;class st{constructor(t=new rt(1/0,1/0,1/0),e=new rt(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,l=1/0,n=1/0,i=-1/0,a=-1/0,r=-1/0;for(let q=0,o=t.length;q<o;q+=3){const o=t[q],s=t[q+1],m=t[q+2];o<e&&(e=o),s<l&&(l=s),m<n&&(n=m),o>i&&(i=o),s>a&&(a=s),m>r&&(r=m)}return this.min.set(e,l,n),this.max.set(i,a,r),this}setFromBufferAttribute(t){let e=1/0,l=1/0,n=1/0,i=-1/0,a=-1/0,r=-1/0;for(let q=0,o=t.count;q<o;q++){const o=t.getX(q),s=t.getY(q),m=t.getZ(q);o<e&&(e=o),s<l&&(l=s),m<n&&(n=m),o>i&&(i=o),s>a&&(a=s),m>r&&(r=m)}return this.min.set(e,l,n),this.max.set(i,a,r),this}setFromPoints(t){this.makeEmpty();for(let e=0,l=t.length;e<l;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const l=ht.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(l),this.max.copy(t).add(l),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new rt),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new rt),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),ct.copy(e.boundingBox),ct.applyMatrix4(t.matrixWorld),this.union(ct));const l=t.children;for(let t=0,e=l.length;t<e;t++)this.expandByObject(l[t]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new rt),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,ht),ht.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,l;return t.normal.x>0?(e=t.normal.x*this.min.x,l=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,l=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,l+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,l+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,l+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,l+=t.normal.z*this.min.z),e<=-t.constant&&l>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(gt),vt.subVectors(this.max,gt),ut.subVectors(t.a,gt),dt.subVectors(t.b,gt),xt.subVectors(t.c,gt),pt.subVectors(dt,ut),ft.subVectors(xt,dt),_t.subVectors(ut,xt);let e=[0,-pt.z,pt.y,0,-ft.z,ft.y,0,-_t.z,_t.y,pt.z,0,-pt.x,ft.z,0,-ft.x,_t.z,0,-_t.x,-pt.y,pt.x,0,-ft.y,ft.x,0,-_t.y,_t.x,0];return!!bt(e,ut,dt,xt,vt)&&(e=[1,0,0,0,1,0,0,0,1],!!bt(e,ut,dt,xt,vt)&&(yt.crossVectors(pt,ft),e=[yt.x,yt.y,yt.z],bt(e,ut,dt,xt,vt)))}clampPoint(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new rt),e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return ht.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return void 0===t&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(t.center),t.radius=.5*this.getSize(ht).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(mt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),mt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),mt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),mt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),mt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),mt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),mt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),mt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(mt)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}st.prototype.isBox3=!0;const mt=[new rt,new rt,new rt,new rt,new rt,new rt,new rt,new rt],ht=new rt,ct=new st,ut=new rt,dt=new rt,xt=new rt,pt=new rt,ft=new rt,_t=new rt,gt=new rt,vt=new rt,yt=new rt,wt=new rt;function bt(t,e,l,n,i){for(let a=0,r=t.length-3;a<=r;a+=3){wt.fromArray(t,a);const r=i.x*Math.abs(wt.x)+i.y*Math.abs(wt.y)+i.z*Math.abs(wt.z),q=e.dot(wt),o=l.dot(wt),s=n.dot(wt);if(Math.max(-Math.max(q,o,s),Math.min(q,o,s))>r)return!1}return!0}const Mt=new st,zt=new rt,St=new rt,Et=new rt;class Tt{constructor(t=new rt,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const l=this.center;void 0!==e?l.copy(e):Mt.setFromPoints(t).getCenter(l);let n=0;for(let e=0,i=t.length;e<i;e++)n=Math.max(n,l.distanceToSquared(t[e]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const l=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new rt),e.copy(t),l>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new st),this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){Et.subVectors(t,this.center);const e=Et.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),l=.5*(t-this.radius);this.center.add(Et.multiplyScalar(l/t)),this.radius+=l}return this}union(t){return St.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(zt.copy(t.center).add(St)),this.expandByPoint(zt.copy(t.center).sub(St)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Lt=new rt,At=new rt,Rt=new rt,Ct=new rt,Pt=new rt,Dt=new rt,Nt=new rt;class It{constructor(t=new rt,e=new rt(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new rt),e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Lt)),this}closestPointToPoint(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new rt),e.subVectors(t,this.origin);const l=e.dot(this.direction);return l<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(l).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Lt.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Lt.copy(this.direction).multiplyScalar(e).add(this.origin),Lt.distanceToSquared(t))}distanceSqToSegment(t,e,l,n){At.copy(t).add(e).multiplyScalar(.5),Rt.copy(e).sub(t).normalize(),Ct.copy(this.origin).sub(At);const i=.5*t.distanceTo(e),a=-this.direction.dot(Rt),r=Ct.dot(this.direction),q=-Ct.dot(Rt),o=Ct.lengthSq(),s=Math.abs(1-a*a);let m,h,c,u;if(s>0)if(m=a*q-r,h=a*r-q,u=i*s,m>=0)if(h>=-u)if(h<=u){const t=1/s;m*=t,h*=t,c=m*(m+a*h+2*r)+h*(a*m+h+2*q)+o}else h=i,m=Math.max(0,-(a*h+r)),c=-m*m+h*(h+2*q)+o;else h=-i,m=Math.max(0,-(a*h+r)),c=-m*m+h*(h+2*q)+o;else h<=-u?(m=Math.max(0,-(-a*i+r)),h=m>0?-i:Math.min(Math.max(-i,-q),i),c=-m*m+h*(h+2*q)+o):h<=u?(m=0,h=Math.min(Math.max(-i,-q),i),c=h*(h+2*q)+o):(m=Math.max(0,-(a*i+r)),h=m>0?i:Math.min(Math.max(-i,-q),i),c=-m*m+h*(h+2*q)+o);else h=a>0?-i:i,m=Math.max(0,-(a*h+r)),c=-m*m+h*(h+2*q)+o;return l&&l.copy(this.direction).multiplyScalar(m).add(this.origin),n&&n.copy(Rt).multiplyScalar(h).add(At),c}intersectSphere(t,e){Lt.subVectors(t.center,this.origin);const l=Lt.dot(this.direction),n=Lt.dot(Lt)-l*l,i=t.radius*t.radius;if(n>i)return null;const a=Math.sqrt(i-n),r=l-a,q=l+a;return r<0&&q<0?null:r<0?this.at(q,e):this.at(r,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const l=-(this.origin.dot(t.normal)+t.constant)/e;return l>=0?l:null}intersectPlane(t,e){const l=this.distanceToPlane(t);return null===l?null:this.at(l,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let l,n,i,a,r,q;const o=1/this.direction.x,s=1/this.direction.y,m=1/this.direction.z,h=this.origin;return o>=0?(l=(t.min.x-h.x)*o,n=(t.max.x-h.x)*o):(l=(t.max.x-h.x)*o,n=(t.min.x-h.x)*o),s>=0?(i=(t.min.y-h.y)*s,a=(t.max.y-h.y)*s):(i=(t.max.y-h.y)*s,a=(t.min.y-h.y)*s),l>a||i>n?null:((i>l||l!=l)&&(l=i),(a<n||n!=n)&&(n=a),m>=0?(r=(t.min.z-h.z)*m,q=(t.max.z-h.z)*m):(r=(t.max.z-h.z)*m,q=(t.min.z-h.z)*m),l>q||r>n?null:((r>l||l!=l)&&(l=r),(q<n||n!=n)&&(n=q),n<0?null:this.at(l>=0?l:n,e)))}intersectsBox(t){return null!==this.intersectBox(t,Lt)}intersectTriangle(t,e,l,n,i){Pt.subVectors(e,t),Dt.subVectors(l,t),Nt.crossVectors(Pt,Dt);let a,r=this.direction.dot(Nt);if(r>0){if(n)return null;a=1}else{if(!(r<0))return null;a=-1,r=-r}Ct.subVectors(this.origin,t);const q=a*this.direction.dot(Dt.crossVectors(Ct,Dt));if(q<0)return null;const o=a*this.direction.dot(Pt.cross(Ct));if(o<0)return null;if(q+o>r)return null;const s=-a*Ct.dot(Nt);return s<0?null:this.at(s/r,i)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Bt{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,l,n,i,a,r,q,o,s,m,h,c,u,d,x){const p=this.elements;return p[0]=t,p[4]=e,p[8]=l,p[12]=n,p[1]=i,p[5]=a,p[9]=r,p[13]=q,p[2]=o,p[6]=s,p[10]=m,p[14]=h,p[3]=c,p[7]=u,p[11]=d,p[15]=x,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Bt).fromArray(this.elements)}copy(t){const e=this.elements,l=t.elements;return e[0]=l[0],e[1]=l[1],e[2]=l[2],e[3]=l[3],e[4]=l[4],e[5]=l[5],e[6]=l[6],e[7]=l[7],e[8]=l[8],e[9]=l[9],e[10]=l[10],e[11]=l[11],e[12]=l[12],e[13]=l[13],e[14]=l[14],e[15]=l[15],this}copyPosition(t){const e=this.elements,l=t.elements;return e[12]=l[12],e[13]=l[13],e[14]=l[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,l){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),l.setFromMatrixColumn(this,2),this}makeBasis(t,e,l){return this.set(t.x,e.x,l.x,0,t.y,e.y,l.y,0,t.z,e.z,l.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,l=t.elements,n=1/Ot.setFromMatrixColumn(t,0).length(),i=1/Ot.setFromMatrixColumn(t,1).length(),a=1/Ot.setFromMatrixColumn(t,2).length();return e[0]=l[0]*n,e[1]=l[1]*n,e[2]=l[2]*n,e[3]=0,e[4]=l[4]*i,e[5]=l[5]*i,e[6]=l[6]*i,e[7]=0,e[8]=l[8]*a,e[9]=l[9]*a,e[10]=l[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,l=t.x,n=t.y,i=t.z,a=Math.cos(l),r=Math.sin(l),q=Math.cos(n),o=Math.sin(n),s=Math.cos(i),m=Math.sin(i);if("XYZ"===t.order){const t=a*s,l=a*m,n=r*s,i=r*m;e[0]=q*s,e[4]=-q*m,e[8]=o,e[1]=l+n*o,e[5]=t-i*o,e[9]=-r*q,e[2]=i-t*o,e[6]=n+l*o,e[10]=a*q}else if("YXZ"===t.order){const t=q*s,l=q*m,n=o*s,i=o*m;e[0]=t+i*r,e[4]=n*r-l,e[8]=a*o,e[1]=a*m,e[5]=a*s,e[9]=-r,e[2]=l*r-n,e[6]=i+t*r,e[10]=a*q}else if("ZXY"===t.order){const t=q*s,l=q*m,n=o*s,i=o*m;e[0]=t-i*r,e[4]=-a*m,e[8]=n+l*r,e[1]=l+n*r,e[5]=a*s,e[9]=i-t*r,e[2]=-a*o,e[6]=r,e[10]=a*q}else if("ZYX"===t.order){const t=a*s,l=a*m,n=r*s,i=r*m;e[0]=q*s,e[4]=n*o-l,e[8]=t*o+i,e[1]=q*m,e[5]=i*o+t,e[9]=l*o-n,e[2]=-o,e[6]=r*q,e[10]=a*q}else if("YZX"===t.order){const t=a*q,l=a*o,n=r*q,i=r*o;e[0]=q*s,e[4]=i-t*m,e[8]=n*m+l,e[1]=m,e[5]=a*s,e[9]=-r*s,e[2]=-o*s,e[6]=l*m+n,e[10]=t-i*m}else if("XZY"===t.order){const t=a*q,l=a*o,n=r*q,i=r*o;e[0]=q*s,e[4]=-m,e[8]=o*s,e[1]=t*m+i,e[5]=a*s,e[9]=l*m-n,e[2]=n*m-l,e[6]=r*s,e[10]=i*m+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Ht,t,Ut)}lookAt(t,e,l){const n=this.elements;return kt.subVectors(t,e),0===kt.lengthSq()&&(kt.z=1),kt.normalize(),Gt.crossVectors(l,kt),0===Gt.lengthSq()&&(1===Math.abs(l.z)?kt.x+=1e-4:kt.z+=1e-4,kt.normalize(),Gt.crossVectors(l,kt)),Gt.normalize(),Vt.crossVectors(kt,Gt),n[0]=Gt.x,n[4]=Vt.x,n[8]=kt.x,n[1]=Gt.y,n[5]=Vt.y,n[9]=kt.y,n[2]=Gt.z,n[6]=Vt.z,n[10]=kt.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const l=t.elements,n=e.elements,i=this.elements,a=l[0],r=l[4],q=l[8],o=l[12],s=l[1],m=l[5],h=l[9],c=l[13],u=l[2],d=l[6],x=l[10],p=l[14],f=l[3],_=l[7],g=l[11],v=l[15],y=n[0],w=n[4],b=n[8],M=n[12],z=n[1],S=n[5],E=n[9],T=n[13],L=n[2],A=n[6],R=n[10],C=n[14],P=n[3],D=n[7],N=n[11],I=n[15];return i[0]=a*y+r*z+q*L+o*P,i[4]=a*w+r*S+q*A+o*D,i[8]=a*b+r*E+q*R+o*N,i[12]=a*M+r*T+q*C+o*I,i[1]=s*y+m*z+h*L+c*P,i[5]=s*w+m*S+h*A+c*D,i[9]=s*b+m*E+h*R+c*N,i[13]=s*M+m*T+h*C+c*I,i[2]=u*y+d*z+x*L+p*P,i[6]=u*w+d*S+x*A+p*D,i[10]=u*b+d*E+x*R+p*N,i[14]=u*M+d*T+x*C+p*I,i[3]=f*y+_*z+g*L+v*P,i[7]=f*w+_*S+g*A+v*D,i[11]=f*b+_*E+g*R+v*N,i[15]=f*M+_*T+g*C+v*I,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],l=t[4],n=t[8],i=t[12],a=t[1],r=t[5],q=t[9],o=t[13],s=t[2],m=t[6],h=t[10],c=t[14];return t[3]*(+i*q*m-n*o*m-i*r*h+l*o*h+n*r*c-l*q*c)+t[7]*(+e*q*c-e*o*h+i*a*h-n*a*c+n*o*s-i*q*s)+t[11]*(+e*o*m-e*r*c-i*a*m+l*a*c+i*r*s-l*o*s)+t[15]*(-n*r*s-e*q*m+e*r*h+n*a*m-l*a*h+l*q*s)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,l){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=l),this}invert(){const t=this.elements,e=t[0],l=t[1],n=t[2],i=t[3],a=t[4],r=t[5],q=t[6],o=t[7],s=t[8],m=t[9],h=t[10],c=t[11],u=t[12],d=t[13],x=t[14],p=t[15],f=m*x*o-d*h*o+d*q*c-r*x*c-m*q*p+r*h*p,_=u*h*o-s*x*o-u*q*c+a*x*c+s*q*p-a*h*p,g=s*d*o-u*m*o+u*r*c-a*d*c-s*r*p+a*m*p,v=u*m*q-s*d*q-u*r*h+a*d*h+s*r*x-a*m*x,y=e*f+l*_+n*g+i*v;if(0===y)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/y;return t[0]=f*w,t[1]=(d*h*i-m*x*i-d*n*c+l*x*c+m*n*p-l*h*p)*w,t[2]=(r*x*i-d*q*i+d*n*o-l*x*o-r*n*p+l*q*p)*w,t[3]=(m*q*i-r*h*i-m*n*o+l*h*o+r*n*c-l*q*c)*w,t[4]=_*w,t[5]=(s*x*i-u*h*i+u*n*c-e*x*c-s*n*p+e*h*p)*w,t[6]=(u*q*i-a*x*i-u*n*o+e*x*o+a*n*p-e*q*p)*w,t[7]=(a*h*i-s*q*i+s*n*o-e*h*o-a*n*c+e*q*c)*w,t[8]=g*w,t[9]=(u*m*i-s*d*i-u*l*c+e*d*c+s*l*p-e*m*p)*w,t[10]=(a*d*i-u*r*i+u*l*o-e*d*o-a*l*p+e*r*p)*w,t[11]=(s*r*i-a*m*i-s*l*o+e*m*o+a*l*c-e*r*c)*w,t[12]=v*w,t[13]=(s*d*n-u*m*n+u*l*h-e*d*h-s*l*x+e*m*x)*w,t[14]=(u*r*n-a*d*n-u*l*q+e*d*q+a*l*x-e*r*x)*w,t[15]=(a*m*n-s*r*n+s*l*q-e*m*q-a*l*h+e*r*h)*w,this}scale(t){const e=this.elements,l=t.x,n=t.y,i=t.z;return e[0]*=l,e[4]*=n,e[8]*=i,e[1]*=l,e[5]*=n,e[9]*=i,e[2]*=l,e[6]*=n,e[10]*=i,e[3]*=l,e[7]*=n,e[11]*=i,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],l=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,l,n))}makeTranslation(t,e,l){return this.set(1,0,0,t,0,1,0,e,0,0,1,l,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),l=Math.sin(t);return this.set(1,0,0,0,0,e,-l,0,0,l,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),l=Math.sin(t);return this.set(e,0,l,0,0,1,0,0,-l,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),l=Math.sin(t);return this.set(e,-l,0,0,l,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const l=Math.cos(e),n=Math.sin(e),i=1-l,a=t.x,r=t.y,q=t.z,o=i*a,s=i*r;return this.set(o*a+l,o*r-n*q,o*q+n*r,0,o*r+n*q,s*r+l,s*q-n*a,0,o*q-n*r,s*q+n*a,i*q*q+l,0,0,0,0,1),this}makeScale(t,e,l){return this.set(t,0,0,0,0,e,0,0,0,0,l,0,0,0,0,1),this}makeShear(t,e,l,n,i,a){return this.set(1,l,i,0,t,1,a,0,e,n,1,0,0,0,0,1),this}compose(t,e,l){const n=this.elements,i=e._x,a=e._y,r=e._z,q=e._w,o=i+i,s=a+a,m=r+r,h=i*o,c=i*s,u=i*m,d=a*s,x=a*m,p=r*m,f=q*o,_=q*s,g=q*m,v=l.x,y=l.y,w=l.z;return n[0]=(1-(d+p))*v,n[1]=(c+g)*v,n[2]=(u-_)*v,n[3]=0,n[4]=(c-g)*y,n[5]=(1-(h+p))*y,n[6]=(x+f)*y,n[7]=0,n[8]=(u+_)*w,n[9]=(x-f)*w,n[10]=(1-(h+d))*w,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,l){const n=this.elements;let i=Ot.set(n[0],n[1],n[2]).length();const a=Ot.set(n[4],n[5],n[6]).length(),r=Ot.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),t.x=n[12],t.y=n[13],t.z=n[14],Ft.copy(this);const q=1/i,o=1/a,s=1/r;return Ft.elements[0]*=q,Ft.elements[1]*=q,Ft.elements[2]*=q,Ft.elements[4]*=o,Ft.elements[5]*=o,Ft.elements[6]*=o,Ft.elements[8]*=s,Ft.elements[9]*=s,Ft.elements[10]*=s,e.setFromRotationMatrix(Ft),l.x=i,l.y=a,l.z=r,this}makePerspective(t,e,l,n,i,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const r=this.elements,q=2*i/(e-t),o=2*i/(l-n),s=(e+t)/(e-t),m=(l+n)/(l-n),h=-(a+i)/(a-i),c=-2*a*i/(a-i);return r[0]=q,r[4]=0,r[8]=s,r[12]=0,r[1]=0,r[5]=o,r[9]=m,r[13]=0,r[2]=0,r[6]=0,r[10]=h,r[14]=c,r[3]=0,r[7]=0,r[11]=-1,r[15]=0,this}makeOrthographic(t,e,l,n,i,a){const r=this.elements,q=1/(e-t),o=1/(l-n),s=1/(a-i),m=(e+t)*q,h=(l+n)*o,c=(a+i)*s;return r[0]=2*q,r[4]=0,r[8]=0,r[12]=-m,r[1]=0,r[5]=2*o,r[9]=0,r[13]=-h,r[2]=0,r[6]=0,r[10]=-2*s,r[14]=-c,r[3]=0,r[7]=0,r[11]=0,r[15]=1,this}equals(t){const e=this.elements,l=t.elements;for(let t=0;t<16;t++)if(e[t]!==l[t])return!1;return!0}fromArray(t,e=0){for(let l=0;l<16;l++)this.elements[l]=t[l+e];return this}toArray(t=[],e=0){const l=this.elements;return t[e]=l[0],t[e+1]=l[1],t[e+2]=l[2],t[e+3]=l[3],t[e+4]=l[4],t[e+5]=l[5],t[e+6]=l[6],t[e+7]=l[7],t[e+8]=l[8],t[e+9]=l[9],t[e+10]=l[10],t[e+11]=l[11],t[e+12]=l[12],t[e+13]=l[13],t[e+14]=l[14],t[e+15]=l[15],t}}Bt.prototype.isMatrix4=!0;const Ot=new rt,Ft=new Bt,Ht=new rt(0,0,0),Ut=new rt(1,1,1),Gt=new rt,Vt=new rt,kt=new rt,Wt=new Bt,jt=new at;class Xt{constructor(t=0,e=0,l=0,n=Xt.DefaultOrder){this._x=t,this._y=e,this._z=l,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,l,n){return this._x=t,this._y=e,this._z=l,this._order=n||this._order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e,l){const n=t.elements,i=n[0],a=n[4],r=n[8],q=n[1],o=n[5],s=n[9],m=n[2],h=n[6],c=n[10];switch(e=e||this._order){case"XYZ":this._y=Math.asin(W(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(-s,c),this._z=Math.atan2(-a,i)):(this._x=Math.atan2(h,o),this._z=0);break;case"YXZ":this._x=Math.asin(-W(s,-1,1)),Math.abs(s)<.9999999?(this._y=Math.atan2(r,c),this._z=Math.atan2(q,o)):(this._y=Math.atan2(-m,i),this._z=0);break;case"ZXY":this._x=Math.asin(W(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-m,c),this._z=Math.atan2(-a,o)):(this._y=0,this._z=Math.atan2(q,i));break;case"ZYX":this._y=Math.asin(-W(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(h,c),this._z=Math.atan2(q,i)):(this._x=0,this._z=Math.atan2(-a,o));break;case"YZX":this._z=Math.asin(W(q,-1,1)),Math.abs(q)<.9999999?(this._x=Math.atan2(-s,o),this._y=Math.atan2(-m,i)):(this._x=0,this._y=Math.atan2(r,c));break;case"XZY":this._z=Math.asin(-W(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(h,o),this._y=Math.atan2(r,i)):(this._x=Math.atan2(-s,c),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!1!==l&&this._onChangeCallback(),this}setFromQuaternion(t,e,l){return Wt.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Wt,e,l)}setFromVector3(t,e){return this.set(t.x,t.y,t.z,e||this._order)}reorder(t){return jt.setFromEuler(this),this.setFromQuaternion(jt,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new rt(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Xt.prototype.isEuler=!0,Xt.DefaultOrder="XYZ",Xt.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Yt{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}}let Zt=0;const Jt=new rt,Qt=new at,Kt=new Bt,$t=new rt,te=new rt,ee=new rt,le=new at,ne=new rt(1,0,0),ie=new rt(0,1,0),ae=new rt(0,0,1),re={type:"added"},qe={type:"removed"};class oe extends H{constructor(){super(),Object.defineProperty(this,"id",{value:Zt++}),this.uuid=k(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=oe.DefaultUp.clone();const t=new rt,e=new Xt,l=new at,n=new rt(1,1,1);e._onChange((function(){l.setFromEuler(e,!1)})),l._onChange((function(){e.setFromQuaternion(l,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:l},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Bt},normalMatrix:{value:new Q}}),this.matrix=new Bt,this.matrixWorld=new Bt,this.matrixAutoUpdate=oe.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Yt,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Qt.setFromAxisAngle(t,e),this.quaternion.multiply(Qt),this}rotateOnWorldAxis(t,e){return Qt.setFromAxisAngle(t,e),this.quaternion.premultiply(Qt),this}rotateX(t){return this.rotateOnAxis(ne,t)}rotateY(t){return this.rotateOnAxis(ie,t)}rotateZ(t){return this.rotateOnAxis(ae,t)}translateOnAxis(t,e){return Jt.copy(t).applyQuaternion(this.quaternion),this.position.add(Jt.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(ne,t)}translateY(t){return this.translateOnAxis(ie,t)}translateZ(t){return this.translateOnAxis(ae,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(Kt.copy(this.matrixWorld).invert())}lookAt(t,e,l){t.isVector3?$t.copy(t):$t.set(t,e,l);const n=this.parent;this.updateWorldMatrix(!0,!1),te.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Kt.lookAt(te,$t,this.up):Kt.lookAt($t,te,this.up),this.quaternion.setFromRotationMatrix(Kt),n&&(Kt.extractRotation(n.matrixWorld),Qt.setFromRotationMatrix(Kt),this.quaternion.premultiply(Qt.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(re)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(qe)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(qe)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Kt.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Kt.multiply(t.parent.matrixWorld)),t.applyMatrix4(Kt),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let l=0,n=this.children.length;l<n;l++){const n=this.children[l].getObjectByProperty(t,e);if(void 0!==n)return n}}getWorldPosition(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new rt),this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new at),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(te,t,ee),t}getWorldScale(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),t=new rt),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(te,le,t),t}getWorldDirection(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new rt),this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let l=0,n=e.length;l<n;l++)e[l].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let l=0,n=e.length;l<n;l++)e[l].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let l=0,n=e.length;l<n;l++)e[l].updateMatrixWorld(t)}updateWorldMatrix(t,e){const l=this.parent;if(!0===t&&null!==l&&l.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,l=t.length;e<l;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||"string"==typeof t,l={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},l.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};function i(e,l){return void 0===e[l.uuid]&&(e[l.uuid]=l.toJSON(t)),l.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isMesh||this.isLine||this.isPoints){n.geometry=i(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const l=e.shapes;if(Array.isArray(l))for(let e=0,n=l.length;e<n;e++){const n=l[e];i(t.shapes,n)}else i(t.shapes,l)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(i(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let l=0,n=this.material.length;l<n;l++)e.push(i(t.materials,this.material[l]));n.material=e}else n.material=i(t.materials,this.material);if(this.children.length>0){n.children=[];for(let e=0;e<this.children.length;e++)n.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let e=0;e<this.animations.length;e++){const l=this.animations[e];n.animations.push(i(t.animations,l))}}if(e){const e=a(t.geometries),n=a(t.materials),i=a(t.textures),r=a(t.images),q=a(t.shapes),o=a(t.skeletons),s=a(t.animations);e.length>0&&(l.geometries=e),n.length>0&&(l.materials=n),i.length>0&&(l.textures=i),r.length>0&&(l.images=r),q.length>0&&(l.shapes=q),o.length>0&&(l.skeletons=o),s.length>0&&(l.animations=s)}function a(t){const e=[];for(const l in t){const n=t[l];delete n.metadata,e.push(n)}return e}return l.object=n,l}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const l=t.children[e];this.add(l.clone())}return this}}oe.DefaultUp=new rt(0,1,0),oe.DefaultMatrixAutoUpdate=!0,oe.prototype.isObject3D=!0;const se=new rt,me=new rt,he=new Q;class ce{constructor(t=new rt(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,l,n){return this.normal.set(t,e,l),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,l){const n=se.subVectors(l,e).cross(me.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new rt),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){void 0===e&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new rt);const l=t.delta(se),n=this.normal.dot(l);if(0===n)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const i=-(t.start.dot(this.normal)+this.constant)/n;return i<0||i>1?null:e.copy(l).multiplyScalar(i).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),l=this.distanceToPoint(t.end);return e<0&&l>0||l<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new rt),t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const l=e||he.getNormalMatrix(t),n=this.coplanarPoint(se).applyMatrix4(t),i=this.normal.applyMatrix3(l).normalize();return this.constant=-n.dot(i),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}ce.prototype.isPlane=!0;const ue=new rt,de=new rt,xe=new rt,pe=new rt,fe=new rt,_e=new rt,ge=new rt,ve=new rt,ye=new rt,we=new rt;class be{constructor(t=new rt,e=new rt,l=new rt){this.a=t,this.b=e,this.c=l}static getNormal(t,e,l,n){void 0===n&&(console.warn("THREE.Triangle: .getNormal() target is now required"),n=new rt),n.subVectors(l,e),ue.subVectors(t,e),n.cross(ue);const i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)}static getBarycoord(t,e,l,n,i){ue.subVectors(n,e),de.subVectors(l,e),xe.subVectors(t,e);const a=ue.dot(ue),r=ue.dot(de),q=ue.dot(xe),o=de.dot(de),s=de.dot(xe),m=a*o-r*r;if(void 0===i&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),i=new rt),0===m)return i.set(-2,-1,-1);const h=1/m,c=(o*q-r*s)*h,u=(a*s-r*q)*h;return i.set(1-c-u,u,c)}static containsPoint(t,e,l,n){return this.getBarycoord(t,e,l,n,pe),pe.x>=0&&pe.y>=0&&pe.x+pe.y<=1}static getUV(t,e,l,n,i,a,r,q){return this.getBarycoord(t,e,l,n,pe),q.set(0,0),q.addScaledVector(i,pe.x),q.addScaledVector(a,pe.y),q.addScaledVector(r,pe.z),q}static isFrontFacing(t,e,l,n){return ue.subVectors(l,e),de.subVectors(t,e),ue.cross(de).dot(n)<0}set(t,e,l){return this.a.copy(t),this.b.copy(e),this.c.copy(l),this}setFromPointsAndIndices(t,e,l,n){return this.a.copy(t[e]),this.b.copy(t[l]),this.c.copy(t[n]),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return ue.subVectors(this.c,this.b),de.subVectors(this.a,this.b),.5*ue.cross(de).length()}getMidpoint(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new rt),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return be.getNormal(this.a,this.b,this.c,t)}getPlane(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new ce),t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return be.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,l,n,i){return be.getUV(t,this.a,this.b,this.c,e,l,n,i)}containsPoint(t){return be.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return be.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){void 0===e&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new rt);const l=this.a,n=this.b,i=this.c;let a,r;fe.subVectors(n,l),_e.subVectors(i,l),ve.subVectors(t,l);const q=fe.dot(ve),o=_e.dot(ve);if(q<=0&&o<=0)return e.copy(l);ye.subVectors(t,n);const s=fe.dot(ye),m=_e.dot(ye);if(s>=0&&m<=s)return e.copy(n);const h=q*m-s*o;if(h<=0&&q>=0&&s<=0)return a=q/(q-s),e.copy(l).addScaledVector(fe,a);we.subVectors(t,i);const c=fe.dot(we),u=_e.dot(we);if(u>=0&&c<=u)return e.copy(i);const d=c*o-q*u;if(d<=0&&o>=0&&u<=0)return r=o/(o-u),e.copy(l).addScaledVector(_e,r);const x=s*u-c*m;if(x<=0&&m-s>=0&&c-u>=0)return ge.subVectors(i,n),r=(m-s)/(m-s+(c-u)),e.copy(n).addScaledVector(ge,r);const p=1/(x+d+h);return a=d*p,r=h*p,e.copy(l).addScaledVector(fe,a).addScaledVector(_e,r)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let Me=0;class ze extends H{constructor(){super(),Object.defineProperty(this,"id",{value:Me++}),this.uuid=k(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=l,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=I,this.stencilZFail=I,this.stencilZPass=I,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const l=t[e];if(void 0===l){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if("shading"===e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===l;continue}const n=this[e];void 0!==n?n&&n.isColor?n.set(l):n&&n.isVector3&&l&&l.isVector3?n.copy(l):this[e]=l:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const l={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(t){const e=[];for(const l in t){const n=t[l];delete n.metadata,e.push(n)}return e}if(l.uuid=this.uuid,l.type=this.type,""!==this.name&&(l.name=this.name),this.color&&this.color.isColor&&(l.color=this.color.getHex()),void 0!==this.roughness&&(l.roughness=this.roughness),void 0!==this.metalness&&(l.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(l.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(l.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(l.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(l.specular=this.specular.getHex()),void 0!==this.shininess&&(l.shininess=this.shininess),void 0!==this.clearcoat&&(l.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(l.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(l.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(l.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(l.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,l.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(l.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(l.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(l.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(l.lightMap=this.lightMap.toJSON(t).uuid,l.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(l.aoMap=this.aoMap.toJSON(t).uuid,l.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(l.bumpMap=this.bumpMap.toJSON(t).uuid,l.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(l.normalMap=this.normalMap.toJSON(t).uuid,l.normalMapType=this.normalMapType,l.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(l.displacementMap=this.displacementMap.toJSON(t).uuid,l.displacementScale=this.displacementScale,l.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(l.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(l.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(l.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(l.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(l.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(l.combine=this.combine)),void 0!==this.envMapIntensity&&(l.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(l.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(l.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(l.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(l.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(l.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(l.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(l.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(l.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(l.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(l.size=this.size),null!==this.shadowSide&&(l.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(l.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(l.blending=this.blending),0!==this.side&&(l.side=this.side),this.vertexColors&&(l.vertexColors=!0),this.opacity<1&&(l.opacity=this.opacity),!0===this.transparent&&(l.transparent=this.transparent),l.depthFunc=this.depthFunc,l.depthTest=this.depthTest,l.depthWrite=this.depthWrite,l.colorWrite=this.colorWrite,l.stencilWrite=this.stencilWrite,l.stencilWriteMask=this.stencilWriteMask,l.stencilFunc=this.stencilFunc,l.stencilRef=this.stencilRef,l.stencilFuncMask=this.stencilFuncMask,l.stencilFail=this.stencilFail,l.stencilZFail=this.stencilZFail,l.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(l.rotation=this.rotation),!0===this.polygonOffset&&(l.polygonOffset=!0),0!==this.polygonOffsetFactor&&(l.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(l.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(l.linewidth=this.linewidth),void 0!==this.dashSize&&(l.dashSize=this.dashSize),void 0!==this.gapSize&&(l.gapSize=this.gapSize),void 0!==this.scale&&(l.scale=this.scale),!0===this.dithering&&(l.dithering=!0),this.alphaTest>0&&(l.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(l.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(l.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(l.wireframe=this.wireframe),this.wireframeLinewidth>1&&(l.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(l.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(l.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(l.morphTargets=!0),!0===this.morphNormals&&(l.morphNormals=!0),!0===this.flatShading&&(l.flatShading=this.flatShading),!1===this.visible&&(l.visible=!1),!1===this.toneMapped&&(l.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(l.userData=this.userData),e){const e=n(t.textures),i=n(t.images);e.length>0&&(l.textures=e),i.length>0&&(l.images=i)}return l}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let l=null;if(null!==e){const t=e.length;l=new Array(t);for(let n=0;n!==t;++n)l[n]=e[n].clone()}return this.clippingPlanes=l,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}ze.prototype.isMaterial=!0;const Se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Ee={h:0,s:0,l:0},Te={h:0,s:0,l:0};function Le(t,e,l){return l<0&&(l+=1),l>1&&(l-=1),l<1/6?t+6*(e-t)*l:l<.5?e:l<2/3?t+6*(e-t)*(2/3-l):t}function Ae(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Re(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class Ce{constructor(t,e,l){return void 0===e&&void 0===l?this.set(t):this.setRGB(t,e,l)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,l){return this.r=t,this.g=e,this.b=l,this}setHSL(t,e,l){if(t=j(t,1),e=W(e,0,1),l=W(l,0,1),0===e)this.r=this.g=this.b=l;else{const n=l<=.5?l*(1+e):l+e-l*e,i=2*l-n;this.r=Le(i,n,t+1/3),this.g=Le(i,n,t),this.b=Le(i,n,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let l;if(l=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const n=l[1],i=l[2];switch(n){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)){const l=parseFloat(t[1])/360,n=parseInt(t[2],10)/100,i=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(l,n,i)}}}else if(l=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=l[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Se[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const l=e>0?1/e:1;return this.r=Math.pow(t.r,l),this.g=Math.pow(t.g,l),this.b=Math.pow(t.b,l),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=Ae(t.r),this.g=Ae(t.g),this.b=Ae(t.b),this}copyLinearToSRGB(t){return this.r=Re(t.r),this.g=Re(t.g),this.b=Re(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});const e=this.r,l=this.g,n=this.b,i=Math.max(e,l,n),a=Math.min(e,l,n);let r,q;const o=(a+i)/2;if(a===i)r=0,q=0;else{const t=i-a;switch(q=o<=.5?t/(i+a):t/(2-i-a),i){case e:r=(l-n)/t+(l<n?6:0);break;case l:r=(n-e)/t+2;break;case n:r=(e-l)/t+4}r/=6}return t.h=r,t.s=q,t.l=o,t}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(t,e,l){return this.getHSL(Ee),Ee.h+=t,Ee.s+=e,Ee.l+=l,this.setHSL(Ee.h,Ee.s,Ee.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,l){return this.r=t.r+(e.r-t.r)*l,this.g=t.g+(e.g-t.g)*l,this.b=t.b+(e.b-t.b)*l,this}lerpHSL(t,e){this.getHSL(Ee),t.getHSL(Te);const l=X(Ee.h,Te.h,e),n=X(Ee.s,Te.s,e),i=X(Ee.l,Te.l,e);return this.setHSL(l,n,i),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Ce.NAMES=Se,Ce.prototype.isColor=!0,Ce.prototype.r=1,Ce.prototype.g=1,Ce.prototype.b=1;class Pe extends ze{constructor(t){super(),this.type="MeshBasicMaterial",this.color=new Ce(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this}}Pe.prototype.isMeshBasicMaterial=!0;const De=new rt,Ne=new J;class Ie{constructor(t,e,l){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===l,this.usage=B,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,l){t*=this.itemSize,l*=e.itemSize;for(let n=0,i=this.itemSize;n<i;n++)this.array[t+n]=e.array[l+n];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let l=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),i=new Ce),e[l++]=i.r,e[l++]=i.g,e[l++]=i.b}return this}copyVector2sArray(t){const e=this.array;let l=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),i=new J),e[l++]=i.x,e[l++]=i.y}return this}copyVector3sArray(t){const e=this.array;let l=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),i=new rt),e[l++]=i.x,e[l++]=i.y,e[l++]=i.z}return this}copyVector4sArray(t){const e=this.array;let l=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),i=new nt),e[l++]=i.x,e[l++]=i.y,e[l++]=i.z,e[l++]=i.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,l=this.count;e<l;e++)Ne.fromBufferAttribute(this,e),Ne.applyMatrix3(t),this.setXY(e,Ne.x,Ne.y);else if(3===this.itemSize)for(let e=0,l=this.count;e<l;e++)De.fromBufferAttribute(this,e),De.applyMatrix3(t),this.setXYZ(e,De.x,De.y,De.z);return this}applyMatrix4(t){for(let e=0,l=this.count;e<l;e++)De.x=this.getX(e),De.y=this.getY(e),De.z=this.getZ(e),De.applyMatrix4(t),this.setXYZ(e,De.x,De.y,De.z);return this}applyNormalMatrix(t){for(let e=0,l=this.count;e<l;e++)De.x=this.getX(e),De.y=this.getY(e),De.z=this.getZ(e),De.applyNormalMatrix(t),this.setXYZ(e,De.x,De.y,De.z);return this}transformDirection(t){for(let e=0,l=this.count;e<l;e++)De.x=this.getX(e),De.y=this.getY(e),De.z=this.getZ(e),De.transformDirection(t),this.setXYZ(e,De.x,De.y,De.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,l){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=l,this}setXYZ(t,e,l,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=l,this.array[t+2]=n,this}setXYZW(t,e,l,n,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=l,this.array[t+2]=n,this.array[t+3]=i,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==B&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}Ie.prototype.isBufferAttribute=!0;class Be extends Ie{constructor(t,e,l){super(new Uint16Array(t),e,l)}}class Oe extends Ie{constructor(t,e,l){super(new Uint32Array(t),e,l)}}(class extends Ie{constructor(t,e,l){super(new Uint16Array(t),e,l)}}).prototype.isFloat16BufferAttribute=!0;class Fe extends Ie{constructor(t,e,l){super(new Float32Array(t),e,l)}}function He(t){if(0===t.length)return-1/0;let e=t[0];for(let l=1,n=t.length;l<n;++l)t[l]>e&&(e=t[l]);return e}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;let Ue=0;const Ge=new Bt,Ve=new oe,ke=new rt,We=new st,je=new st,Xe=new rt;class Ye extends H{constructor(){super(),Object.defineProperty(this,"id",{value:Ue++}),this.uuid=k(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(He(t)>65535?Oe:Be)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,l=0){this.groups.push({start:t,count:e,materialIndex:l})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const l=this.attributes.normal;if(void 0!==l){const e=(new Q).getNormalMatrix(t);l.applyNormalMatrix(e),l.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(t),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ge.makeRotationFromQuaternion(t),this.applyMatrix4(Ge),this}rotateX(t){return Ge.makeRotationX(t),this.applyMatrix4(Ge),this}rotateY(t){return Ge.makeRotationY(t),this.applyMatrix4(Ge),this}rotateZ(t){return Ge.makeRotationZ(t),this.applyMatrix4(Ge),this}translate(t,e,l){return Ge.makeTranslation(t,e,l),this.applyMatrix4(Ge),this}scale(t,e,l){return Ge.makeScale(t,e,l),this.applyMatrix4(Ge),this}lookAt(t){return Ve.lookAt(t),Ve.updateMatrix(),this.applyMatrix4(Ve.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ke).negate(),this.translate(ke.x,ke.y,ke.z),this}setFromPoints(t){const e=[];for(let l=0,n=t.length;l<n;l++){const n=t[l];e.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new Fe(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new st);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new rt(-1/0,-1/0,-1/0),new rt(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,l=e.length;t<l;t++){const l=e[t];We.setFromBufferAttribute(l),this.morphTargetsRelative?(Xe.addVectors(this.boundingBox.min,We.min),this.boundingBox.expandByPoint(Xe),Xe.addVectors(this.boundingBox.max,We.max),this.boundingBox.expandByPoint(Xe)):(this.boundingBox.expandByPoint(We.min),this.boundingBox.expandByPoint(We.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Tt);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new rt,1/0);if(t){const l=this.boundingSphere.center;if(We.setFromBufferAttribute(t),e)for(let t=0,l=e.length;t<l;t++){const l=e[t];je.setFromBufferAttribute(l),this.morphTargetsRelative?(Xe.addVectors(We.min,je.min),We.expandByPoint(Xe),Xe.addVectors(We.max,je.max),We.expandByPoint(Xe)):(We.expandByPoint(je.min),We.expandByPoint(je.max))}We.getCenter(l);let n=0;for(let e=0,i=t.count;e<i;e++)Xe.fromBufferAttribute(t,e),n=Math.max(n,l.distanceToSquared(Xe));if(e)for(let i=0,a=e.length;i<a;i++){const a=e[i],r=this.morphTargetsRelative;for(let e=0,i=a.count;e<i;e++)Xe.fromBufferAttribute(a,e),r&&(ke.fromBufferAttribute(t,e),Xe.add(ke)),n=Math.max(n,l.distanceToSquared(Xe))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeFaceNormals(){}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const l=t.array,n=e.position.array,i=e.normal.array,a=e.uv.array,r=n.length/3;void 0===e.tangent&&this.setAttribute("tangent",new Ie(new Float32Array(4*r),4));const q=e.tangent.array,o=[],s=[];for(let t=0;t<r;t++)o[t]=new rt,s[t]=new rt;const m=new rt,h=new rt,c=new rt,u=new J,d=new J,x=new J,p=new rt,f=new rt;function _(t,e,l){m.fromArray(n,3*t),h.fromArray(n,3*e),c.fromArray(n,3*l),u.fromArray(a,2*t),d.fromArray(a,2*e),x.fromArray(a,2*l),h.sub(m),c.sub(m),d.sub(u),x.sub(u);const i=1/(d.x*x.y-x.x*d.y);isFinite(i)&&(p.copy(h).multiplyScalar(x.y).addScaledVector(c,-d.y).multiplyScalar(i),f.copy(c).multiplyScalar(d.x).addScaledVector(h,-x.x).multiplyScalar(i),o[t].add(p),o[e].add(p),o[l].add(p),s[t].add(f),s[e].add(f),s[l].add(f))}let g=this.groups;0===g.length&&(g=[{start:0,count:l.length}]);for(let t=0,e=g.length;t<e;++t){const e=g[t],n=e.start;for(let t=n,i=n+e.count;t<i;t+=3)_(l[t+0],l[t+1],l[t+2])}const v=new rt,y=new rt,w=new rt,b=new rt;function M(t){w.fromArray(i,3*t),b.copy(w);const e=o[t];v.copy(e),v.sub(w.multiplyScalar(w.dot(e))).normalize(),y.crossVectors(b,e);const l=y.dot(s[t])<0?-1:1;q[4*t]=v.x,q[4*t+1]=v.y,q[4*t+2]=v.z,q[4*t+3]=l}for(let t=0,e=g.length;t<e;++t){const e=g[t],n=e.start;for(let t=n,i=n+e.count;t<i;t+=3)M(l[t+0]),M(l[t+1]),M(l[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let l=this.getAttribute("normal");if(void 0===l)l=new Ie(new Float32Array(3*e.count),3),this.setAttribute("normal",l);else for(let t=0,e=l.count;t<e;t++)l.setXYZ(t,0,0,0);const n=new rt,i=new rt,a=new rt,r=new rt,q=new rt,o=new rt,s=new rt,m=new rt;if(t)for(let h=0,c=t.count;h<c;h+=3){const c=t.getX(h+0),u=t.getX(h+1),d=t.getX(h+2);n.fromBufferAttribute(e,c),i.fromBufferAttribute(e,u),a.fromBufferAttribute(e,d),s.subVectors(a,i),m.subVectors(n,i),s.cross(m),r.fromBufferAttribute(l,c),q.fromBufferAttribute(l,u),o.fromBufferAttribute(l,d),r.add(s),q.add(s),o.add(s),l.setXYZ(c,r.x,r.y,r.z),l.setXYZ(u,q.x,q.y,q.z),l.setXYZ(d,o.x,o.y,o.z)}else for(let t=0,r=e.count;t<r;t+=3)n.fromBufferAttribute(e,t+0),i.fromBufferAttribute(e,t+1),a.fromBufferAttribute(e,t+2),s.subVectors(a,i),m.subVectors(n,i),s.cross(m),l.setXYZ(t+0,s.x,s.y,s.z),l.setXYZ(t+1,s.x,s.y,s.z),l.setXYZ(t+2,s.x,s.y,s.z);this.normalizeNormals(),l.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const l=this.attributes;for(const n in l){if(void 0===t.attributes[n])continue;const i=l[n].array,a=t.attributes[n],r=a.array,q=a.itemSize*e,o=Math.min(r.length,i.length-q);for(let t=0,e=q;t<o;t++,e++)i[e]=r[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,l=t.count;e<l;e++)Xe.fromBufferAttribute(t,e),Xe.normalize(),t.setXYZ(e,Xe.x,Xe.y,Xe.z)}toNonIndexed(){function t(t,e){const l=t.array,n=t.itemSize,i=t.normalized,a=new l.constructor(e.length*n);let r=0,q=0;for(let t=0,i=e.length;t<i;t++){r=e[t]*n;for(let t=0;t<n;t++)a[q++]=l[r++]}return new Ie(a,n,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Ye,l=this.index.array,n=this.attributes;for(const i in n){const a=t(n[i],l);e.setAttribute(i,a)}const i=this.morphAttributes;for(const n in i){const a=[],r=i[n];for(let e=0,n=r.length;e<n;e++){const n=t(r[e],l);a.push(n)}e.morphAttributes[n]=a}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let t=0,l=a.length;t<l;t++){const l=a[t];e.addGroup(l.start,l.count,l.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const l in e)void 0!==e[l]&&(t[l]=e[l]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const l=this.attributes;for(const e in l){const n=l[e];t.data.attributes[e]=n.toJSON(t.data)}const n={};let i=!1;for(const e in this.morphAttributes){const l=this.morphAttributes[e],a=[];for(let e=0,n=l.length;e<n;e++){const n=l[e];a.push(n.toJSON(t.data))}a.length>0&&(n[e]=a,i=!0)}i&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const r=this.boundingSphere;return null!==r&&(t.data.boundingSphere={center:r.center.toArray(),radius:r.radius}),t}clone(){return(new Ye).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const l=t.index;null!==l&&this.setIndex(l.clone(e));const n=t.attributes;for(const t in n){const l=n[t];this.setAttribute(t,l.clone(e))}const i=t.morphAttributes;for(const t in i){const l=[],n=i[t];for(let t=0,i=n.length;t<i;t++)l.push(n[t].clone(e));this.morphAttributes[t]=l}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let t=0,e=a.length;t<e;t++){const e=a[t];this.addGroup(e.start,e.count,e.materialIndex)}const r=t.boundingBox;null!==r&&(this.boundingBox=r.clone());const q=t.boundingSphere;return null!==q&&(this.boundingSphere=q.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}Ye.prototype.isBufferGeometry=!0;const Ze=new Bt,Je=new It,Qe=new Tt,Ke=new rt,$e=new rt,tl=new rt,el=new rt,ll=new rt,nl=new rt,il=new rt,al=new rt,rl=new rt,ql=new J,ol=new J,sl=new J,ml=new rt,hl=new rt;class cl extends oe{constructor(t=new Ye,e=new Pe){super(),this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,l=Object.keys(e);if(l.length>0){const t=e[l[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,l=t.length;e<l;e++){const l=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[l]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(t,e){const l=this.geometry,n=this.material,i=this.matrixWorld;if(void 0===n)return;if(null===l.boundingSphere&&l.computeBoundingSphere(),Qe.copy(l.boundingSphere),Qe.applyMatrix4(i),!1===t.ray.intersectsSphere(Qe))return;if(Ze.copy(i).invert(),Je.copy(t.ray).applyMatrix4(Ze),null!==l.boundingBox&&!1===Je.intersectsBox(l.boundingBox))return;let a;if(l.isBufferGeometry){const i=l.index,r=l.attributes.position,q=l.morphAttributes.position,o=l.morphTargetsRelative,s=l.attributes.uv,m=l.attributes.uv2,h=l.groups,c=l.drawRange;if(null!==i)if(Array.isArray(n))for(let l=0,u=h.length;l<u;l++){const u=h[l],d=n[u.materialIndex];for(let l=Math.max(u.start,c.start),n=Math.min(u.start+u.count,c.start+c.count);l<n;l+=3){const n=i.getX(l),h=i.getX(l+1),c=i.getX(l+2);a=ul(this,d,t,Je,r,q,o,s,m,n,h,c),a&&(a.faceIndex=Math.floor(l/3),a.face.materialIndex=u.materialIndex,e.push(a))}}else{for(let l=Math.max(0,c.start),h=Math.min(i.count,c.start+c.count);l<h;l+=3){const h=i.getX(l),c=i.getX(l+1),u=i.getX(l+2);a=ul(this,n,t,Je,r,q,o,s,m,h,c,u),a&&(a.faceIndex=Math.floor(l/3),e.push(a))}}else if(void 0!==r)if(Array.isArray(n))for(let l=0,i=h.length;l<i;l++){const i=h[l],u=n[i.materialIndex];for(let l=Math.max(i.start,c.start),n=Math.min(i.start+i.count,c.start+c.count);l<n;l+=3){a=ul(this,u,t,Je,r,q,o,s,m,l,l+1,l+2),a&&(a.faceIndex=Math.floor(l/3),a.face.materialIndex=i.materialIndex,e.push(a))}}else{for(let l=Math.max(0,c.start),i=Math.min(r.count,c.start+c.count);l<i;l+=3){a=ul(this,n,t,Je,r,q,o,s,m,l,l+1,l+2),a&&(a.faceIndex=Math.floor(l/3),e.push(a))}}}else l.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function ul(t,e,l,n,i,a,r,q,o,s,m,h){Ke.fromBufferAttribute(i,s),$e.fromBufferAttribute(i,m),tl.fromBufferAttribute(i,h);const c=t.morphTargetInfluences;if(e.morphTargets&&a&&c){il.set(0,0,0),al.set(0,0,0),rl.set(0,0,0);for(let t=0,e=a.length;t<e;t++){const e=c[t],l=a[t];0!==e&&(el.fromBufferAttribute(l,s),ll.fromBufferAttribute(l,m),nl.fromBufferAttribute(l,h),r?(il.addScaledVector(el,e),al.addScaledVector(ll,e),rl.addScaledVector(nl,e)):(il.addScaledVector(el.sub(Ke),e),al.addScaledVector(ll.sub($e),e),rl.addScaledVector(nl.sub(tl),e)))}Ke.add(il),$e.add(al),tl.add(rl)}t.isSkinnedMesh&&(t.boneTransform(s,Ke),t.boneTransform(m,$e),t.boneTransform(h,tl));const u=function(t,e,l,n,i,a,r,q){let o;if(o=1===e.side?n.intersectTriangle(r,a,i,!0,q):n.intersectTriangle(i,a,r,2!==e.side,q),null===o)return null;hl.copy(q),hl.applyMatrix4(t.matrixWorld);const s=l.ray.origin.distanceTo(hl);return s<l.near||s>l.far?null:{distance:s,point:hl.clone(),object:t}}(t,e,l,n,Ke,$e,tl,ml);if(u){q&&(ql.fromBufferAttribute(q,s),ol.fromBufferAttribute(q,m),sl.fromBufferAttribute(q,h),u.uv=be.getUV(ml,Ke,$e,tl,ql,ol,sl,new J)),o&&(ql.fromBufferAttribute(o,s),ol.fromBufferAttribute(o,m),sl.fromBufferAttribute(o,h),u.uv2=be.getUV(ml,Ke,$e,tl,ql,ol,sl,new J));const t={a:s,b:m,c:h,normal:new rt,materialIndex:0};be.getNormal(Ke,$e,tl,t.normal),u.face=t}return u}cl.prototype.isMesh=!0;class dl extends Ye{constructor(t=1,e=1,l=1,n=1,i=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:l,widthSegments:n,heightSegments:i,depthSegments:a};const r=this;n=Math.floor(n),i=Math.floor(i),a=Math.floor(a);const q=[],o=[],s=[],m=[];let h=0,c=0;function u(t,e,l,n,i,a,u,d,x,p,f){const _=a/x,g=u/p,v=a/2,y=u/2,w=d/2,b=x+1,M=p+1;let z=0,S=0;const E=new rt;for(let a=0;a<M;a++){const r=a*g-y;for(let q=0;q<b;q++){const h=q*_-v;E[t]=h*n,E[e]=r*i,E[l]=w,o.push(E.x,E.y,E.z),E[t]=0,E[e]=0,E[l]=d>0?1:-1,s.push(E.x,E.y,E.z),m.push(q/x),m.push(1-a/p),z+=1}}for(let t=0;t<p;t++)for(let e=0;e<x;e++){const l=h+e+b*t,n=h+e+b*(t+1),i=h+(e+1)+b*(t+1),a=h+(e+1)+b*t;q.push(l,n,a),q.push(n,i,a),S+=6}r.addGroup(c,S,f),c+=S,h+=z}u("z","y","x",-1,-1,l,e,t,a,i,0),u("z","y","x",1,-1,l,e,-t,a,i,1),u("x","z","y",1,1,t,l,e,n,a,2),u("x","z","y",1,-1,t,l,-e,n,a,3),u("x","y","z",1,-1,t,e,l,n,i,4),u("x","y","z",-1,-1,t,e,-l,n,i,5),this.setIndex(q),this.setAttribute("position",new Fe(o,3)),this.setAttribute("normal",new Fe(s,3)),this.setAttribute("uv",new Fe(m,2))}}function xl(t){const e={};for(const l in t){e[l]={};for(const n in t[l]){const i=t[l][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?e[l][n]=i.clone():Array.isArray(i)?e[l][n]=i.slice():e[l][n]=i}}return e}function pl(t){const e={};for(let l=0;l<t.length;l++){const n=xl(t[l]);for(const t in n)e[t]=n[t]}return e}const fl={clone:xl,merge:pl};class _l extends ze{constructor(t){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=xl(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const l in this.uniforms){const n=this.uniforms[l].value;n&&n.isTexture?e.uniforms[l]={type:"t",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[l]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[l]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[l]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[l]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[l]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[l]={type:"m4",value:n.toArray()}:e.uniforms[l]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const l={};for(const t in this.extensions)!0===this.extensions[t]&&(l[t]=!0);return Object.keys(l).length>0&&(e.extensions=l),e}}_l.prototype.isShaderMaterial=!0;class gl extends oe{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Bt,this.projectionMatrix=new Bt,this.projectionMatrixInverse=new Bt}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new rt),this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}gl.prototype.isCamera=!0;class vl extends gl{constructor(t=50,e=1,l=.1,n=2e3){super(),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=l,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*V*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*G*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*V*Math.atan(Math.tan(.5*G*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,l,n,i,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=l,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*G*this.fov)/this.zoom,l=2*e,n=this.aspect*l,i=-.5*n;const a=this.view;if(null!==this.view&&this.view.enabled){const t=a.fullWidth,r=a.fullHeight;i+=a.offsetX*n/t,e-=a.offsetY*l/r,n*=a.width/t,l*=a.height/r}const r=this.filmOffset;0!==r&&(i+=t*r/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+n,e,e-l,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}vl.prototype.isPerspectiveCamera=!0;const yl=90;class wl extends oe{constructor(t,e,l){if(super(),this.type="CubeCamera",!0!==l.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=l;const n=new vl(yl,1,t,e);n.layers=this.layers,n.up.set(0,-1,0),n.lookAt(new rt(1,0,0)),this.add(n);const i=new vl(yl,1,t,e);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new rt(-1,0,0)),this.add(i);const a=new vl(yl,1,t,e);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new rt(0,1,0)),this.add(a);const r=new vl(yl,1,t,e);r.layers=this.layers,r.up.set(0,0,-1),r.lookAt(new rt(0,-1,0)),this.add(r);const q=new vl(yl,1,t,e);q.layers=this.layers,q.up.set(0,-1,0),q.lookAt(new rt(0,0,1)),this.add(q);const o=new vl(yl,1,t,e);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new rt(0,0,-1)),this.add(o)}update(t,e){null===this.parent&&this.updateMatrixWorld();const l=this.renderTarget,[n,i,a,r,q,o]=this.children,s=t.xr.enabled,m=t.getRenderTarget();t.xr.enabled=!1;const h=l.texture.generateMipmaps;l.texture.generateMipmaps=!1,t.setRenderTarget(l,0),t.render(e,n),t.setRenderTarget(l,1),t.render(e,i),t.setRenderTarget(l,2),t.render(e,a),t.setRenderTarget(l,3),t.render(e,r),t.setRenderTarget(l,4),t.render(e,q),l.texture.generateMipmaps=h,t.setRenderTarget(l,5),t.render(e,o),t.setRenderTarget(m),t.xr.enabled=s}}class bl extends et{constructor(t,e,l,i,a,r,q,o,s,m){super(t=void 0!==t?t:[],e=void 0!==e?e:n,l,i,a,r,q=void 0!==q?q:y,o,s,m),this._needsFlipEnvMap=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}bl.prototype.isCubeTexture=!0;class Ml extends it{constructor(t,e,l){Number.isInteger(e)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),e=l),super(t,t,e),e=e||{},this.texture=new bl(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:u,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=w,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const l={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},n=new dl(5,5,5),i=new _l({name:"CubemapFromEquirect",uniforms:xl(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,side:1,blending:0});i.uniforms.tEquirect.value=e;const a=new cl(n,i),r=e.minFilter;e.minFilter===d&&(e.minFilter=u);return new wl(1,10,this).update(t,a),e.minFilter=r,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,l,n){const i=t.getRenderTarget();for(let i=0;i<6;i++)t.setRenderTarget(this,i),t.clear(e,l,n);t.setRenderTarget(i)}}Ml.prototype.isWebGLCubeRenderTarget=!0;const zl=new Tt,Sl=new rt;class El{constructor(t=new ce,e=new ce,l=new ce,n=new ce,i=new ce,a=new ce){this.planes=[t,e,l,n,i,a]}set(t,e,l,n,i,a){const r=this.planes;return r[0].copy(t),r[1].copy(e),r[2].copy(l),r[3].copy(n),r[4].copy(i),r[5].copy(a),this}copy(t){const e=this.planes;for(let l=0;l<6;l++)e[l].copy(t.planes[l]);return this}setFromProjectionMatrix(t){const e=this.planes,l=t.elements,n=l[0],i=l[1],a=l[2],r=l[3],q=l[4],o=l[5],s=l[6],m=l[7],h=l[8],c=l[9],u=l[10],d=l[11],x=l[12],p=l[13],f=l[14],_=l[15];return e[0].setComponents(r-n,m-q,d-h,_-x).normalize(),e[1].setComponents(r+n,m+q,d+h,_+x).normalize(),e[2].setComponents(r+i,m+o,d+c,_+p).normalize(),e[3].setComponents(r-i,m-o,d-c,_-p).normalize(),e[4].setComponents(r-a,m-s,d-u,_-f).normalize(),e[5].setComponents(r+a,m+s,d+u,_+f).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),zl.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(zl)}intersectsSprite(t){return zl.center.set(0,0,0),zl.radius=.7071067811865476,zl.applyMatrix4(t.matrixWorld),this.intersectsSphere(zl)}intersectsSphere(t){const e=this.planes,l=t.center,n=-t.radius;for(let t=0;t<6;t++){if(e[t].distanceToPoint(l)<n)return!1}return!0}intersectsBox(t){const e=this.planes;for(let l=0;l<6;l++){const n=e[l];if(Sl.x=n.normal.x>0?t.max.x:t.min.x,Sl.y=n.normal.y>0?t.max.y:t.min.y,Sl.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(Sl)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let l=0;l<6;l++)if(e[l].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Tl(){let t=null,e=!1,l=null,n=null;function i(e,a){l(e,a),n=t.requestAnimationFrame(i)}return{start:function(){!0!==e&&null!==l&&(n=t.requestAnimationFrame(i),e=!0)},stop:function(){t.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(t){l=t},setContext:function(e){t=e}}}function Ll(t,e){const l=e.isWebGL2,n=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),n.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const l=n.get(e);l&&(t.deleteBuffer(l.buffer),n.delete(e))},update:function(e,i){if(e.isGLBufferAttribute){const t=n.get(e);return void((!t||t.version<e.version)&&n.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const a=n.get(e);void 0===a?n.set(e,function(e,n){const i=e.array,a=e.usage,r=t.createBuffer();t.bindBuffer(n,r),t.bufferData(n,i,a),e.onUploadCallback();let q=5126;return i instanceof Float32Array?q=5126:i instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):i instanceof Uint16Array?e.isFloat16BufferAttribute?l?q=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):q=5123:i instanceof Int16Array?q=5122:i instanceof Uint32Array?q=5125:i instanceof Int32Array?q=5124:i instanceof Int8Array?q=5120:(i instanceof Uint8Array||i instanceof Uint8ClampedArray)&&(q=5121),{buffer:r,type:q,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version}}(e,i)):a.version<e.version&&(!function(e,n,i){const a=n.array,r=n.updateRange;t.bindBuffer(i,e),-1===r.count?t.bufferSubData(i,0,a):(l?t.bufferSubData(i,r.offset*a.BYTES_PER_ELEMENT,a,r.offset,r.count):t.bufferSubData(i,r.offset*a.BYTES_PER_ELEMENT,a.subarray(r.offset,r.offset+r.count)),r.count=-1)}(a.buffer,e,i),a.version=e.version)}}}class Al extends Ye{constructor(t=1,e=1,l=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:l,heightSegments:n};const i=t/2,a=e/2,r=Math.floor(l),q=Math.floor(n),o=r+1,s=q+1,m=t/r,h=e/q,c=[],u=[],d=[],x=[];for(let t=0;t<s;t++){const e=t*h-a;for(let l=0;l<o;l++){const n=l*m-i;u.push(n,-e,0),d.push(0,0,1),x.push(l/r),x.push(1-t/q)}}for(let t=0;t<q;t++)for(let e=0;e<r;e++){const l=e+o*t,n=e+o*(t+1),i=e+1+o*(t+1),a=e+1+o*t;c.push(l,n,a),c.push(n,i,a)}this.setIndex(c),this.setAttribute("position",new Fe(u,3)),this.setAttribute("normal",new Fe(d,3)),this.setAttribute("uv",new Fe(x,2))}}const Rl={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), rawDiffuseColor, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), rawDiffuseColor, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSNMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\n\tvec3 f0 = vec3( pow( ior - 1.0, 2.0 ) / pow( ior + 1.0, 2.0 ) );\n\tvec3 f90 = vec3( 1.0 );\n\tvec3 f_transmission = totalTransmission * getIBLVolumeRefraction(\n\t\tnormal, v, viewDir, roughnessFactor, diffuseColor.rgb, f0, f90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance);\n\tdiffuseColor.rgb = mix( diffuseColor.rgb, f_transmission, totalTransmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec4 vWorldPosition;\n\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\n\t\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\n\t\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\n\t\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\n\t\treturn normalize(refractionVector) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness(float roughness, float ior) {\n\t\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\n\t}\n\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\n\t\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\n\t\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\n\t}\n\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\n\t\tif (attenuationDistance == 0.0) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\n\t\t\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, vec3 viewDir, float perceptualRoughness, vec3 baseColor, vec3 f0, vec3 f90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness, vec3 attenuationColor, float attenuationDistance) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\n\t\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\n\t\tfloat NdotV = saturate(dot(n, viewDir));\n\t\tvec2 brdf = integrateSpecularBRDF(NdotV, perceptualRoughness);\n\t\tvec3 specularColor = f0 * brdf.x + f90 * brdf.y;\n\t\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform vec3 attenuationColor;\n\tuniform float attenuationDistance;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <transmission_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef USE_TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t\tfloat thicknessFactor = thickness;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\tvec3 rawDiffuseColor = diffuseColor.rgb;\n\t#include <transmission_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#ifdef USE_TRANSMISSION\n\tvarying vec4 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition;\n#endif\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},Cl={common:{diffuse:{value:new Ce(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Q},uv2Transform:{value:new Q},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new J(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ce(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ce(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Q}},sprite:{diffuse:{value:new Ce(16777215)},opacity:{value:1},center:{value:new J(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Q}}},Pl={basic:{uniforms:pl([Cl.common,Cl.specularmap,Cl.envmap,Cl.aomap,Cl.lightmap,Cl.fog]),vertexShader:Rl.meshbasic_vert,fragmentShader:Rl.meshbasic_frag},lambert:{uniforms:pl([Cl.common,Cl.specularmap,Cl.envmap,Cl.aomap,Cl.lightmap,Cl.emissivemap,Cl.fog,Cl.lights,{emissive:{value:new Ce(0)}}]),vertexShader:Rl.meshlambert_vert,fragmentShader:Rl.meshlambert_frag},phong:{uniforms:pl([Cl.common,Cl.specularmap,Cl.envmap,Cl.aomap,Cl.lightmap,Cl.emissivemap,Cl.bumpmap,Cl.normalmap,Cl.displacementmap,Cl.fog,Cl.lights,{emissive:{value:new Ce(0)},specular:{value:new Ce(1118481)},shininess:{value:30}}]),vertexShader:Rl.meshphong_vert,fragmentShader:Rl.meshphong_frag},standard:{uniforms:pl([Cl.common,Cl.envmap,Cl.aomap,Cl.lightmap,Cl.emissivemap,Cl.bumpmap,Cl.normalmap,Cl.displacementmap,Cl.roughnessmap,Cl.metalnessmap,Cl.fog,Cl.lights,{emissive:{value:new Ce(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Rl.meshphysical_vert,fragmentShader:Rl.meshphysical_frag},toon:{uniforms:pl([Cl.common,Cl.aomap,Cl.lightmap,Cl.emissivemap,Cl.bumpmap,Cl.normalmap,Cl.displacementmap,Cl.gradientmap,Cl.fog,Cl.lights,{emissive:{value:new Ce(0)}}]),vertexShader:Rl.meshtoon_vert,fragmentShader:Rl.meshtoon_frag},matcap:{uniforms:pl([Cl.common,Cl.bumpmap,Cl.normalmap,Cl.displacementmap,Cl.fog,{matcap:{value:null}}]),vertexShader:Rl.meshmatcap_vert,fragmentShader:Rl.meshmatcap_frag},points:{uniforms:pl([Cl.points,Cl.fog]),vertexShader:Rl.points_vert,fragmentShader:Rl.points_frag},dashed:{uniforms:pl([Cl.common,Cl.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Rl.linedashed_vert,fragmentShader:Rl.linedashed_frag},depth:{uniforms:pl([Cl.common,Cl.displacementmap]),vertexShader:Rl.depth_vert,fragmentShader:Rl.depth_frag},normal:{uniforms:pl([Cl.common,Cl.bumpmap,Cl.normalmap,Cl.displacementmap,{opacity:{value:1}}]),vertexShader:Rl.normal_vert,fragmentShader:Rl.normal_frag},sprite:{uniforms:pl([Cl.sprite,Cl.fog]),vertexShader:Rl.sprite_vert,fragmentShader:Rl.sprite_frag},background:{uniforms:{uvTransform:{value:new Q},t2D:{value:null}},vertexShader:Rl.background_vert,fragmentShader:Rl.background_frag},cube:{uniforms:pl([Cl.envmap,{opacity:{value:1}}]),vertexShader:Rl.cube_vert,fragmentShader:Rl.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Rl.equirect_vert,fragmentShader:Rl.equirect_frag},distanceRGBA:{uniforms:pl([Cl.common,Cl.displacementmap,{referencePosition:{value:new rt},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Rl.distanceRGBA_vert,fragmentShader:Rl.distanceRGBA_frag},shadow:{uniforms:pl([Cl.lights,Cl.fog,{color:{value:new Ce(0)},opacity:{value:1}}]),vertexShader:Rl.shadow_vert,fragmentShader:Rl.shadow_frag}};function Dl(t,e,l,n,i){const r=new Ce(0);let q,o,s=0,m=null,h=0,c=null;function u(t,e){l.buffers.color.setClear(t.r,t.g,t.b,e,i)}return{getClearColor:function(){return r},setClearColor:function(t,e=1){r.set(t),s=e,u(r,s)},getClearAlpha:function(){return s},setClearAlpha:function(t){s=t,u(r,s)},render:function(l,i){let d=!1,x=!0===i.isScene?i.background:null;x&&x.isTexture&&(x=e.get(x));const p=t.xr,f=p.getSession&&p.getSession();f&&"additive"===f.environmentBlendMode&&(x=null),null===x?u(r,s):x&&x.isColor&&(u(x,1),d=!0),(t.autoClear||d)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),x&&(x.isCubeTexture||x.mapping===a)?(void 0===o&&(o=new cl(new dl(1,1,1),new _l({name:"BackgroundCubeMaterial",uniforms:xl(Pl.cube.uniforms),vertexShader:Pl.cube.vertexShader,fragmentShader:Pl.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),o.geometry.deleteAttribute("uv"),o.onBeforeRender=function(t,e,l){this.matrixWorld.copyPosition(l.matrixWorld)},Object.defineProperty(o.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(o)),o.material.uniforms.envMap.value=x,o.material.uniforms.flipEnvMap.value=x.isCubeTexture&&x._needsFlipEnvMap?-1:1,m===x&&h===x.version&&c===t.toneMapping||(o.material.needsUpdate=!0,m=x,h=x.version,c=t.toneMapping),l.unshift(o,o.geometry,o.material,0,0,null)):x&&x.isTexture&&(void 0===q&&(q=new cl(new Al(2,2),new _l({name:"BackgroundMaterial",uniforms:xl(Pl.background.uniforms),vertexShader:Pl.background.vertexShader,fragmentShader:Pl.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),q.geometry.deleteAttribute("normal"),Object.defineProperty(q.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(q)),q.material.uniforms.t2D.value=x,!0===x.matrixAutoUpdate&&x.updateMatrix(),q.material.uniforms.uvTransform.value.copy(x.matrix),m===x&&h===x.version&&c===t.toneMapping||(q.material.needsUpdate=!0,m=x,h=x.version,c=t.toneMapping),l.unshift(q,q.geometry,q.material,0,0,null))}}}function Nl(t,e,l,n){const i=t.getParameter(34921),a=n.isWebGL2?null:e.get("OES_vertex_array_object"),r=n.isWebGL2||null!==a,q={},o=c(null);let s=o;function m(e){return n.isWebGL2?t.bindVertexArray(e):a.bindVertexArrayOES(e)}function h(e){return n.isWebGL2?t.deleteVertexArray(e):a.deleteVertexArrayOES(e)}function c(t){const e=[],l=[],n=[];for(let t=0;t<i;t++)e[t]=0,l[t]=0,n[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:l,attributeDivisors:n,object:t,attributes:{},index:null}}function u(){const t=s.newAttributes;for(let e=0,l=t.length;e<l;e++)t[e]=0}function d(t){x(t,0)}function x(l,i){const a=s.newAttributes,r=s.enabledAttributes,q=s.attributeDivisors;if(a[l]=1,0===r[l]&&(t.enableVertexAttribArray(l),r[l]=1),q[l]!==i){(n.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](l,i),q[l]=i}}function p(){const e=s.newAttributes,l=s.enabledAttributes;for(let n=0,i=l.length;n<i;n++)l[n]!==e[n]&&(t.disableVertexAttribArray(n),l[n]=0)}function f(e,l,i,a,r,q){!0!==n.isWebGL2||5124!==i&&5125!==i?t.vertexAttribPointer(e,l,i,a,r,q):t.vertexAttribIPointer(e,l,i,r,q)}function _(){g(),s!==o&&(s=o,m(s.object))}function g(){o.geometry=null,o.program=null,o.wireframe=!1}return{setup:function(i,o,h,_,g){let v=!1;if(r){const e=function(e,l,i){const r=!0===i.wireframe;let o=q[e.id];void 0===o&&(o={},q[e.id]=o);let s=o[l.id];void 0===s&&(s={},o[l.id]=s);let m=s[r];void 0===m&&(m=c(n.isWebGL2?t.createVertexArray():a.createVertexArrayOES()),s[r]=m);return m}(_,h,o);s!==e&&(s=e,m(s.object)),v=function(t,e){const l=s.attributes,n=t.attributes;let i=0;for(const t in n){const e=l[t],a=n[t];if(void 0===e)return!0;if(e.attribute!==a)return!0;if(e.data!==a.data)return!0;i++}return s.attributesNum!==i||s.index!==e}(_,g),v&&function(t,e){const l={},n=t.attributes;let i=0;for(const t in n){const e=n[t],a={};a.attribute=e,e.data&&(a.data=e.data),l[t]=a,i++}s.attributes=l,s.attributesNum=i,s.index=e}(_,g)}else{const t=!0===o.wireframe;s.geometry===_.id&&s.program===h.id&&s.wireframe===t||(s.geometry=_.id,s.program=h.id,s.wireframe=t,v=!0)}!0===i.isInstancedMesh&&(v=!0),null!==g&&l.update(g,34963),v&&(!function(i,a,r,q){if(!1===n.isWebGL2&&(i.isInstancedMesh||q.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;u();const o=q.attributes,s=r.getAttributes(),m=a.defaultAttributeValues;for(const e in s){const n=s[e];if(n>=0){const a=o[e];if(void 0!==a){const e=a.normalized,i=a.itemSize,r=l.get(a);if(void 0===r)continue;const o=r.buffer,s=r.type,m=r.bytesPerElement;if(a.isInterleavedBufferAttribute){const l=a.data,r=l.stride,h=a.offset;l&&l.isInstancedInterleavedBuffer?(x(n,l.meshPerAttribute),void 0===q._maxInstanceCount&&(q._maxInstanceCount=l.meshPerAttribute*l.count)):d(n),t.bindBuffer(34962,o),f(n,i,s,e,r*m,h*m)}else a.isInstancedBufferAttribute?(x(n,a.meshPerAttribute),void 0===q._maxInstanceCount&&(q._maxInstanceCount=a.meshPerAttribute*a.count)):d(n),t.bindBuffer(34962,o),f(n,i,s,e,0,0)}else if("instanceMatrix"===e){const e=l.get(i.instanceMatrix);if(void 0===e)continue;const a=e.buffer,r=e.type;x(n+0,1),x(n+1,1),x(n+2,1),x(n+3,1),t.bindBuffer(34962,a),t.vertexAttribPointer(n+0,4,r,!1,64,0),t.vertexAttribPointer(n+1,4,r,!1,64,16),t.vertexAttribPointer(n+2,4,r,!1,64,32),t.vertexAttribPointer(n+3,4,r,!1,64,48)}else if("instanceColor"===e){const e=l.get(i.instanceColor);if(void 0===e)continue;const a=e.buffer,r=e.type;x(n,1),t.bindBuffer(34962,a),t.vertexAttribPointer(n,3,r,!1,12,0)}else if(void 0!==m){const l=m[e];if(void 0!==l)switch(l.length){case 2:t.vertexAttrib2fv(n,l);break;case 3:t.vertexAttrib3fv(n,l);break;case 4:t.vertexAttrib4fv(n,l);break;default:t.vertexAttrib1fv(n,l)}}}}p()}(i,o,h,_),null!==g&&t.bindBuffer(34963,l.get(g).buffer))},reset:_,resetDefaultState:g,dispose:function(){_();for(const t in q){const e=q[t];for(const t in e){const l=e[t];for(const t in l)h(l[t].object),delete l[t];delete e[t]}delete q[t]}},releaseStatesOfGeometry:function(t){if(void 0===q[t.id])return;const e=q[t.id];for(const t in e){const l=e[t];for(const t in l)h(l[t].object),delete l[t];delete e[t]}delete q[t.id]},releaseStatesOfProgram:function(t){for(const e in q){const l=q[e];if(void 0===l[t.id])continue;const n=l[t.id];for(const t in n)h(n[t].object),delete n[t];delete l[t.id]}},initAttributes:u,enableAttribute:d,disableUnusedAttributes:p}}function Il(t,e,l,n){const i=n.isWebGL2;let a;this.setMode=function(t){a=t},this.render=function(e,n){t.drawArrays(a,e,n),l.update(n,a,1)},this.renderInstances=function(n,r,q){if(0===q)return;let o,s;if(i)o=t,s="drawArraysInstanced";else if(o=e.get("ANGLE_instanced_arrays"),s="drawArraysInstancedANGLE",null===o)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");o[s](a,n,r,q),l.update(r,a,q)}}function Bl(t,e,l){let n;function i(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const a="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let r=void 0!==l.precision?l.precision:"highp";const q=i(r);q!==r&&(console.warn("THREE.WebGLRenderer:",r,"not supported, using",q,"instead."),r=q);const o=a||e.has("WEBGL_draw_buffers"),s=!0===l.logarithmicDepthBuffer,m=t.getParameter(34930),h=t.getParameter(35660),c=t.getParameter(3379),u=t.getParameter(34076),d=t.getParameter(34921),x=t.getParameter(36347),p=t.getParameter(36348),f=t.getParameter(36349),_=h>0,g=a||e.has("OES_texture_float");return{isWebGL2:a,drawBuffers:o,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===e.has("EXT_texture_filter_anisotropic")){const l=e.get("EXT_texture_filter_anisotropic");n=t.getParameter(l.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:i,precision:r,logarithmicDepthBuffer:s,maxTextures:m,maxVertexTextures:h,maxTextureSize:c,maxCubemapSize:u,maxAttributes:d,maxVertexUniforms:x,maxVaryings:p,maxFragmentUniforms:f,vertexTextures:_,floatFragmentTextures:g,floatVertexTextures:_&&g,maxSamples:a?t.getParameter(36183):0}}function Ol(t){const e=this;let l=null,n=0,i=!1,a=!1;const r=new ce,q=new Q,o={value:null,needsUpdate:!1};function s(){o.value!==l&&(o.value=l,o.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function m(t,l,n,i){const a=null!==t?t.length:0;let s=null;if(0!==a){if(s=o.value,!0!==i||null===s){const e=n+4*a,i=l.matrixWorldInverse;q.getNormalMatrix(i),(null===s||s.length<e)&&(s=new Float32Array(e));for(let e=0,l=n;e!==a;++e,l+=4)r.copy(t[e]).applyMatrix4(i,q),r.normal.toArray(s,l),s[l+3]=r.constant}o.value=s,o.needsUpdate=!0}return e.numPlanes=a,e.numIntersection=0,s}this.uniform=o,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,a){const r=0!==t.length||e||0!==n||i;return i=e,l=m(t,a,0),n=t.length,r},this.beginShadows=function(){a=!0,m(null)},this.endShadows=function(){a=!1,s()},this.setState=function(e,r,q){const h=e.clippingPlanes,c=e.clipIntersection,u=e.clipShadows,d=t.get(e);if(!i||null===h||0===h.length||a&&!u)a?m(null):s();else{const t=a?0:n,e=4*t;let i=d.clippingState||null;o.value=i,i=m(h,r,e,q);for(let t=0;t!==e;++t)i[t]=l[t];d.clippingState=i,this.numIntersection=c?this.numPlanes:0,this.numPlanes+=t}}}function Fl(t){let e=new WeakMap;function l(t,e){return 303===e?t.mapping=n:304===e&&(t.mapping=i),t}function a(t){const l=t.target;l.removeEventListener("dispose",a);const n=e.get(l);void 0!==n&&(e.delete(l),n.dispose())}return{get:function(n){if(n&&n.isTexture){const i=n.mapping;if(303===i||304===i){if(e.has(n)){return l(e.get(n).texture,n.mapping)}{const i=n.image;if(i&&i.height>0){const r=t.getRenderTarget(),q=new Ml(i.height/2);return q.fromEquirectangularTexture(t,n),e.set(n,q),t.setRenderTarget(r),n.addEventListener("dispose",a),l(q.texture,n.mapping)}return null}}}return n},dispose:function(){e=new WeakMap}}}function Hl(t){const e={};function l(l){if(void 0!==e[l])return e[l];let n;switch(l){case"WEBGL_depth_texture":n=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=t.getExtension(l)}return e[l]=n,n}return{has:function(t){return null!==l(t)},init:function(t){t.isWebGL2?l("EXT_color_buffer_float"):(l("WEBGL_depth_texture"),l("OES_texture_float"),l("OES_texture_half_float"),l("OES_texture_half_float_linear"),l("OES_standard_derivatives"),l("OES_element_index_uint"),l("OES_vertex_array_object"),l("ANGLE_instanced_arrays")),l("OES_texture_float_linear"),l("EXT_color_buffer_half_float")},get:function(t){const e=l(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function Ul(t,e,l,n){const i={},a=new WeakMap;function r(t){const q=t.target;null!==q.index&&e.remove(q.index);for(const t in q.attributes)e.remove(q.attributes[t]);q.removeEventListener("dispose",r),delete i[q.id];const o=a.get(q);o&&(e.remove(o),a.delete(q)),n.releaseStatesOfGeometry(q),!0===q.isInstancedBufferGeometry&&delete q._maxInstanceCount,l.memory.geometries--}function q(t){const l=[],n=t.index,i=t.attributes.position;let r=0;if(null!==n){const t=n.array;r=n.version;for(let e=0,n=t.length;e<n;e+=3){const n=t[e+0],i=t[e+1],a=t[e+2];l.push(n,i,i,a,a,n)}}else{const t=i.array;r=i.version;for(let e=0,n=t.length/3-1;e<n;e+=3){const t=e+0,n=e+1,i=e+2;l.push(t,n,n,i,i,t)}}const q=new(He(l)>65535?Oe:Be)(l,1);q.version=r;const o=a.get(t);o&&e.remove(o),a.set(t,q)}return{get:function(t,e){return!0===i[e.id]||(e.addEventListener("dispose",r),i[e.id]=!0,l.memory.geometries++),e},update:function(t){const l=t.attributes;for(const t in l)e.update(l[t],34962);const n=t.morphAttributes;for(const t in n){const l=n[t];for(let t=0,n=l.length;t<n;t++)e.update(l[t],34962)}},getWireframeAttribute:function(t){const e=a.get(t);if(e){const l=t.index;null!==l&&e.version<l.version&&q(t)}else q(t);return a.get(t)}}}function Gl(t,e,l,n){const i=n.isWebGL2;let a,r,q;this.setMode=function(t){a=t},this.setIndex=function(t){r=t.type,q=t.bytesPerElement},this.render=function(e,n){t.drawElements(a,n,r,e*q),l.update(n,a,1)},this.renderInstances=function(n,o,s){if(0===s)return;let m,h;if(i)m=t,h="drawElementsInstanced";else if(m=e.get("ANGLE_instanced_arrays"),h="drawElementsInstancedANGLE",null===m)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");m[h](a,o,r,n*q,s),l.update(o,a,s)}}function Vl(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,l,n){switch(e.calls++,l){case 4:e.triangles+=n*(t/3);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",l)}}}}function kl(t,e){return t[0]-e[0]}function Wl(t,e){return Math.abs(e[1])-Math.abs(t[1])}function jl(t){const e={},l=new Float32Array(8),n=[];for(let t=0;t<8;t++)n[t]=[t,0];return{update:function(i,a,r,q){const o=i.morphTargetInfluences,s=void 0===o?0:o.length;let m=e[a.id];if(void 0===m){m=[];for(let t=0;t<s;t++)m[t]=[t,0];e[a.id]=m}for(let t=0;t<s;t++){const e=m[t];e[0]=t,e[1]=o[t]}m.sort(Wl);for(let t=0;t<8;t++)t<s&&m[t][1]?(n[t][0]=m[t][0],n[t][1]=m[t][1]):(n[t][0]=Number.MAX_SAFE_INTEGER,n[t][1]=0);n.sort(kl);const h=r.morphTargets&&a.morphAttributes.position,c=r.morphNormals&&a.morphAttributes.normal;let u=0;for(let t=0;t<8;t++){const e=n[t],i=e[0],r=e[1];i!==Number.MAX_SAFE_INTEGER&&r?(h&&a.getAttribute("morphTarget"+t)!==h[i]&&a.setAttribute("morphTarget"+t,h[i]),c&&a.getAttribute("morphNormal"+t)!==c[i]&&a.setAttribute("morphNormal"+t,c[i]),l[t]=r,u+=r):(h&&!0===a.hasAttribute("morphTarget"+t)&&a.deleteAttribute("morphTarget"+t),c&&!0===a.hasAttribute("morphNormal"+t)&&a.deleteAttribute("morphNormal"+t),l[t]=0)}const d=a.morphTargetsRelative?1:1-u;q.getUniforms().setValue(t,"morphTargetBaseInfluence",d),q.getUniforms().setValue(t,"morphTargetInfluences",l)}}}function Xl(t,e,l,n){let i=new WeakMap;function a(t){const e=t.target;e.removeEventListener("dispose",a),l.remove(e.instanceMatrix),null!==e.instanceColor&&l.remove(e.instanceColor)}return{update:function(t){const r=n.render.frame,q=t.geometry,o=e.get(t,q);return i.get(o)!==r&&(e.update(o),i.set(o,r)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",a)&&t.addEventListener("dispose",a),l.update(t.instanceMatrix,34962),null!==t.instanceColor&&l.update(t.instanceColor,34962)),o},dispose:function(){i=new WeakMap}}}Pl.physical={uniforms:pl([Pl.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new J(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Ce(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new J},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Ce(0)}}]),vertexShader:Rl.meshphysical_vert,fragmentShader:Rl.meshphysical_frag};class Yl extends et{constructor(t=null,e=1,l=1,n=1){super(null),this.image={data:t,width:e,height:l,depth:n},this.magFilter=m,this.minFilter=m,this.wrapR=o,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Yl.prototype.isDataTexture2DArray=!0;class Zl extends et{constructor(t=null,e=1,l=1,n=1){super(null),this.image={data:t,width:e,height:l,depth:n},this.magFilter=m,this.minFilter=m,this.wrapR=o,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Zl.prototype.isDataTexture3D=!0;const Jl=new et,Ql=new Yl,Kl=new Zl,$l=new bl,tn=[],en=[],ln=new Float32Array(16),nn=new Float32Array(9),an=new Float32Array(4);function rn(t,e,l){const n=t[0];if(n<=0||n>0)return t;const i=e*l;let a=tn[i];if(void 0===a&&(a=new Float32Array(i),tn[i]=a),0!==e){n.toArray(a,0);for(let n=1,i=0;n!==e;++n)i+=l,t[n].toArray(a,i)}return a}function qn(t,e){if(t.length!==e.length)return!1;for(let l=0,n=t.length;l<n;l++)if(t[l]!==e[l])return!1;return!0}function on(t,e){for(let l=0,n=e.length;l<n;l++)t[l]=e[l]}function sn(t,e){let l=en[e];void 0===l&&(l=new Int32Array(e),en[e]=l);for(let n=0;n!==e;++n)l[n]=t.allocateTextureUnit();return l}function mn(t,e){const l=this.cache;l[0]!==e&&(t.uniform1f(this.addr,e),l[0]=e)}function hn(t,e){const l=this.cache;if(void 0!==e.x)l[0]===e.x&&l[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),l[0]=e.x,l[1]=e.y);else{if(qn(l,e))return;t.uniform2fv(this.addr,e),on(l,e)}}function cn(t,e){const l=this.cache;if(void 0!==e.x)l[0]===e.x&&l[1]===e.y&&l[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),l[0]=e.x,l[1]=e.y,l[2]=e.z);else if(void 0!==e.r)l[0]===e.r&&l[1]===e.g&&l[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),l[0]=e.r,l[1]=e.g,l[2]=e.b);else{if(qn(l,e))return;t.uniform3fv(this.addr,e),on(l,e)}}function un(t,e){const l=this.cache;if(void 0!==e.x)l[0]===e.x&&l[1]===e.y&&l[2]===e.z&&l[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),l[0]=e.x,l[1]=e.y,l[2]=e.z,l[3]=e.w);else{if(qn(l,e))return;t.uniform4fv(this.addr,e),on(l,e)}}function dn(t,e){const l=this.cache,n=e.elements;if(void 0===n){if(qn(l,e))return;t.uniformMatrix2fv(this.addr,!1,e),on(l,e)}else{if(qn(l,n))return;an.set(n),t.uniformMatrix2fv(this.addr,!1,an),on(l,n)}}function xn(t,e){const l=this.cache,n=e.elements;if(void 0===n){if(qn(l,e))return;t.uniformMatrix3fv(this.addr,!1,e),on(l,e)}else{if(qn(l,n))return;nn.set(n),t.uniformMatrix3fv(this.addr,!1,nn),on(l,n)}}function pn(t,e){const l=this.cache,n=e.elements;if(void 0===n){if(qn(l,e))return;t.uniformMatrix4fv(this.addr,!1,e),on(l,e)}else{if(qn(l,n))return;ln.set(n),t.uniformMatrix4fv(this.addr,!1,ln),on(l,n)}}function fn(t,e){const l=this.cache;l[0]!==e&&(t.uniform1i(this.addr,e),l[0]=e)}function _n(t,e){const l=this.cache;qn(l,e)||(t.uniform2iv(this.addr,e),on(l,e))}function gn(t,e){const l=this.cache;qn(l,e)||(t.uniform3iv(this.addr,e),on(l,e))}function vn(t,e){const l=this.cache;qn(l,e)||(t.uniform4iv(this.addr,e),on(l,e))}function yn(t,e){const l=this.cache;l[0]!==e&&(t.uniform1ui(this.addr,e),l[0]=e)}function wn(t,e){const l=this.cache;qn(l,e)||(t.uniform2uiv(this.addr,e),on(l,e))}function bn(t,e){const l=this.cache;qn(l,e)||(t.uniform3uiv(this.addr,e),on(l,e))}function Mn(t,e){const l=this.cache;qn(l,e)||(t.uniform4uiv(this.addr,e),on(l,e))}function zn(t,e,l){const n=this.cache,i=l.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),l.safeSetTexture2D(e||Jl,i)}function Sn(t,e,l){const n=this.cache,i=l.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),l.setTexture3D(e||Kl,i)}function En(t,e,l){const n=this.cache,i=l.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),l.safeSetTextureCube(e||$l,i)}function Tn(t,e,l){const n=this.cache,i=l.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),l.setTexture2DArray(e||Ql,i)}function Ln(t,e){t.uniform1fv(this.addr,e)}function An(t,e){const l=rn(e,this.size,2);t.uniform2fv(this.addr,l)}function Rn(t,e){const l=rn(e,this.size,3);t.uniform3fv(this.addr,l)}function Cn(t,e){const l=rn(e,this.size,4);t.uniform4fv(this.addr,l)}function Pn(t,e){const l=rn(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,l)}function Dn(t,e){const l=rn(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,l)}function Nn(t,e){const l=rn(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,l)}function In(t,e){t.uniform1iv(this.addr,e)}function Bn(t,e){t.uniform2iv(this.addr,e)}function On(t,e){t.uniform3iv(this.addr,e)}function Fn(t,e){t.uniform4iv(this.addr,e)}function Hn(t,e){t.uniform1uiv(this.addr,e)}function Un(t,e){t.uniform2uiv(this.addr,e)}function Gn(t,e){t.uniform3uiv(this.addr,e)}function Vn(t,e){t.uniform4uiv(this.addr,e)}function kn(t,e,l){const n=e.length,i=sn(l,n);t.uniform1iv(this.addr,i);for(let t=0;t!==n;++t)l.safeSetTexture2D(e[t]||Jl,i[t])}function Wn(t,e,l){const n=e.length,i=sn(l,n);t.uniform1iv(this.addr,i);for(let t=0;t!==n;++t)l.safeSetTextureCube(e[t]||$l,i[t])}function jn(t,e,l){this.id=t,this.addr=l,this.cache=[],this.setValue=function(t){switch(t){case 5126:return mn;case 35664:return hn;case 35665:return cn;case 35666:return un;case 35674:return dn;case 35675:return xn;case 35676:return pn;case 5124:case 35670:return fn;case 35667:case 35671:return _n;case 35668:case 35672:return gn;case 35669:case 35673:return vn;case 5125:return yn;case 36294:return wn;case 36295:return bn;case 36296:return Mn;case 35678:case 36198:case 36298:case 36306:case 35682:return zn;case 35679:case 36299:case 36307:return Sn;case 35680:case 36300:case 36308:case 36293:return En;case 36289:case 36303:case 36311:case 36292:return Tn}}(e.type)}function Xn(t,e,l){this.id=t,this.addr=l,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Ln;case 35664:return An;case 35665:return Rn;case 35666:return Cn;case 35674:return Pn;case 35675:return Dn;case 35676:return Nn;case 5124:case 35670:return In;case 35667:case 35671:return Bn;case 35668:case 35672:return On;case 35669:case 35673:return Fn;case 5125:return Hn;case 36294:return Un;case 36295:return Gn;case 36296:return Vn;case 35678:case 36198:case 36298:case 36306:case 35682:return kn;case 35680:case 36300:case 36308:case 36293:return Wn}}(e.type)}function Yn(t){this.id=t,this.seq=[],this.map={}}Xn.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),on(e,t)},Yn.prototype.setValue=function(t,e,l){const n=this.seq;for(let i=0,a=n.length;i!==a;++i){const a=n[i];a.setValue(t,e[a.id],l)}};const Zn=/(\w+)(\])?(\[|\.)?/g;function Jn(t,e){t.seq.push(e),t.map[e.id]=e}function Qn(t,e,l){const n=t.name,i=n.length;for(Zn.lastIndex=0;;){const a=Zn.exec(n),r=Zn.lastIndex;let q=a[1];const o="]"===a[2],s=a[3];if(o&&(q|=0),void 0===s||"["===s&&r+2===i){Jn(l,void 0===s?new jn(q,t,e):new Xn(q,t,e));break}{let t=l.map[q];void 0===t&&(t=new Yn(q),Jn(l,t)),l=t}}}function Kn(t,e){this.seq=[],this.map={};const l=t.getProgramParameter(e,35718);for(let n=0;n<l;++n){const l=t.getActiveUniform(e,n);Qn(l,t.getUniformLocation(e,l.name),this)}}function $n(t,e,l){const n=t.createShader(e);return t.shaderSource(n,l),t.compileShader(n),n}Kn.prototype.setValue=function(t,e,l,n){const i=this.map[e];void 0!==i&&i.setValue(t,l,n)},Kn.prototype.setOptional=function(t,e,l){const n=e[l];void 0!==n&&this.setValue(t,l,n)},Kn.upload=function(t,e,l,n){for(let i=0,a=e.length;i!==a;++i){const a=e[i],r=l[a.id];!1!==r.needsUpdate&&a.setValue(t,r.value,n)}},Kn.seqWithValue=function(t,e){const l=[];for(let n=0,i=t.length;n!==i;++n){const i=t[n];i.id in e&&l.push(i)}return l};let ti=0;function ei(t){switch(t){case C:return["Linear","( value )"];case P:return["sRGB","( value )"];case N:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case D:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}function li(t,e,l){const n=t.getShaderParameter(e,35713),i=t.getShaderInfoLog(e).trim();if(n&&""===i)return"";return"THREE.WebGLShader: gl.getShaderInfoLog() "+l+"\n"+i+function(t){const e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}(t.getShaderSource(e))}function ni(t,e){const l=ei(e);return"vec4 "+t+"( vec4 value ) { return "+l[0]+"ToLinear"+l[1]+"; }"}function ii(t,e){const l=ei(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+l[0]+l[1]+"; }"}function ai(t,e){let l;switch(e){case 1:l="Linear";break;case 2:l="Reinhard";break;case 3:l="OptimizedCineon";break;case 4:l="ACESFilmic";break;case 5:l="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),l="Linear"}return"vec3 "+t+"( vec3 color ) { return "+l+"ToneMapping( color ); }"}function ri(t){return""!==t}function qi(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function oi(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const si=/^[ \t]*#include +<([\w\d./]+)>/gm;function mi(t){return t.replace(si,hi)}function hi(t,e){const l=Rl[e];if(void 0===l)throw new Error("Can not resolve #include <"+e+">");return mi(l)}const ci=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,ui=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function di(t){return t.replace(ui,pi).replace(ci,xi)}function xi(t,e,l,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),pi(t,e,l,n)}function pi(t,e,l,n){let i="";for(let t=parseInt(e);t<parseInt(l);t++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return i}function fi(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function _i(t,e,l,q){const o=t.getContext(),s=l.defines;let m=l.vertexShader,h=l.fragmentShader;const c=function(t){let e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(l),u=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case n:case i:e="ENVMAP_TYPE_CUBE";break;case a:case r:e="ENVMAP_TYPE_CUBE_UV"}return e}(l),d=function(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case i:case r:e="ENVMAP_MODE_REFRACTION"}return e}(l),x=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(l),p=t.gammaFactor>0?t.gammaFactor:1,f=l.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission>0)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(ri).join("\n")}(l),_=function(t){const e=[];for(const l in t){const n=t[l];!1!==n&&e.push("#define "+l+" "+n)}return e.join("\n")}(s),g=o.createProgram();let v,y,w=l.glslVersion?"#version "+l.glslVersion+"\n":"";l.isRawShaderMaterial?(v=[_].filter(ri).join("\n"),v.length>0&&(v+="\n"),y=[f,_].filter(ri).join("\n"),y.length>0&&(y+="\n")):(v=[fi(l),"#define SHADER_NAME "+l.shaderName,_,l.instancing?"#define USE_INSTANCING":"",l.instancingColor?"#define USE_INSTANCING_COLOR":"",l.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+p,"#define MAX_BONES "+l.maxBones,l.useFog&&l.fog?"#define USE_FOG":"",l.useFog&&l.fogExp2?"#define FOG_EXP2":"",l.map?"#define USE_MAP":"",l.envMap?"#define USE_ENVMAP":"",l.envMap?"#define "+d:"",l.lightMap?"#define USE_LIGHTMAP":"",l.aoMap?"#define USE_AOMAP":"",l.emissiveMap?"#define USE_EMISSIVEMAP":"",l.bumpMap?"#define USE_BUMPMAP":"",l.normalMap?"#define USE_NORMALMAP":"",l.normalMap&&l.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",l.normalMap&&l.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",l.clearcoatMap?"#define USE_CLEARCOATMAP":"",l.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",l.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",l.displacementMap&&l.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",l.specularMap?"#define USE_SPECULARMAP":"",l.roughnessMap?"#define USE_ROUGHNESSMAP":"",l.metalnessMap?"#define USE_METALNESSMAP":"",l.alphaMap?"#define USE_ALPHAMAP":"",l.transmission?"#define USE_TRANSMISSION":"",l.transmissionMap?"#define USE_TRANSMISSIONMAP":"",l.thicknessMap?"#define USE_THICKNESSMAP":"",l.vertexTangents?"#define USE_TANGENT":"",l.vertexColors?"#define USE_COLOR":"",l.vertexAlphas?"#define USE_COLOR_ALPHA":"",l.vertexUvs?"#define USE_UV":"",l.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",l.flatShading?"#define FLAT_SHADED":"",l.skinning?"#define USE_SKINNING":"",l.useVertexTexture?"#define BONE_TEXTURE":"",l.morphTargets?"#define USE_MORPHTARGETS":"",l.morphNormals&&!1===l.flatShading?"#define USE_MORPHNORMALS":"",l.doubleSided?"#define DOUBLE_SIDED":"",l.flipSided?"#define FLIP_SIDED":"",l.shadowMapEnabled?"#define USE_SHADOWMAP":"",l.shadowMapEnabled?"#define "+c:"",l.sizeAttenuation?"#define USE_SIZEATTENUATION":"",l.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",l.logarithmicDepthBuffer&&l.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(ri).join("\n"),y=[f,fi(l),"#define SHADER_NAME "+l.shaderName,_,l.alphaTest?"#define ALPHATEST "+l.alphaTest+(l.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+p,l.useFog&&l.fog?"#define USE_FOG":"",l.useFog&&l.fogExp2?"#define FOG_EXP2":"",l.map?"#define USE_MAP":"",l.matcap?"#define USE_MATCAP":"",l.envMap?"#define USE_ENVMAP":"",l.envMap?"#define "+u:"",l.envMap?"#define "+d:"",l.envMap?"#define "+x:"",l.lightMap?"#define USE_LIGHTMAP":"",l.aoMap?"#define USE_AOMAP":"",l.emissiveMap?"#define USE_EMISSIVEMAP":"",l.bumpMap?"#define USE_BUMPMAP":"",l.normalMap?"#define USE_NORMALMAP":"",l.normalMap&&l.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",l.normalMap&&l.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",l.clearcoatMap?"#define USE_CLEARCOATMAP":"",l.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",l.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",l.specularMap?"#define USE_SPECULARMAP":"",l.roughnessMap?"#define USE_ROUGHNESSMAP":"",l.metalnessMap?"#define USE_METALNESSMAP":"",l.alphaMap?"#define USE_ALPHAMAP":"",l.sheen?"#define USE_SHEEN":"",l.transmission?"#define USE_TRANSMISSION":"",l.transmissionMap?"#define USE_TRANSMISSIONMAP":"",l.thicknessMap?"#define USE_THICKNESSMAP":"",l.vertexTangents?"#define USE_TANGENT":"",l.vertexColors||l.instancingColor?"#define USE_COLOR":"",l.vertexAlphas?"#define USE_COLOR_ALPHA":"",l.vertexUvs?"#define USE_UV":"",l.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",l.gradientMap?"#define USE_GRADIENTMAP":"",l.flatShading?"#define FLAT_SHADED":"",l.doubleSided?"#define DOUBLE_SIDED":"",l.flipSided?"#define FLIP_SIDED":"",l.shadowMapEnabled?"#define USE_SHADOWMAP":"",l.shadowMapEnabled?"#define "+c:"",l.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",l.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",l.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",l.logarithmicDepthBuffer&&l.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(l.extensionShaderTextureLOD||l.envMap)&&l.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==l.toneMapping?"#define TONE_MAPPING":"",0!==l.toneMapping?Rl.tonemapping_pars_fragment:"",0!==l.toneMapping?ai("toneMapping",l.toneMapping):"",l.dithering?"#define DITHERING":"",Rl.encodings_pars_fragment,l.map?ni("mapTexelToLinear",l.mapEncoding):"",l.matcap?ni("matcapTexelToLinear",l.matcapEncoding):"",l.envMap?ni("envMapTexelToLinear",l.envMapEncoding):"",l.emissiveMap?ni("emissiveMapTexelToLinear",l.emissiveMapEncoding):"",l.lightMap?ni("lightMapTexelToLinear",l.lightMapEncoding):"",ii("linearToOutputTexel",l.outputEncoding),l.depthPacking?"#define DEPTH_PACKING "+l.depthPacking:"","\n"].filter(ri).join("\n")),m=mi(m),m=qi(m,l),m=oi(m,l),h=mi(h),h=qi(h,l),h=oi(h,l),m=di(m),h=di(h),l.isWebGL2&&!0!==l.isRawShaderMaterial&&(w="#version 300 es\n",v=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+v,y=["#define varying in",l.glslVersion===F?"":"out highp vec4 pc_fragColor;",l.glslVersion===F?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+y);const b=w+y+h,M=$n(o,35633,w+v+m),z=$n(o,35632,b);if(o.attachShader(g,M),o.attachShader(g,z),void 0!==l.index0AttributeName?o.bindAttribLocation(g,0,l.index0AttributeName):!0===l.morphTargets&&o.bindAttribLocation(g,0,"position"),o.linkProgram(g),t.debug.checkShaderErrors){const t=o.getProgramInfoLog(g).trim(),e=o.getShaderInfoLog(M).trim(),l=o.getShaderInfoLog(z).trim();let n=!0,i=!0;if(!1===o.getProgramParameter(g,35714)){n=!1;const e=li(o,M,"vertex"),l=li(o,z,"fragment");console.error("THREE.WebGLProgram: shader error: ",o.getError(),"35715",o.getProgramParameter(g,35715),"gl.getProgramInfoLog",t,e,l)}else""!==t?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",t):""!==e&&""!==l||(i=!1);i&&(this.diagnostics={runnable:n,programLog:t,vertexShader:{log:e,prefix:v},fragmentShader:{log:l,prefix:y}})}let S,E;return o.deleteShader(M),o.deleteShader(z),this.getUniforms=function(){return void 0===S&&(S=new Kn(o,g)),S},this.getAttributes=function(){return void 0===E&&(E=function(t,e){const l={},n=t.getProgramParameter(e,35721);for(let i=0;i<n;i++){const n=t.getActiveAttrib(e,i).name;l[n]=t.getAttribLocation(e,n)}return l}(o,g)),E},this.destroy=function(){q.releaseStatesOfProgram(this),o.deleteProgram(g),this.program=void 0},this.name=l.shaderName,this.id=ti++,this.cacheKey=e,this.usedTimes=1,this.program=g,this.vertexShader=M,this.fragmentShader=z,this}function gi(t,e,l,n,i,q){const o=[],s=n.isWebGL2,m=n.logarithmicDepthBuffer,h=n.floatVertexTextures,c=n.maxVertexUniforms,u=n.vertexTextures;let d=n.precision;const x={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},p=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmission","transmissionMap","thicknessMap"];function f(t){let e;return t&&t.isTexture?e=t.encoding:t&&t.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=t.texture.encoding):e=C,e}return{getParameters:function(i,o,p,_,g){const v=_.fog,y=i.isMeshStandardMaterial?_.environment:null,w=e.get(i.envMap||y),b=x[i.type],M=g.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(h)return 1024;{const t=c,l=Math.floor((t-20)/4),n=Math.min(l,e.length);return n<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+n+"."),0):n}}(g):0;let z,S;if(null!==i.precision&&(d=n.getMaxPrecision(i.precision),d!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",d,"instead.")),b){const t=Pl[b];z=t.vertexShader,S=t.fragmentShader}else z=i.vertexShader,S=i.fragmentShader;const E=t.getRenderTarget();return{isWebGL2:s,shaderID:b,shaderName:i.type,vertexShader:z,fragmentShader:S,defines:i.defines,isRawShaderMaterial:!0===i.isRawShaderMaterial,glslVersion:i.glslVersion,precision:d,instancing:!0===g.isInstancedMesh,instancingColor:!0===g.isInstancedMesh&&null!==g.instanceColor,supportsVertexTextures:u,outputEncoding:null!==E?f(E.texture):t.outputEncoding,map:!!i.map,mapEncoding:f(i.map),matcap:!!i.matcap,matcapEncoding:f(i.matcap),envMap:!!w,envMapMode:w&&w.mapping,envMapEncoding:f(w),envMapCubeUV:!!w&&(w.mapping===a||w.mapping===r),lightMap:!!i.lightMap,lightMapEncoding:f(i.lightMap),aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,emissiveMapEncoding:f(i.emissiveMap),bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,objectSpaceNormalMap:1===i.normalMapType,tangentSpaceNormalMap:0===i.normalMapType,clearcoatMap:!!i.clearcoatMap,clearcoatRoughnessMap:!!i.clearcoatRoughnessMap,clearcoatNormalMap:!!i.clearcoatNormalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,alphaMap:!!i.alphaMap,gradientMap:!!i.gradientMap,sheen:!!i.sheen,transmission:!!i.transmission,transmissionMap:!!i.transmissionMap,thicknessMap:!!i.thicknessMap,combine:i.combine,vertexTangents:i.normalMap&&i.vertexTangents,vertexColors:i.vertexColors,vertexAlphas:!0===i.vertexColors&&g.geometry&&g.geometry.attributes.color&&4===g.geometry.attributes.color.itemSize,vertexUvs:!!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatMap||i.clearcoatRoughnessMap||i.clearcoatNormalMap||i.displacementMap||i.transmission||i.transmissionMap||i.thicknessMap),uvsVertexOnly:!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatNormalMap||i.transmission||i.transmissionMap||i.thicknessMap||!i.displacementMap),fog:!!v,useFog:i.fog,fogExp2:v&&v.isFogExp2,flatShading:!!i.flatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:m,skinning:!0===g.isSkinnedMesh&&M>0,maxBones:M,useVertexTexture:h,morphTargets:i.morphTargets,morphNormals:i.morphNormals,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:q.numPlanes,numClipIntersection:q.numIntersection,dithering:i.dithering,shadowMapEnabled:t.shadowMap.enabled&&p.length>0,shadowMapType:t.shadowMap.type,toneMapping:i.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,alphaTest:i.alphaTest,doubleSided:2===i.side,flipSided:1===i.side,depthPacking:void 0!==i.depthPacking&&i.depthPacking,index0AttributeName:i.index0AttributeName,extensionDerivatives:i.extensions&&i.extensions.derivatives,extensionFragDepth:i.extensions&&i.extensions.fragDepth,extensionDrawBuffers:i.extensions&&i.extensions.drawBuffers,extensionShaderTextureLOD:i.extensions&&i.extensions.shaderTextureLOD,rendererExtensionFragDepth:s||l.has("EXT_frag_depth"),rendererExtensionDrawBuffers:s||l.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:s||l.has("EXT_shader_texture_lod"),customProgramCacheKey:i.customProgramCacheKey()}},getProgramCacheKey:function(e){const l=[];if(e.shaderID?l.push(e.shaderID):(l.push(e.fragmentShader),l.push(e.vertexShader)),void 0!==e.defines)for(const t in e.defines)l.push(t),l.push(e.defines[t]);if(!1===e.isRawShaderMaterial){for(let t=0;t<p.length;t++)l.push(e[p[t]]);l.push(t.outputEncoding),l.push(t.gammaFactor)}return l.push(e.customProgramCacheKey),l.join()},getUniforms:function(t){const e=x[t.type];let l;if(e){const t=Pl[e];l=fl.clone(t.uniforms)}else l=t.uniforms;return l},acquireProgram:function(e,l){let n;for(let t=0,e=o.length;t<e;t++){const e=o[t];if(e.cacheKey===l){n=e,++n.usedTimes;break}}return void 0===n&&(n=new _i(t,l,e,i),o.push(n)),n},releaseProgram:function(t){if(0==--t.usedTimes){const e=o.indexOf(t);o[e]=o[o.length-1],o.pop(),t.destroy()}},programs:o}}function vi(){let t=new WeakMap;return{get:function(e){let l=t.get(e);return void 0===l&&(l={},t.set(e,l)),l},remove:function(e){t.delete(e)},update:function(e,l,n){t.get(e)[l]=n},dispose:function(){t=new WeakMap}}}function yi(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function wi(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function bi(t){const e=[];let l=0;const n=[],i=[],a=[],r={id:-1};function q(n,i,a,q,o,s){let m=e[l];const h=t.get(a);return void 0===m?(m={id:n.id,object:n,geometry:i,material:a,program:h.program||r,groupOrder:q,renderOrder:n.renderOrder,z:o,group:s},e[l]=m):(m.id=n.id,m.object=n,m.geometry=i,m.material=a,m.program=h.program||r,m.groupOrder=q,m.renderOrder=n.renderOrder,m.z=o,m.group=s),l++,m}return{opaque:n,transmissive:i,transparent:a,init:function(){l=0,n.length=0,i.length=0,a.length=0},push:function(t,e,l,r,o,s){const m=q(t,e,l,r,o,s);l.transmission>0?i.push(m):!0===l.transparent?a.push(m):n.push(m)},unshift:function(t,e,l,r,o,s){const m=q(t,e,l,r,o,s);l.transmission>0?i.unshift(m):!0===l.transparent?a.unshift(m):n.unshift(m)},finish:function(){for(let t=l,n=e.length;t<n;t++){const l=e[t];if(null===l.id)break;l.id=null,l.object=null,l.geometry=null,l.material=null,l.program=null,l.group=null}},sort:function(t,e){n.length>1&&n.sort(t||yi),i.length>1&&i.sort(e||wi),a.length>1&&a.sort(e||wi)}}}function Mi(t){let e=new WeakMap;return{get:function(l,n){let i;return!1===e.has(l)?(i=new bi(t),e.set(l,[i])):n>=e.get(l).length?(i=new bi(t),e.get(l).push(i)):i=e.get(l)[n],i},dispose:function(){e=new WeakMap}}}function zi(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let l;switch(e.type){case"DirectionalLight":l={direction:new rt,color:new Ce};break;case"SpotLight":l={position:new rt,direction:new rt,color:new Ce,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":l={position:new rt,color:new Ce,distance:0,decay:0};break;case"HemisphereLight":l={direction:new rt,skyColor:new Ce,groundColor:new Ce};break;case"RectAreaLight":l={color:new Ce,position:new rt,halfWidth:new rt,halfHeight:new rt}}return t[e.id]=l,l}}}let Si=0;function Ei(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Ti(t,e){const l=new zi,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let l;switch(e.type){case"DirectionalLight":case"SpotLight":l={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new J};break;case"PointLight":l={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new J,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=l,l}}}(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)i.probe.push(new rt);const a=new rt,r=new Bt,q=new Bt;return{setup:function(a){let r=0,q=0,o=0;for(let t=0;t<9;t++)i.probe[t].set(0,0,0);let s=0,m=0,h=0,c=0,u=0,d=0,x=0,p=0;a.sort(Ei);for(let t=0,e=a.length;t<e;t++){const e=a[t],f=e.color,_=e.intensity,g=e.distance,v=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)r+=f.r*_,q+=f.g*_,o+=f.b*_;else if(e.isLightProbe)for(let t=0;t<9;t++)i.probe[t].addScaledVector(e.sh.coefficients[t],_);else if(e.isDirectionalLight){const t=l.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),e.castShadow){const t=e.shadow,l=n.get(e);l.shadowBias=t.bias,l.shadowNormalBias=t.normalBias,l.shadowRadius=t.radius,l.shadowMapSize=t.mapSize,i.directionalShadow[s]=l,i.directionalShadowMap[s]=v,i.directionalShadowMatrix[s]=e.shadow.matrix,d++}i.directional[s]=t,s++}else if(e.isSpotLight){const t=l.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(f).multiplyScalar(_),t.distance=g,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,l=n.get(e);l.shadowBias=t.bias,l.shadowNormalBias=t.normalBias,l.shadowRadius=t.radius,l.shadowMapSize=t.mapSize,i.spotShadow[h]=l,i.spotShadowMap[h]=v,i.spotShadowMatrix[h]=e.shadow.matrix,p++}i.spot[h]=t,h++}else if(e.isRectAreaLight){const t=l.get(e);t.color.copy(f).multiplyScalar(_),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),i.rectArea[c]=t,c++}else if(e.isPointLight){const t=l.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,l=n.get(e);l.shadowBias=t.bias,l.shadowNormalBias=t.normalBias,l.shadowRadius=t.radius,l.shadowMapSize=t.mapSize,l.shadowCameraNear=t.camera.near,l.shadowCameraFar=t.camera.far,i.pointShadow[m]=l,i.pointShadowMap[m]=v,i.pointShadowMatrix[m]=e.shadow.matrix,x++}i.point[m]=t,m++}else if(e.isHemisphereLight){const t=l.get(e);t.skyColor.copy(e.color).multiplyScalar(_),t.groundColor.copy(e.groundColor).multiplyScalar(_),i.hemi[u]=t,u++}}c>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(i.rectAreaLTC1=Cl.LTC_FLOAT_1,i.rectAreaLTC2=Cl.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(i.rectAreaLTC1=Cl.LTC_HALF_1,i.rectAreaLTC2=Cl.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=r,i.ambient[1]=q,i.ambient[2]=o;const f=i.hash;f.directionalLength===s&&f.pointLength===m&&f.spotLength===h&&f.rectAreaLength===c&&f.hemiLength===u&&f.numDirectionalShadows===d&&f.numPointShadows===x&&f.numSpotShadows===p||(i.directional.length=s,i.spot.length=h,i.rectArea.length=c,i.point.length=m,i.hemi.length=u,i.directionalShadow.length=d,i.directionalShadowMap.length=d,i.pointShadow.length=x,i.pointShadowMap.length=x,i.spotShadow.length=p,i.spotShadowMap.length=p,i.directionalShadowMatrix.length=d,i.pointShadowMatrix.length=x,i.spotShadowMatrix.length=p,f.directionalLength=s,f.pointLength=m,f.spotLength=h,f.rectAreaLength=c,f.hemiLength=u,f.numDirectionalShadows=d,f.numPointShadows=x,f.numSpotShadows=p,i.version=Si++)},setupView:function(t,e){let l=0,n=0,o=0,s=0,m=0;const h=e.matrixWorldInverse;for(let e=0,c=t.length;e<c;e++){const c=t[e];if(c.isDirectionalLight){const t=i.directional[l];t.direction.setFromMatrixPosition(c.matrixWorld),a.setFromMatrixPosition(c.target.matrixWorld),t.direction.sub(a),t.direction.transformDirection(h),l++}else if(c.isSpotLight){const t=i.spot[o];t.position.setFromMatrixPosition(c.matrixWorld),t.position.applyMatrix4(h),t.direction.setFromMatrixPosition(c.matrixWorld),a.setFromMatrixPosition(c.target.matrixWorld),t.direction.sub(a),t.direction.transformDirection(h),o++}else if(c.isRectAreaLight){const t=i.rectArea[s];t.position.setFromMatrixPosition(c.matrixWorld),t.position.applyMatrix4(h),q.identity(),r.copy(c.matrixWorld),r.premultiply(h),q.extractRotation(r),t.halfWidth.set(.5*c.width,0,0),t.halfHeight.set(0,.5*c.height,0),t.halfWidth.applyMatrix4(q),t.halfHeight.applyMatrix4(q),s++}else if(c.isPointLight){const t=i.point[n];t.position.setFromMatrixPosition(c.matrixWorld),t.position.applyMatrix4(h),n++}else if(c.isHemisphereLight){const t=i.hemi[m];t.direction.setFromMatrixPosition(c.matrixWorld),t.direction.transformDirection(h),t.direction.normalize(),m++}}},state:i}}function Li(t,e){const l=new Ti(t,e),n=[],i=[];return{init:function(){n.length=0,i.length=0},state:{lightsArray:n,shadowsArray:i,lights:l},setupLights:function(){l.setup(n)},setupLightsView:function(t){l.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){i.push(t)}}}function Ai(t,e){let l=new WeakMap;return{get:function(n,i=0){let a;return!1===l.has(n)?(a=new Li(t,e),l.set(n,[a])):i>=l.get(n).length?(a=new Li(t,e),l.get(n).push(a)):a=l.get(n)[i],a},dispose:function(){l=new WeakMap}}}class Ri extends ze{constructor(t){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}Ri.prototype.isMeshDepthMaterial=!0;class Ci extends ze{constructor(t){super(),this.type="MeshDistanceMaterial",this.referencePosition=new rt,this.nearDistance=1,this.farDistance=1e3,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}Ci.prototype.isMeshDistanceMaterial=!0;function Pi(t,e,l){let n=new El;const i=new J,a=new J,r=new nt,q=[],o=[],s={},h=l.maxTextureSize,c={0:1,1:0,2:2},d=new _l({defines:{SAMPLE_RATE:.25,HALF_SAMPLE_RATE:.125},uniforms:{shadow_pass:{value:null},resolution:{value:new J},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),x=d.clone();x.defines.HORIZONTAL_PASS=1;const p=new Ye;p.setAttribute("position",new Ie(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const f=new cl(p,d),_=this;function g(l,n){const i=e.update(f);d.uniforms.shadow_pass.value=l.map.texture,d.uniforms.resolution.value=l.mapSize,d.uniforms.radius.value=l.radius,t.setRenderTarget(l.mapPass),t.clear(),t.renderBufferDirect(n,null,i,d,f,null),x.uniforms.shadow_pass.value=l.mapPass.texture,x.uniforms.resolution.value=l.mapSize,x.uniforms.radius.value=l.radius,t.setRenderTarget(l.map),t.clear(),t.renderBufferDirect(n,null,i,x,f,null)}function v(t){const e=t<<0;let l=q[e];return void 0===l&&(l=new Ri({depthPacking:3201,morphTargets:t}),q[e]=l),l}function y(t){const e=t<<0;let l=o[e];return void 0===l&&(l=new Ci({morphTargets:t}),o[e]=l),l}function b(e,l,n,i,a,r,q){let o=null,m=v,h=e.customDepthMaterial;if(!0===i.isPointLight&&(m=y,h=e.customDistanceMaterial),void 0===h){let t=!1;!0===n.morphTargets&&(t=l.morphAttributes&&l.morphAttributes.position&&l.morphAttributes.position.length>0),o=m(t)}else o=h;if(t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){const t=o.uuid,e=n.uuid;let l=s[t];void 0===l&&(l={},s[t]=l);let i=l[e];void 0===i&&(i=o.clone(),l[e]=i),o=i}return o.visible=n.visible,o.wireframe=n.wireframe,o.side=3===q?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:c[n.side],o.clipShadows=n.clipShadows,o.clippingPlanes=n.clippingPlanes,o.clipIntersection=n.clipIntersection,o.wireframeLinewidth=n.wireframeLinewidth,o.linewidth=n.linewidth,!0===i.isPointLight&&!0===o.isMeshDistanceMaterial&&(o.referencePosition.setFromMatrixPosition(i.matrixWorld),o.nearDistance=a,o.farDistance=r),o}function M(l,i,a,r,q){if(!1===l.visible)return;if(l.layers.test(i.layers)&&(l.isMesh||l.isLine||l.isPoints)&&(l.castShadow||l.receiveShadow&&3===q)&&(!l.frustumCulled||n.intersectsObject(l))){l.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,l.matrixWorld);const n=e.update(l),i=l.material;if(Array.isArray(i)){const e=n.groups;for(let o=0,s=e.length;o<s;o++){const s=e[o],m=i[s.materialIndex];if(m&&m.visible){const e=b(l,n,m,r,a.near,a.far,q);t.renderBufferDirect(a,null,n,e,l,s)}}}else if(i.visible){const e=b(l,n,i,r,a.near,a.far,q);t.renderBufferDirect(a,null,n,e,l,null)}}const o=l.children;for(let t=0,e=o.length;t<e;t++)M(o[t],i,a,r,q)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,l,q){if(!1===_.enabled)return;if(!1===_.autoUpdate&&!1===_.needsUpdate)return;if(0===e.length)return;const o=t.getRenderTarget(),s=t.getActiveCubeFace(),c=t.getActiveMipmapLevel(),d=t.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let o=0,s=e.length;o<s;o++){const s=e[o],c=s.shadow;if(void 0===c){console.warn("THREE.WebGLShadowMap:",s,"has no shadow.");continue}if(!1===c.autoUpdate&&!1===c.needsUpdate)continue;i.copy(c.mapSize);const x=c.getFrameExtents();if(i.multiply(x),a.copy(c.mapSize),(i.x>h||i.y>h)&&(i.x>h&&(a.x=Math.floor(h/x.x),i.x=a.x*x.x,c.mapSize.x=a.x),i.y>h&&(a.y=Math.floor(h/x.y),i.y=a.y*x.y,c.mapSize.y=a.y)),null===c.map&&!c.isPointLightShadow&&3===this.type){const t={minFilter:u,magFilter:u,format:w};c.map=new it(i.x,i.y,t),c.map.texture.name=s.name+".shadowMap",c.mapPass=new it(i.x,i.y,t),c.camera.updateProjectionMatrix()}if(null===c.map){const t={minFilter:m,magFilter:m,format:w};c.map=new it(i.x,i.y,t),c.map.texture.name=s.name+".shadowMap",c.camera.updateProjectionMatrix()}t.setRenderTarget(c.map),t.clear();const p=c.getViewportCount();for(let t=0;t<p;t++){const e=c.getViewport(t);r.set(a.x*e.x,a.y*e.y,a.x*e.z,a.y*e.w),d.viewport(r),c.updateMatrices(s,t),n=c.getFrustum(),M(l,q,c.camera,s,this.type)}c.isPointLightShadow||3!==this.type||g(c,q),c.needsUpdate=!1}_.needsUpdate=!1,t.setRenderTarget(o,s,c)}}function Di(t,e,n){const i=n.isWebGL2;const a=new function(){let e=!1;const l=new nt;let n=null;const i=new nt(0,0,0,0);return{setMask:function(l){n===l||e||(t.colorMask(l,l,l,l),n=l)},setLocked:function(t){e=t},setClear:function(e,n,a,r,q){!0===q&&(e*=r,n*=r,a*=r),l.set(e,n,a,r),!1===i.equals(l)&&(t.clearColor(e,n,a,r),i.copy(l))},reset:function(){e=!1,n=null,i.set(-1,0,0,0)}}},r=new function(){let e=!1,l=null,n=null,i=null;return{setTest:function(t){t?O(2929):F(2929)},setMask:function(n){l===n||e||(t.depthMask(n),l=n)},setFunc:function(e){if(n!==e){if(e)switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);n=e}},setLocked:function(t){e=t},setClear:function(e){i!==e&&(t.clearDepth(e),i=e)},reset:function(){e=!1,l=null,n=null,i=null}}},q=new function(){let e=!1,l=null,n=null,i=null,a=null,r=null,q=null,o=null,s=null;return{setTest:function(t){e||(t?O(2960):F(2960))},setMask:function(n){l===n||e||(t.stencilMask(n),l=n)},setFunc:function(e,l,r){n===e&&i===l&&a===r||(t.stencilFunc(e,l,r),n=e,i=l,a=r)},setOp:function(e,l,n){r===e&&q===l&&o===n||(t.stencilOp(e,l,n),r=e,q=l,o=n)},setLocked:function(t){e=t},setClear:function(e){s!==e&&(t.clearStencil(e),s=e)},reset:function(){e=!1,l=null,n=null,i=null,a=null,r=null,q=null,o=null,s=null}}};let o={},s=null,m={},h=null,c=!1,u=null,d=null,x=null,p=null,f=null,_=null,g=null,v=!1,y=null,w=null,b=null,M=null,z=null;const S=t.getParameter(35661);let E=!1,T=0;const L=t.getParameter(7938);-1!==L.indexOf("WebGL")?(T=parseFloat(/^WebGL (\d)/.exec(L)[1]),E=T>=1):-1!==L.indexOf("OpenGL ES")&&(T=parseFloat(/^OpenGL ES (\d)/.exec(L)[1]),E=T>=2);let A=null,R={};const C=t.getParameter(3088),P=t.getParameter(2978),D=(new nt).fromArray(C),N=(new nt).fromArray(P);function I(e,l,n){const i=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<n;e++)t.texImage2D(l+e,0,6408,1,1,0,6408,5121,i);return a}const B={};function O(e){!0!==o[e]&&(t.enable(e),o[e]=!0)}function F(e){!1!==o[e]&&(t.disable(e),o[e]=!1)}B[3553]=I(3553,3553,1),B[34067]=I(34067,34069,6),a.setClear(0,0,0,1),r.setClear(1),q.setClear(0),O(2929),r.setFunc(3),V(!1),k(1),O(2884),G(0);const H={[l]:32774,101:32778,102:32779};if(i)H[103]=32775,H[104]=32776;else{const t=e.get("EXT_blend_minmax");null!==t&&(H[103]=t.MIN_EXT,H[104]=t.MAX_EXT)}const U={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function G(e,n,i,a,r,q,o,s){if(0!==e){if(!1===c&&(O(3042),c=!0),5===e)r=r||n,q=q||i,o=o||a,n===d&&r===f||(t.blendEquationSeparate(H[n],H[r]),d=n,f=r),i===x&&a===p&&q===_&&o===g||(t.blendFuncSeparate(U[i],U[a],U[q],U[o]),x=i,p=a,_=q,g=o),u=e,v=null;else if(e!==u||s!==v){if(d===l&&f===l||(t.blendEquation(32774),d=l,f=l),s)switch(e){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,0,769,771);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFunc(0,769);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}x=null,p=null,_=null,g=null,u=e,v=s}}else!0===c&&(F(3042),c=!1)}function V(e){y!==e&&(e?t.frontFace(2304):t.frontFace(2305),y=e)}function k(e){0!==e?(O(2884),e!==w&&(1===e?t.cullFace(1029):2===e?t.cullFace(1028):t.cullFace(1032))):F(2884),w=e}function W(e,l,n){e?(O(32823),M===l&&z===n||(t.polygonOffset(l,n),M=l,z=n)):F(32823)}function j(e){void 0===e&&(e=33984+S-1),A!==e&&(t.activeTexture(e),A=e)}return{buffers:{color:a,depth:r,stencil:q},enable:O,disable:F,bindFramebuffer:function(e,l){return null===l&&null!==s&&(l=s),m[e]!==l&&(t.bindFramebuffer(e,l),m[e]=l,i&&(36009===e&&(m[36160]=l),36160===e&&(m[36009]=l)),!0)},bindXRFramebuffer:function(e){e!==s&&(t.bindFramebuffer(36160,e),s=e)},useProgram:function(e){return h!==e&&(t.useProgram(e),h=e,!0)},setBlending:G,setMaterial:function(t,e){2===t.side?F(2884):O(2884);let l=1===t.side;e&&(l=!l),V(l),1===t.blending&&!1===t.transparent?G(0):G(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),r.setFunc(t.depthFunc),r.setTest(t.depthTest),r.setMask(t.depthWrite),a.setMask(t.colorWrite);const n=t.stencilWrite;q.setTest(n),n&&(q.setMask(t.stencilWriteMask),q.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),q.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),W(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?O(32926):F(32926)},setFlipSided:V,setCullFace:k,setLineWidth:function(e){e!==b&&(E&&t.lineWidth(e),b=e)},setPolygonOffset:W,setScissorTest:function(t){t?O(3089):F(3089)},activeTexture:j,bindTexture:function(e,l){null===A&&j();let n=R[A];void 0===n&&(n={type:void 0,texture:void 0},R[A]=n),n.type===e&&n.texture===l||(t.bindTexture(e,l||B[e]),n.type=e,n.texture=l)},unbindTexture:function(){const e=R[A];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===D.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),D.copy(e))},viewport:function(e){!1===N.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),N.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===i&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),o={},A=null,R={},s=null,m={},h=null,c=!1,u=null,d=null,x=null,p=null,f=null,_=null,g=null,v=!1,y=null,w=null,b=null,M=null,z=null,D.set(0,0,t.canvas.width,t.canvas.height),N.set(0,0,t.canvas.width,t.canvas.height),a.reset(),r.reset(),q.reset()}}}function Ni(t,e,l,n,i,a,r){const x=i.isWebGL2,z=i.maxTextures,S=i.maxCubemapSize,E=i.maxTextureSize,T=i.maxSamples,L=new WeakMap;let A,R=!1;try{R="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function C(t,e){return R?new OffscreenCanvas(t,e):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function P(t,e,l,n){let i=1;if((t.width>n||t.height>n)&&(i=n/Math.max(t.width,t.height)),i<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const n=e?Z:Math.floor,a=n(i*t.width),r=n(i*t.height);void 0===A&&(A=C(a,r));const q=l?C(a,r):A;q.width=a,q.height=r;return q.getContext("2d").drawImage(t,0,0,a,r),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+a+"x"+r+")."),q}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function D(t){return Y(t.width)&&Y(t.height)}function N(t,e){return t.generateMipmaps&&e&&t.minFilter!==m&&t.minFilter!==u}function I(e,l,i,a){t.generateMipmap(e);n.get(l).__maxMipLevel=Math.log2(Math.max(i,a))}function B(l,n,i){if(!1===x)return n;if(null!==l){if(void 0!==t[l])return t[l];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+l+"'")}let a=n;return 6403===n&&(5126===i&&(a=33326),5131===i&&(a=33325),5121===i&&(a=33321)),6407===n&&(5126===i&&(a=34837),5131===i&&(a=34843),5121===i&&(a=32849)),6408===n&&(5126===i&&(a=34836),5131===i&&(a=34842),5121===i&&(a=32856)),33325!==a&&33326!==a&&34842!==a&&34836!==a||e.get("EXT_color_buffer_float"),a}function O(t){return t===m||t===h||t===c?9728:9729}function F(e){const l=e.target;l.removeEventListener("dispose",F),function(e){const l=n.get(e);if(void 0===l.__webglInit)return;t.deleteTexture(l.__webglTexture),n.remove(e)}(l),l.isVideoTexture&&L.delete(l),r.memory.textures--}function H(e){const l=e.target;l.removeEventListener("dispose",H),function(e){const l=e.texture,i=n.get(e),a=n.get(l);if(!e)return;void 0!==a.__webglTexture&&(t.deleteTexture(a.__webglTexture),r.memory.textures--);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(i.__webglFramebuffer[e]),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer[e]);else t.deleteFramebuffer(i.__webglFramebuffer),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer),i.__webglMultisampledFramebuffer&&t.deleteFramebuffer(i.__webglMultisampledFramebuffer),i.__webglColorRenderbuffer&&t.deleteRenderbuffer(i.__webglColorRenderbuffer),i.__webglDepthRenderbuffer&&t.deleteRenderbuffer(i.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,i=l.length;e<i;e++){const i=n.get(l[e]);i.__webglTexture&&(t.deleteTexture(i.__webglTexture),r.memory.textures--),n.remove(l[e])}n.remove(l),n.remove(e)}(l)}let U=0;function G(t,e){const i=n.get(t);if(t.isVideoTexture&&function(t){const e=r.render.frame;L.get(t)!==e&&(L.set(t,e),t.update())}(t),t.version>0&&i.__version!==t.version){const l=t.image;if(void 0===l)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==l.complete)return void J(i,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}l.activeTexture(33984+e),l.bindTexture(3553,i.__webglTexture)}function V(e,i){const r=n.get(e);e.version>0&&r.__version!==e.version?function(e,n,i){if(6!==n.image.length)return;X(e,n),l.activeTexture(33984+i),l.bindTexture(34067,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment),t.pixelStorei(37443,0);const r=n&&(n.isCompressedTexture||n.image[0].isCompressedTexture),q=n.image[0]&&n.image[0].isDataTexture,o=[];for(let t=0;t<6;t++)o[t]=r||q?q?n.image[t].image:n.image[t]:P(n.image[t],!1,!0,S);const s=o[0],m=D(s)||x,h=a.convert(n.format),c=a.convert(n.type),u=B(n.internalFormat,h,c);let d;if(j(34067,n,m),r){for(let t=0;t<6;t++){d=o[t].mipmaps;for(let e=0;e<d.length;e++){const i=d[e];n.format!==w&&n.format!==y?null!==h?l.compressedTexImage2D(34069+t,e,u,i.width,i.height,0,i.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):l.texImage2D(34069+t,e,u,i.width,i.height,0,h,c,i.data)}}e.__maxMipLevel=d.length-1}else{d=n.mipmaps;for(let t=0;t<6;t++)if(q){l.texImage2D(34069+t,0,u,o[t].width,o[t].height,0,h,c,o[t].data);for(let e=0;e<d.length;e++){const n=d[e].image[t].image;l.texImage2D(34069+t,e+1,u,n.width,n.height,0,h,c,n.data)}}else{l.texImage2D(34069+t,0,u,h,c,o[t]);for(let e=0;e<d.length;e++){const n=d[e];l.texImage2D(34069+t,e+1,u,h,c,n.image[t])}}e.__maxMipLevel=d.length}N(n,m)&&I(34067,n,s.width,s.height);e.__version=n.version,n.onUpdate&&n.onUpdate(n)}(r,e,i):(l.activeTexture(33984+i),l.bindTexture(34067,r.__webglTexture))}const k={[q]:10497,[o]:33071,[s]:33648},W={[m]:9728,[h]:9984,[c]:9986,[u]:9729,1007:9985,[d]:9987};function j(l,a,r){if(r?(t.texParameteri(l,10242,k[a.wrapS]),t.texParameteri(l,10243,k[a.wrapT]),32879!==l&&35866!==l||t.texParameteri(l,32882,k[a.wrapR]),t.texParameteri(l,10240,W[a.magFilter]),t.texParameteri(l,10241,W[a.minFilter])):(t.texParameteri(l,10242,33071),t.texParameteri(l,10243,33071),32879!==l&&35866!==l||t.texParameteri(l,32882,33071),a.wrapS===o&&a.wrapT===o||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(l,10240,O(a.magFilter)),t.texParameteri(l,10241,O(a.minFilter)),a.minFilter!==m&&a.minFilter!==u&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const r=e.get("EXT_texture_filter_anisotropic");if(a.type===_&&!1===e.has("OES_texture_float_linear"))return;if(!1===x&&a.type===g&&!1===e.has("OES_texture_half_float_linear"))return;(a.anisotropy>1||n.get(a).__currentAnisotropy)&&(t.texParameterf(l,r.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy())),n.get(a).__currentAnisotropy=a.anisotropy)}}function X(e,l){void 0===e.__webglInit&&(e.__webglInit=!0,l.addEventListener("dispose",F),e.__webglTexture=t.createTexture(),r.memory.textures++)}function J(e,n,i){let r=3553;n.isDataTexture2DArray&&(r=35866),n.isDataTexture3D&&(r=32879),X(e,n),l.activeTexture(33984+i),l.bindTexture(r,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment),t.pixelStorei(37443,0);const q=function(t){return!x&&(t.wrapS!==o||t.wrapT!==o||t.minFilter!==m&&t.minFilter!==u)}(n)&&!1===D(n.image),s=P(n.image,q,!1,E),h=D(s)||x,c=a.convert(n.format);let d,g=a.convert(n.type),z=B(n.internalFormat,c,g);j(r,n,h);const S=n.mipmaps;if(n.isDepthTexture)z=6402,x?z=n.type===_?36012:n.type===f?33190:n.type===v?35056:33189:n.type===_&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),n.format===b&&6402===z&&n.type!==p&&n.type!==f&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=p,g=a.convert(n.type)),n.format===M&&6402===z&&(z=34041,n.type!==v&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=v,g=a.convert(n.type))),l.texImage2D(3553,0,z,s.width,s.height,0,c,g,null);else if(n.isDataTexture)if(S.length>0&&h){for(let t=0,e=S.length;t<e;t++)d=S[t],l.texImage2D(3553,t,z,d.width,d.height,0,c,g,d.data);n.generateMipmaps=!1,e.__maxMipLevel=S.length-1}else l.texImage2D(3553,0,z,s.width,s.height,0,c,g,s.data),e.__maxMipLevel=0;else if(n.isCompressedTexture){for(let t=0,e=S.length;t<e;t++)d=S[t],n.format!==w&&n.format!==y?null!==c?l.compressedTexImage2D(3553,t,z,d.width,d.height,0,d.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):l.texImage2D(3553,t,z,d.width,d.height,0,c,g,d.data);e.__maxMipLevel=S.length-1}else if(n.isDataTexture2DArray)l.texImage3D(35866,0,z,s.width,s.height,s.depth,0,c,g,s.data),e.__maxMipLevel=0;else if(n.isDataTexture3D)l.texImage3D(32879,0,z,s.width,s.height,s.depth,0,c,g,s.data),e.__maxMipLevel=0;else if(S.length>0&&h){for(let t=0,e=S.length;t<e;t++)d=S[t],l.texImage2D(3553,t,z,c,g,d);n.generateMipmaps=!1,e.__maxMipLevel=S.length-1}else l.texImage2D(3553,0,z,c,g,s),e.__maxMipLevel=0;N(n,h)&&I(r,n,s.width,s.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}function Q(e,i,r,q,o){const s=a.convert(r.format),m=a.convert(r.type),h=B(r.internalFormat,s,m);32879===o||35866===o?l.texImage3D(o,0,h,i.width,i.height,i.depth,0,s,m,null):l.texImage2D(o,0,h,i.width,i.height,0,s,m,null),l.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,q,o,n.get(r).__webglTexture,0),l.bindFramebuffer(36160,null)}function K(e,l,n){if(t.bindRenderbuffer(36161,e),l.depthBuffer&&!l.stencilBuffer){let i=33189;if(n){const e=l.depthTexture;e&&e.isDepthTexture&&(e.type===_?i=36012:e.type===f&&(i=33190));const n=tt(l);t.renderbufferStorageMultisample(36161,n,i,l.width,l.height)}else t.renderbufferStorage(36161,i,l.width,l.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(l.depthBuffer&&l.stencilBuffer){if(n){const e=tt(l);t.renderbufferStorageMultisample(36161,e,35056,l.width,l.height)}else t.renderbufferStorage(36161,34041,l.width,l.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===l.isWebGLMultipleRenderTargets?l.texture[0]:l.texture,i=a.convert(e.format),r=a.convert(e.type),q=B(e.internalFormat,i,r);if(n){const e=tt(l);t.renderbufferStorageMultisample(36161,e,q,l.width,l.height)}else t.renderbufferStorage(36161,q,l.width,l.height)}t.bindRenderbuffer(36161,null)}function $(e){const i=n.get(e),a=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(a)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,i){if(i&&i.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(l.bindFramebuffer(36160,e),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),G(i.depthTexture,0);const a=n.get(i.depthTexture).__webglTexture;if(i.depthTexture.format===b)t.framebufferTexture2D(36160,36096,3553,a,0);else{if(i.depthTexture.format!==M)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,a,0)}}(i.__webglFramebuffer,e)}else if(a){i.__webglDepthbuffer=[];for(let n=0;n<6;n++)l.bindFramebuffer(36160,i.__webglFramebuffer[n]),i.__webglDepthbuffer[n]=t.createRenderbuffer(),K(i.__webglDepthbuffer[n],e,!1)}else l.bindFramebuffer(36160,i.__webglFramebuffer),i.__webglDepthbuffer=t.createRenderbuffer(),K(i.__webglDepthbuffer,e,!1);l.bindFramebuffer(36160,null)}function tt(t){return x&&t.isWebGLMultisampleRenderTarget?Math.min(T,t.samples):0}let et=!1,lt=!1;this.allocateTextureUnit=function(){const t=U;return t>=z&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+z),U+=1,t},this.resetTextureUnits=function(){U=0},this.setTexture2D=G,this.setTexture2DArray=function(t,e){const i=n.get(t);t.version>0&&i.__version!==t.version?J(i,t,e):(l.activeTexture(33984+e),l.bindTexture(35866,i.__webglTexture))},this.setTexture3D=function(t,e){const i=n.get(t);t.version>0&&i.__version!==t.version?J(i,t,e):(l.activeTexture(33984+e),l.bindTexture(32879,i.__webglTexture))},this.setTextureCube=V,this.setupRenderTarget=function(e){const q=e.texture,o=n.get(e),s=n.get(q);e.addEventListener("dispose",H),!0!==e.isWebGLMultipleRenderTargets&&(s.__webglTexture=t.createTexture(),s.__version=q.version,r.memory.textures++);const m=!0===e.isWebGLCubeRenderTarget,h=!0===e.isWebGLMultipleRenderTargets,c=!0===e.isWebGLMultisampleRenderTarget,u=q.isDataTexture3D||q.isDataTexture2DArray,d=D(e)||x;if(!x||q.format!==y||q.type!==_&&q.type!==g||(q.format=w,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),m){o.__webglFramebuffer=[];for(let e=0;e<6;e++)o.__webglFramebuffer[e]=t.createFramebuffer()}else if(o.__webglFramebuffer=t.createFramebuffer(),h)if(i.drawBuffers){const l=e.texture;for(let e=0,i=l.length;e<i;e++){const i=n.get(l[e]);void 0===i.__webglTexture&&(i.__webglTexture=t.createTexture(),r.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(c)if(x){o.__webglMultisampledFramebuffer=t.createFramebuffer(),o.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,o.__webglColorRenderbuffer);const n=a.convert(q.format),i=a.convert(q.type),r=B(q.internalFormat,n,i),s=tt(e);t.renderbufferStorageMultisample(36161,s,r,e.width,e.height),l.bindFramebuffer(36160,o.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,o.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(o.__webglDepthRenderbuffer=t.createRenderbuffer(),K(o.__webglDepthRenderbuffer,e,!0)),l.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(m){l.bindTexture(34067,s.__webglTexture),j(34067,q,d);for(let t=0;t<6;t++)Q(o.__webglFramebuffer[t],e,q,36064,34069+t);N(q,d)&&I(34067,q,e.width,e.height),l.bindTexture(34067,null)}else if(h){const t=e.texture;for(let i=0,a=t.length;i<a;i++){const a=t[i],r=n.get(a);l.bindTexture(3553,r.__webglTexture),j(3553,a,d),Q(o.__webglFramebuffer,e,a,36064+i,3553),N(a,d)&&I(3553,a,e.width,e.height)}l.bindTexture(3553,null)}else{let t=3553;if(u)if(x){t=q.isDataTexture3D?32879:35866}else console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");l.bindTexture(t,s.__webglTexture),j(t,q,d),Q(o.__webglFramebuffer,e,q,36064,t),N(q,d)&&I(3553,q,e.width,e.height),l.bindTexture(3553,null)}e.depthBuffer&&$(e)},this.updateRenderTargetMipmap=function(t){const e=D(t)||x,i=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let a=0,r=i.length;a<r;a++){const r=i[a];if(N(r,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,i=n.get(r).__webglTexture;l.bindTexture(e,i),I(e,r,t.width,t.height),l.bindTexture(e,null)}}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(x){const i=e.width,a=e.height;let r=16384;e.depthBuffer&&(r|=256),e.stencilBuffer&&(r|=1024);const q=n.get(e);l.bindFramebuffer(36008,q.__webglMultisampledFramebuffer),l.bindFramebuffer(36009,q.__webglFramebuffer),t.blitFramebuffer(0,0,i,a,0,0,i,a,r,9728),l.bindFramebuffer(36008,null),l.bindFramebuffer(36009,q.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===et&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),et=!0),t=t.texture),G(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===lt&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),lt=!0),t=t.texture),V(t,e)}}function Ii(t,e,l){const n=l.isWebGL2;return{convert:function(t){let l;if(t===x)return 5121;if(1017===t)return 32819;if(1018===t)return 32820;if(1019===t)return 33635;if(1010===t)return 5120;if(1011===t)return 5122;if(t===p)return 5123;if(1013===t)return 5124;if(t===f)return 5125;if(t===_)return 5126;if(t===g)return n?5131:(l=e.get("OES_texture_half_float"),null!==l?l.HALF_FLOAT_OES:null);if(1021===t)return 6406;if(t===y)return 6407;if(t===w)return 6408;if(1024===t)return 6409;if(1025===t)return 6410;if(t===b)return 6402;if(t===M)return 34041;if(1028===t)return 6403;if(1029===t)return 36244;if(1030===t)return 33319;if(1031===t)return 33320;if(1032===t)return 36248;if(1033===t)return 36249;if(33776===t||33777===t||33778===t||33779===t){if(l=e.get("WEBGL_compressed_texture_s3tc"),null===l)return null;if(33776===t)return l.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===t)return l.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===t)return l.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===t)return l.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===t||35841===t||35842===t||35843===t){if(l=e.get("WEBGL_compressed_texture_pvrtc"),null===l)return null;if(35840===t)return l.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===t)return l.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===t)return l.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===t)return l.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===t)return l=e.get("WEBGL_compressed_texture_etc1"),null!==l?l.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===t||37496===t)&&(l=e.get("WEBGL_compressed_texture_etc"),null!==l)){if(37492===t)return l.COMPRESSED_RGB8_ETC2;if(37496===t)return l.COMPRESSED_RGBA8_ETC2_EAC}return 37808===t||37809===t||37810===t||37811===t||37812===t||37813===t||37814===t||37815===t||37816===t||37817===t||37818===t||37819===t||37820===t||37821===t||37840===t||37841===t||37842===t||37843===t||37844===t||37845===t||37846===t||37847===t||37848===t||37849===t||37850===t||37851===t||37852===t||37853===t?(l=e.get("WEBGL_compressed_texture_astc"),null!==l?t:null):36492===t?(l=e.get("EXT_texture_compression_bptc"),null!==l?t:null):t===v?n?34042:(l=e.get("WEBGL_depth_texture"),null!==l?l.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}class Bi extends vl{constructor(t=[]){super(),this.cameras=t}}Bi.prototype.isArrayCamera=!0;class Oi extends oe{constructor(){super(),this.type="Group"}}Oi.prototype.isGroup=!0;const Fi={type:"move"};class Hi{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Oi,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Oi,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new rt,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new rt),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Oi,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new rt,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new rt),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,l){let n=null,i=null,a=null;const r=this._targetRay,q=this._grip,o=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState)if(null!==r&&(n=e.getPose(t.targetRaySpace,l),null!==n&&(r.matrix.fromArray(n.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),n.linearVelocity?(r.hasLinearVelocity=!0,r.linearVelocity.copy(n.linearVelocity)):r.hasLinearVelocity=!1,n.angularVelocity?(r.hasAngularVelocity=!0,r.angularVelocity.copy(n.angularVelocity)):r.hasAngularVelocity=!1,this.dispatchEvent(Fi))),o&&t.hand){a=!0;for(const n of t.hand.values()){const t=e.getJointPose(n,l);if(void 0===o.joints[n.jointName]){const t=new Oi;t.matrixAutoUpdate=!1,t.visible=!1,o.joints[n.jointName]=t,o.add(t)}const i=o.joints[n.jointName];null!==t&&(i.matrix.fromArray(t.transform.matrix),i.matrix.decompose(i.position,i.rotation,i.scale),i.jointRadius=t.radius),i.visible=null!==t}const n=o.joints["index-finger-tip"],i=o.joints["thumb-tip"],r=n.position.distanceTo(i.position),q=.02,s=.005;o.inputState.pinching&&r>q+s?(o.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!o.inputState.pinching&&r<=q-s&&(o.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==q&&t.gripSpace&&(i=e.getPose(t.gripSpace,l),null!==i&&(q.matrix.fromArray(i.transform.matrix),q.matrix.decompose(q.position,q.rotation,q.scale),i.linearVelocity?(q.hasLinearVelocity=!0,q.linearVelocity.copy(i.linearVelocity)):q.hasLinearVelocity=!1,i.angularVelocity?(q.hasAngularVelocity=!0,q.angularVelocity.copy(i.angularVelocity)):q.hasAngularVelocity=!1));return null!==r&&(r.visible=null!==n),null!==q&&(q.visible=null!==i),null!==o&&(o.visible=null!==a),this}}class Ui extends H{constructor(t,e){super();const l=this,n=t.state;let i=null,a=1,r=null,q="local-floor",o=null;const s=[],m=new Map,h=new vl;h.layers.enable(1),h.viewport=new nt;const c=new vl;c.layers.enable(2),c.viewport=new nt;const u=[h,c],d=new Bi;d.layers.enable(1),d.layers.enable(2);let x=null,p=null;function f(t){const e=m.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function _(){m.forEach((function(t,e){t.disconnect(e)})),m.clear(),x=null,p=null,n.bindXRFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),M.stop(),l.isPresenting=!1,l.dispatchEvent({type:"sessionend"})}function g(t){const e=i.inputSources;for(let t=0;t<s.length;t++)m.set(e[t],s[t]);for(let e=0;e<t.removed.length;e++){const l=t.removed[e],n=m.get(l);n&&(n.dispatchEvent({type:"disconnected",data:l}),m.delete(l))}for(let e=0;e<t.added.length;e++){const l=t.added[e],n=m.get(l);n&&n.dispatchEvent({type:"connected",data:l})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=s[t];return void 0===e&&(e=new Hi,s[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=s[t];return void 0===e&&(e=new Hi,s[t]=e),e.getGripSpace()},this.getHand=function(t){let e=s[t];return void 0===e&&(e=new Hi,s[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){a=t,!0===l.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){q=t,!0===l.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return r},this.getSession=function(){return i},this.setSession=async function(t){if(i=t,null!==i){i.addEventListener("select",f),i.addEventListener("selectstart",f),i.addEventListener("selectend",f),i.addEventListener("squeeze",f),i.addEventListener("squeezestart",f),i.addEventListener("squeezeend",f),i.addEventListener("end",_),i.addEventListener("inputsourceschange",g);const t=e.getContextAttributes();!0!==t.xrCompatible&&await e.makeXRCompatible();const n={antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:a},o=new XRWebGLLayer(i,e,n);i.updateRenderState({baseLayer:o}),r=await i.requestReferenceSpace(q),M.setContext(i),M.start(),l.isPresenting=!0,l.dispatchEvent({type:"sessionstart"})}};const v=new rt,y=new rt;function w(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;d.near=c.near=h.near=t.near,d.far=c.far=h.far=t.far,x===d.near&&p===d.far||(i.updateRenderState({depthNear:d.near,depthFar:d.far}),x=d.near,p=d.far);const e=t.parent,l=d.cameras;w(d,e);for(let t=0;t<l.length;t++)w(l[t],e);t.matrixWorld.copy(d.matrixWorld),t.matrix.copy(d.matrix),t.matrix.decompose(t.position,t.quaternion,t.scale);const n=t.children;for(let t=0,e=n.length;t<e;t++)n[t].updateMatrixWorld(!0);2===l.length?function(t,e,l){v.setFromMatrixPosition(e.matrixWorld),y.setFromMatrixPosition(l.matrixWorld);const n=v.distanceTo(y),i=e.projectionMatrix.elements,a=l.projectionMatrix.elements,r=i[14]/(i[10]-1),q=i[14]/(i[10]+1),o=(i[9]+1)/i[5],s=(i[9]-1)/i[5],m=(i[8]-1)/i[0],h=(a[8]+1)/a[0],c=r*m,u=r*h,d=n/(-m+h),x=d*-m;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(x),t.translateZ(d),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const p=r+d,f=q+d,_=c-x,g=u+(n-x),w=o*q/f*p,b=s*q/f*p;t.projectionMatrix.makePerspective(_,g,w,b,p,f)}(d,h,c):d.projectionMatrix.copy(h.projectionMatrix)},this.getCamera=function(){return d};let b=null;const M=new Tl;M.setAnimationLoop((function(t,e){if(o=e.getViewerPose(r),null!==o){const t=o.views,e=i.renderState.baseLayer;n.bindXRFramebuffer(e.framebuffer);let l=!1;t.length!==d.cameras.length&&(d.cameras.length=0,l=!0);for(let n=0;n<t.length;n++){const i=t[n],a=e.getViewport(i),r=u[n];r.matrix.fromArray(i.transform.matrix),r.projectionMatrix.fromArray(i.projectionMatrix),r.viewport.set(a.x,a.y,a.width,a.height),0===n&&d.matrix.copy(r.matrix),!0===l&&d.cameras.push(r)}}const l=i.inputSources;for(let t=0;t<s.length;t++){const n=s[t],i=l[t];n.update(i,e,r)}b&&b(t,e)})),this.setAnimationLoop=function(t){b=t},this.dispose=function(){}}}function Gi(t){function e(e,l){e.opacity.value=l.opacity,l.color&&e.diffuse.value.copy(l.color),l.emissive&&e.emissive.value.copy(l.emissive).multiplyScalar(l.emissiveIntensity),l.map&&(e.map.value=l.map),l.alphaMap&&(e.alphaMap.value=l.alphaMap),l.specularMap&&(e.specularMap.value=l.specularMap);const n=t.get(l).envMap;if(n){e.envMap.value=n,e.flipEnvMap.value=n.isCubeTexture&&n._needsFlipEnvMap?-1:1,e.reflectivity.value=l.reflectivity,e.refractionRatio.value=l.refractionRatio;const i=t.get(n).__maxMipLevel;void 0!==i&&(e.maxMipLevel.value=i)}let i,a;l.lightMap&&(e.lightMap.value=l.lightMap,e.lightMapIntensity.value=l.lightMapIntensity),l.aoMap&&(e.aoMap.value=l.aoMap,e.aoMapIntensity.value=l.aoMapIntensity),l.map?i=l.map:l.specularMap?i=l.specularMap:l.displacementMap?i=l.displacementMap:l.normalMap?i=l.normalMap:l.bumpMap?i=l.bumpMap:l.roughnessMap?i=l.roughnessMap:l.metalnessMap?i=l.metalnessMap:l.alphaMap?i=l.alphaMap:l.emissiveMap?i=l.emissiveMap:l.clearcoatMap?i=l.clearcoatMap:l.clearcoatNormalMap?i=l.clearcoatNormalMap:l.clearcoatRoughnessMap&&(i=l.clearcoatRoughnessMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),e.uvTransform.value.copy(i.matrix)),l.aoMap?a=l.aoMap:l.lightMap&&(a=l.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),e.uv2Transform.value.copy(a.matrix))}function l(e,l){e.roughness.value=l.roughness,e.metalness.value=l.metalness,l.roughnessMap&&(e.roughnessMap.value=l.roughnessMap),l.metalnessMap&&(e.metalnessMap.value=l.metalnessMap),l.emissiveMap&&(e.emissiveMap.value=l.emissiveMap),l.bumpMap&&(e.bumpMap.value=l.bumpMap,e.bumpScale.value=l.bumpScale,1===l.side&&(e.bumpScale.value*=-1)),l.normalMap&&(e.normalMap.value=l.normalMap,e.normalScale.value.copy(l.normalScale),1===l.side&&e.normalScale.value.negate()),l.displacementMap&&(e.displacementMap.value=l.displacementMap,e.displacementScale.value=l.displacementScale,e.displacementBias.value=l.displacementBias);t.get(l).envMap&&(e.envMapIntensity.value=l.envMapIntensity)}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,n,i,a,r){n.isMeshBasicMaterial?e(t,n):n.isMeshLambertMaterial?(e(t,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(t,n)):n.isMeshToonMaterial?(e(t,n),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap);e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshPhongMaterial?(e(t,n),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshStandardMaterial?(e(t,n),n.isMeshPhysicalMaterial?function(t,e,n){l(t,e),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen);e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap);e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap);e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate());t.transmission.value=e.transmission,e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap);e.transmission>0&&(t.transmissionSamplerMap.value=n.texture,t.transmissionSamplerSize.value.set(n.width,n.height));t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap);t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)}(t,n,r):l(t,n)):n.isMeshMatcapMaterial?(e(t,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshDepthMaterial?(e(t,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshDistanceMaterial?(e(t,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,n)):n.isMeshNormalMaterial?(e(t,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,n)):n.isPointsMaterial?function(t,e,l,n){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*l,t.scale.value=.5*n,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);let i;e.map?i=e.map:e.alphaMap&&(i=e.alphaMap);void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}(t,n,i,a):n.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);let l;e.map?l=e.map:e.alphaMap&&(l=e.alphaMap);void 0!==l&&(!0===l.matrixAutoUpdate&&l.updateMatrix(),t.uvTransform.value.copy(l.matrix))}(t,n):n.isShadowMaterial?(t.color.value.copy(n.color),t.opacity.value=n.opacity):n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)}}}function Vi(t){const e=void 0!==(t=t||{}).canvas?t.canvas:function(){const t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return t.style.display="block",t}(),l=void 0!==t.context?t.context:null,n=void 0!==t.alpha&&t.alpha,i=void 0===t.depth||t.depth,a=void 0===t.stencil||t.stencil,r=void 0!==t.antialias&&t.antialias,q=void 0===t.premultipliedAlpha||t.premultipliedAlpha,s=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,h=void 0!==t.powerPreference?t.powerPreference:"default",c=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let u=null,p=null;const f=[],v=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=C,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const y=this;let b=!1,M=0,z=0,S=null,E=-1,T=null;const L=new nt,A=new nt;let R=null,P=e.width,D=e.height,N=1,I=null,B=null;const O=new nt(0,0,P,D),F=new nt(0,0,P,D);let H=!1;const U=[],G=new El;let V=!1,k=!1,W=null;const j=new Bt,X=new rt,Y={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function Z(){return null===S?N:1}let Q,K,$,tt,et,lt,at,qt,ot,st,mt,ht,ct,ut,dt,xt,pt,ft,_t,gt,vt,yt,wt=l;function bt(t,l){for(let n=0;n<t.length;n++){const i=t[n],a=e.getContext(i,l);if(null!==a)return a}return null}try{const t={alpha:n,depth:i,stencil:a,antialias:r,premultipliedAlpha:q,preserveDrawingBuffer:s,powerPreference:h,failIfMajorPerformanceCaveat:c};if(e.addEventListener("webglcontextlost",St,!1),e.addEventListener("webglcontextrestored",Et,!1),null===wt){const e=["webgl2","webgl","experimental-webgl"];if(!0===y.isWebGL1Renderer&&e.shift(),wt=bt(e,t),null===wt)throw bt(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===wt.getShaderPrecisionFormat&&(wt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function Mt(){Q=new Hl(wt),K=new Bl(wt,Q,t),Q.init(K),vt=new Ii(wt,Q,K),$=new Di(wt,Q,K),U[0]=1029,tt=new Vl(wt),et=new vi,lt=new Ni(wt,Q,$,et,K,vt,tt),at=new Fl(y),qt=new Ll(wt,K),yt=new Nl(wt,Q,qt,K),ot=new Ul(wt,qt,tt,yt),st=new Xl(wt,ot,qt,tt),ft=new jl(wt),dt=new Ol(et),mt=new gi(y,at,Q,K,yt,dt),ht=new Gi(et),ct=new Mi(et),ut=new Ai(Q,K),pt=new Dl(y,at,$,st,q),xt=new Pi(y,st,K),_t=new Il(wt,Q,tt,K),gt=new Gl(wt,Q,tt,K),tt.programs=mt.programs,y.capabilities=K,y.extensions=Q,y.properties=et,y.renderLists=ct,y.shadowMap=xt,y.state=$,y.info=tt}Mt();const zt=new Ui(y,wt);function St(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),b=!0}function Et(){console.log("THREE.WebGLRenderer: Context Restored."),b=!1;const t=tt.autoReset,e=xt.enabled,l=xt.autoUpdate,n=xt.needsUpdate,i=xt.type;Mt(),tt.autoReset=t,xt.enabled=e,xt.autoUpdate=l,xt.needsUpdate=n,xt.type=i}function Tt(t){const e=t.target;e.removeEventListener("dispose",Tt),function(t){(function(t){const e=et.get(t).programs;void 0!==e&&e.forEach((function(t){mt.releaseProgram(t)}))})(t),et.remove(t)}(e)}this.xr=zt,this.getContext=function(){return wt},this.getContextAttributes=function(){return wt.getContextAttributes()},this.forceContextLoss=function(){const t=Q.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=Q.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return N},this.setPixelRatio=function(t){void 0!==t&&(N=t,this.setSize(P,D,!1))},this.getSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),t=new J),t.set(P,D)},this.setSize=function(t,l,n){zt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(P=t,D=l,e.width=Math.floor(t*N),e.height=Math.floor(l*N),!1!==n&&(e.style.width=t+"px",e.style.height=l+"px"),this.setViewport(0,0,t,l))},this.getDrawingBufferSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),t=new J),t.set(P*N,D*N).floor()},this.setDrawingBufferSize=function(t,l,n){P=t,D=l,N=n,e.width=Math.floor(t*n),e.height=Math.floor(l*n),this.setViewport(0,0,t,l)},this.getCurrentViewport=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),t=new nt),t.copy(L)},this.getViewport=function(t){return t.copy(O)},this.setViewport=function(t,e,l,n){t.isVector4?O.set(t.x,t.y,t.z,t.w):O.set(t,e,l,n),$.viewport(L.copy(O).multiplyScalar(N).floor())},this.getScissor=function(t){return t.copy(F)},this.setScissor=function(t,e,l,n){t.isVector4?F.set(t.x,t.y,t.z,t.w):F.set(t,e,l,n),$.scissor(A.copy(F).multiplyScalar(N).floor())},this.getScissorTest=function(){return H},this.setScissorTest=function(t){$.setScissorTest(H=t)},this.setOpaqueSort=function(t){I=t},this.setTransparentSort=function(t){B=t},this.getClearColor=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument"),t=new Ce),t.copy(pt.getClearColor())},this.setClearColor=function(){pt.setClearColor.apply(pt,arguments)},this.getClearAlpha=function(){return pt.getClearAlpha()},this.setClearAlpha=function(){pt.setClearAlpha.apply(pt,arguments)},this.clear=function(t,e,l){let n=0;(void 0===t||t)&&(n|=16384),(void 0===e||e)&&(n|=256),(void 0===l||l)&&(n|=1024),wt.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",St,!1),e.removeEventListener("webglcontextrestored",Et,!1),ct.dispose(),ut.dispose(),et.dispose(),at.dispose(),st.dispose(),yt.dispose(),zt.dispose(),zt.removeEventListener("sessionstart",At),zt.removeEventListener("sessionend",Rt),W&&(W.dispose(),W=null),Ct.stop()},this.renderBufferImmediate=function(t,e){yt.initAttributes();const l=et.get(t);t.hasPositions&&!l.position&&(l.position=wt.createBuffer()),t.hasNormals&&!l.normal&&(l.normal=wt.createBuffer()),t.hasUvs&&!l.uv&&(l.uv=wt.createBuffer()),t.hasColors&&!l.color&&(l.color=wt.createBuffer());const n=e.getAttributes();t.hasPositions&&(wt.bindBuffer(34962,l.position),wt.bufferData(34962,t.positionArray,35048),yt.enableAttribute(n.position),wt.vertexAttribPointer(n.position,3,5126,!1,0,0)),t.hasNormals&&(wt.bindBuffer(34962,l.normal),wt.bufferData(34962,t.normalArray,35048),yt.enableAttribute(n.normal),wt.vertexAttribPointer(n.normal,3,5126,!1,0,0)),t.hasUvs&&(wt.bindBuffer(34962,l.uv),wt.bufferData(34962,t.uvArray,35048),yt.enableAttribute(n.uv),wt.vertexAttribPointer(n.uv,2,5126,!1,0,0)),t.hasColors&&(wt.bindBuffer(34962,l.color),wt.bufferData(34962,t.colorArray,35048),yt.enableAttribute(n.color),wt.vertexAttribPointer(n.color,3,5126,!1,0,0)),yt.disableUnusedAttributes(),wt.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,l,n,i,a){null===e&&(e=Y);const r=i.isMesh&&i.matrixWorld.determinant()<0,q=Ft(t,e,n,i);$.setMaterial(n,r);let o=l.index;const s=l.attributes.position;if(null===o){if(void 0===s||0===s.count)return}else if(0===o.count)return;let m,h=1;!0===n.wireframe&&(o=ot.getWireframeAttribute(l),h=2),(n.morphTargets||n.morphNormals)&&ft.update(i,l,n,q),yt.setup(i,n,q,l,o);let c=_t;null!==o&&(m=qt.get(o),c=gt,c.setIndex(m));const u=null!==o?o.count:s.count,d=l.drawRange.start*h,x=l.drawRange.count*h,p=null!==a?a.start*h:0,f=null!==a?a.count*h:1/0,_=Math.max(d,p),g=Math.min(u,d+x,p+f)-1,v=Math.max(0,g-_+1);if(0!==v){if(i.isMesh)!0===n.wireframe?($.setLineWidth(n.wireframeLinewidth*Z()),c.setMode(1)):c.setMode(4);else if(i.isLine){let t=n.linewidth;void 0===t&&(t=1),$.setLineWidth(t*Z()),i.isLineSegments?c.setMode(1):i.isLineLoop?c.setMode(2):c.setMode(3)}else i.isPoints?c.setMode(0):i.isSprite&&c.setMode(4);if(i.isInstancedMesh)c.renderInstances(_,v,i.count);else if(l.isInstancedBufferGeometry){const t=Math.min(l.instanceCount,l._maxInstanceCount);c.renderInstances(_,v,t)}else c.render(_,v)}},this.compile=function(t,e){p=ut.get(t),p.init(),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(p.pushLight(t),t.castShadow&&p.pushShadow(t))})),p.setupLights(),t.traverse((function(e){const l=e.material;if(l)if(Array.isArray(l))for(let n=0;n<l.length;n++){It(l[n],t,e)}else It(l,t,e)}))};let Lt=null;function At(){Ct.stop()}function Rt(){Ct.start()}const Ct=new Tl;function Pt(t,e,l,n){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)l=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)p.pushLight(t),t.castShadow&&p.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||G.intersectsSprite(t)){n&&X.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j);const e=st.update(t),i=t.material;i.visible&&u.push(t,e,i,l,X.z,null)}}else if(t.isImmediateRenderObject)n&&X.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j),u.push(t,null,t.material,l,X.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==tt.render.frame&&(t.skeleton.update(),t.skeleton.frame=tt.render.frame),!t.frustumCulled||G.intersectsObject(t))){n&&X.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j);const e=st.update(t),i=t.material;if(Array.isArray(i)){const n=e.groups;for(let a=0,r=n.length;a<r;a++){const r=n[a],q=i[r.materialIndex];q&&q.visible&&u.push(t,e,q,l,X.z,r)}}else i.visible&&u.push(t,e,i,l,X.z,null)}const i=t.children;for(let t=0,a=i.length;t<a;t++)Pt(i[t],e,l,n)}function Dt(t,e,l){const n=!0===e.isScene?e.overrideMaterial:null;for(let i=0,a=t.length;i<a;i++){const a=t[i],r=a.object,q=a.geometry,o=null===n?a.material:n,s=a.group;if(l.isArrayCamera){const t=l.cameras;for(let l=0,n=t.length;l<n;l++){const n=t[l];r.layers.test(n.layers)&&($.viewport(L.copy(n.viewport)),p.setupLightsView(n),Nt(r,e,n,q,o,s))}}else Nt(r,e,l,q,o,s)}}function Nt(t,e,l,n,i,a){if(t.onBeforeRender(y,e,l,n,i,a),t.modelViewMatrix.multiplyMatrices(l.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){const n=Ft(l,e,i,t);$.setMaterial(i),yt.reset(),function(t,e){t.render((function(t){y.renderBufferImmediate(t,e)}))}(t,n)}else y.renderBufferDirect(l,e,n,i,t,a);t.onAfterRender(y,e,l,n,i,a)}function It(t,e,l){!0!==e.isScene&&(e=Y);const n=et.get(t),i=p.state.lights,a=p.state.shadowsArray,r=i.state.version,q=mt.getParameters(t,i.state,a,e,l),o=mt.getProgramCacheKey(q);let s=n.programs;n.environment=t.isMeshStandardMaterial?e.environment:null,n.fog=e.fog,n.envMap=at.get(t.envMap||n.environment),void 0===s&&(t.addEventListener("dispose",Tt),s=new Map,n.programs=s);let m=s.get(o);if(void 0!==m){if(n.currentProgram===m&&n.lightsStateVersion===r)return Ot(t,q),m}else q.uniforms=mt.getUniforms(t),t.onBuild(q,y),t.onBeforeCompile(q,y),m=mt.acquireProgram(q,o),s.set(o,m),n.uniforms=q.uniforms;const h=n.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(h.clippingPlanes=dt.uniform),Ot(t,q),n.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),n.lightsStateVersion=r,n.needsLights&&(h.ambientLightColor.value=i.state.ambient,h.lightProbe.value=i.state.probe,h.directionalLights.value=i.state.directional,h.directionalLightShadows.value=i.state.directionalShadow,h.spotLights.value=i.state.spot,h.spotLightShadows.value=i.state.spotShadow,h.rectAreaLights.value=i.state.rectArea,h.ltc_1.value=i.state.rectAreaLTC1,h.ltc_2.value=i.state.rectAreaLTC2,h.pointLights.value=i.state.point,h.pointLightShadows.value=i.state.pointShadow,h.hemisphereLights.value=i.state.hemi,h.directionalShadowMap.value=i.state.directionalShadowMap,h.directionalShadowMatrix.value=i.state.directionalShadowMatrix,h.spotShadowMap.value=i.state.spotShadowMap,h.spotShadowMatrix.value=i.state.spotShadowMatrix,h.pointShadowMap.value=i.state.pointShadowMap,h.pointShadowMatrix.value=i.state.pointShadowMatrix);const c=m.getUniforms(),u=Kn.seqWithValue(c.seq,h);return n.currentProgram=m,n.uniformsList=u,m}function Ot(t,e){const l=et.get(t);l.outputEncoding=e.outputEncoding,l.instancing=e.instancing,l.skinning=e.skinning,l.numClippingPlanes=e.numClippingPlanes,l.numIntersection=e.numClipIntersection,l.vertexAlphas=e.vertexAlphas}function Ft(t,e,l,n){!0!==e.isScene&&(e=Y),lt.resetTextureUnits();const i=e.fog,a=l.isMeshStandardMaterial?e.environment:null,r=null===S?y.outputEncoding:S.texture.encoding,q=at.get(l.envMap||a),o=!0===l.vertexColors&&n.geometry&&n.geometry.attributes.color&&4===n.geometry.attributes.color.itemSize,s=et.get(l),m=p.state.lights;if(!0===V&&(!0===k||t!==T)){const e=t===T&&l.id===E;dt.setState(l,t,e)}let h=!1;l.version===s.__version?s.needsLights&&s.lightsStateVersion!==m.state.version||s.outputEncoding!==r||n.isInstancedMesh&&!1===s.instancing?h=!0:n.isInstancedMesh||!0!==s.instancing?n.isSkinnedMesh&&!1===s.skinning?h=!0:n.isSkinnedMesh||!0!==s.skinning?s.envMap!==q||l.fog&&s.fog!==i?h=!0:void 0===s.numClippingPlanes||s.numClippingPlanes===dt.numPlanes&&s.numIntersection===dt.numIntersection?s.vertexAlphas!==o&&(h=!0):h=!0:h=!0:h=!0:(h=!0,s.__version=l.version);let c=s.currentProgram;!0===h&&(c=It(l,e,n));let u=!1,d=!1,x=!1;const f=c.getUniforms(),_=s.uniforms;if($.useProgram(c.program)&&(u=!0,d=!0,x=!0),l.id!==E&&(E=l.id,d=!0),u||T!==t){if(f.setValue(wt,"projectionMatrix",t.projectionMatrix),K.logarithmicDepthBuffer&&f.setValue(wt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),T!==t&&(T=t,d=!0,x=!0),l.isShaderMaterial||l.isMeshPhongMaterial||l.isMeshToonMaterial||l.isMeshStandardMaterial||l.envMap){const e=f.map.cameraPosition;void 0!==e&&e.setValue(wt,X.setFromMatrixPosition(t.matrixWorld))}(l.isMeshPhongMaterial||l.isMeshToonMaterial||l.isMeshLambertMaterial||l.isMeshBasicMaterial||l.isMeshStandardMaterial||l.isShaderMaterial)&&f.setValue(wt,"isOrthographic",!0===t.isOrthographicCamera),(l.isMeshPhongMaterial||l.isMeshToonMaterial||l.isMeshLambertMaterial||l.isMeshBasicMaterial||l.isMeshStandardMaterial||l.isShaderMaterial||l.isShadowMaterial||n.isSkinnedMesh)&&f.setValue(wt,"viewMatrix",t.matrixWorldInverse)}if(n.isSkinnedMesh){f.setOptional(wt,n,"bindMatrix"),f.setOptional(wt,n,"bindMatrixInverse");const t=n.skeleton;t&&(K.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),f.setValue(wt,"boneTexture",t.boneTexture,lt),f.setValue(wt,"boneTextureSize",t.boneTextureSize)):f.setOptional(wt,t,"boneMatrices"))}var g,v;return(d||s.receiveShadow!==n.receiveShadow)&&(s.receiveShadow=n.receiveShadow,f.setValue(wt,"receiveShadow",n.receiveShadow)),d&&(f.setValue(wt,"toneMappingExposure",y.toneMappingExposure),s.needsLights&&(v=x,(g=_).ambientLightColor.needsUpdate=v,g.lightProbe.needsUpdate=v,g.directionalLights.needsUpdate=v,g.directionalLightShadows.needsUpdate=v,g.pointLights.needsUpdate=v,g.pointLightShadows.needsUpdate=v,g.spotLights.needsUpdate=v,g.spotLightShadows.needsUpdate=v,g.rectAreaLights.needsUpdate=v,g.hemisphereLights.needsUpdate=v),i&&l.fog&&ht.refreshFogUniforms(_,i),ht.refreshMaterialUniforms(_,l,N,D,W),Kn.upload(wt,s.uniformsList,_,lt)),l.isShaderMaterial&&!0===l.uniformsNeedUpdate&&(Kn.upload(wt,s.uniformsList,_,lt),l.uniformsNeedUpdate=!1),l.isSpriteMaterial&&f.setValue(wt,"center",n.center),f.setValue(wt,"modelViewMatrix",n.modelViewMatrix),f.setValue(wt,"normalMatrix",n.normalMatrix),f.setValue(wt,"modelMatrix",n.matrixWorld),c}Ct.setAnimationLoop((function(t){Lt&&Lt(t)})),"undefined"!=typeof window&&Ct.setContext(window),this.setAnimationLoop=function(t){Lt=t,zt.setAnimationLoop(t),null===t?Ct.stop():Ct.start()},zt.addEventListener("sessionstart",At),zt.addEventListener("sessionend",Rt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===b)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===zt.enabled&&!0===zt.isPresenting&&(!0===zt.cameraAutoUpdate&&zt.updateCamera(e),e=zt.getCamera()),!0===t.isScene&&t.onBeforeRender(y,t,e,S),p=ut.get(t,v.length),p.init(),v.push(p),j.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),G.setFromProjectionMatrix(j),k=this.localClippingEnabled,V=dt.init(this.clippingPlanes,k,e),u=ct.get(t,f.length),u.init(),f.push(u),Pt(t,e,0,y.sortObjects),u.finish(),!0===y.sortObjects&&u.sort(I,B),!0===V&&dt.beginShadows();const l=p.state.shadowsArray;xt.render(l,t,e),p.setupLights(),p.setupLightsView(e),!0===V&&dt.endShadows(),!0===this.info.autoReset&&this.info.reset(),pt.render(u,t);const n=u.opaque,i=u.transmissive,a=u.transparent;n.length>0&&Dt(n,t,e),i.length>0&&function(t,e,l,n){null===W&&(W=new it(1024,1024,{generateMipmaps:!0,minFilter:d,magFilter:m,wrapS:o,wrapT:o}));const i=y.getRenderTarget();y.setRenderTarget(W),y.clear(),Dt(t,l,n),lt.updateRenderTargetMipmap(W),y.setRenderTarget(i),Dt(e,l,n)}(n,i,t,e),a.length>0&&Dt(a,t,e),null!==S&&(lt.updateRenderTargetMipmap(S),lt.updateMultisampleRenderTarget(S)),!0===t.isScene&&t.onAfterRender(y,t,e),$.buffers.depth.setTest(!0),$.buffers.depth.setMask(!0),$.buffers.color.setMask(!0),$.setPolygonOffset(!1),yt.resetDefaultState(),E=-1,T=null,v.pop(),p=v.length>0?v[v.length-1]:null,f.pop(),u=f.length>0?f[f.length-1]:null},this.getActiveCubeFace=function(){return M},this.getActiveMipmapLevel=function(){return z},this.getRenderTarget=function(){return S},this.setRenderTarget=function(t,e=0,l=0){S=t,M=e,z=l,t&&void 0===et.get(t).__webglFramebuffer&&lt.setupRenderTarget(t);let n=null,i=!1,a=!1;if(t){const l=t.texture;(l.isDataTexture3D||l.isDataTexture2DArray)&&(a=!0);const r=et.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(n=r[e],i=!0):n=t.isWebGLMultisampleRenderTarget?et.get(t).__webglMultisampledFramebuffer:r,L.copy(t.viewport),A.copy(t.scissor),R=t.scissorTest}else L.copy(O).multiplyScalar(N).floor(),A.copy(F).multiplyScalar(N).floor(),R=H;if($.bindFramebuffer(36160,n)&&K.drawBuffers){let e=!1;if(t)if(t.isWebGLMultipleRenderTargets){const l=t.texture;if(U.length!==l.length||36064!==U[0]){for(let t=0,e=l.length;t<e;t++)U[t]=36064+t;U.length=l.length,e=!0}}else 1===U.length&&36064===U[0]||(U[0]=36064,U.length=1,e=!0);else 1===U.length&&1029===U[0]||(U[0]=1029,U.length=1,e=!0);e&&(K.isWebGL2?wt.drawBuffers(U):Q.get("WEBGL_draw_buffers").drawBuffersWEBGL(U))}if($.viewport(L),$.scissor(A),$.setScissorTest(R),i){const n=et.get(t.texture);wt.framebufferTexture2D(36160,36064,34069+e,n.__webglTexture,l)}else if(a){const n=et.get(t.texture),i=e||0;wt.framebufferTextureLayer(36160,36064,n.__webglTexture,l||0,i)}},this.readRenderTargetPixels=function(t,e,l,n,i,a,r){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let q=et.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==r&&(q=q[r]),q){$.bindFramebuffer(36160,q);try{const r=t.texture,q=r.format,o=r.type;if(q!==w&&vt.convert(q)!==wt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const s=o===g&&(Q.has("EXT_color_buffer_half_float")||K.isWebGL2&&Q.has("EXT_color_buffer_float"));if(!(o===x||vt.convert(o)===wt.getParameter(35738)||o===_&&(K.isWebGL2||Q.has("OES_texture_float")||Q.has("WEBGL_color_buffer_float"))||s))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===wt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-n&&l>=0&&l<=t.height-i&&wt.readPixels(e,l,n,i,vt.convert(q),vt.convert(o),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const t=null!==S?et.get(S).__webglFramebuffer:null;$.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,l=0){const n=Math.pow(2,-l),i=Math.floor(e.image.width*n),a=Math.floor(e.image.height*n);let r=vt.convert(e.format);K.isWebGL2&&(6407===r&&(r=32849),6408===r&&(r=32856)),lt.setTexture2D(e,0),wt.copyTexImage2D(3553,l,r,t.x,t.y,i,a,0),$.unbindTexture()},this.copyTextureToTexture=function(t,e,l,n=0){const i=e.image.width,a=e.image.height,r=vt.convert(l.format),q=vt.convert(l.type);lt.setTexture2D(l,0),wt.pixelStorei(37440,l.flipY),wt.pixelStorei(37441,l.premultiplyAlpha),wt.pixelStorei(3317,l.unpackAlignment),e.isDataTexture?wt.texSubImage2D(3553,n,t.x,t.y,i,a,r,q,e.image.data):e.isCompressedTexture?wt.compressedTexSubImage2D(3553,n,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,r,e.mipmaps[0].data):wt.texSubImage2D(3553,n,t.x,t.y,r,q,e.image),0===n&&l.generateMipmaps&&wt.generateMipmap(3553),$.unbindTexture()},this.copyTextureToTexture3D=function(t,e,l,n,i=0){if(y.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const{width:a,height:r,data:q}=l.image,o=vt.convert(n.format),s=vt.convert(n.type);let m;if(n.isDataTexture3D)lt.setTexture3D(n,0),m=32879;else{if(!n.isDataTexture2DArray)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");lt.setTexture2DArray(n,0),m=35866}wt.pixelStorei(37440,n.flipY),wt.pixelStorei(37441,n.premultiplyAlpha),wt.pixelStorei(3317,n.unpackAlignment);const h=wt.getParameter(3314),c=wt.getParameter(32878),u=wt.getParameter(3316),d=wt.getParameter(3315),x=wt.getParameter(32877);wt.pixelStorei(3314,a),wt.pixelStorei(32878,r),wt.pixelStorei(3316,t.min.x),wt.pixelStorei(3315,t.min.y),wt.pixelStorei(32877,t.min.z),wt.texSubImage3D(m,i,e.x,e.y,e.z,t.max.x-t.min.x+1,t.max.y-t.min.y+1,t.max.z-t.min.z+1,o,s,q),wt.pixelStorei(3314,h),wt.pixelStorei(32878,c),wt.pixelStorei(3316,u),wt.pixelStorei(3315,d),wt.pixelStorei(32877,x),0===i&&n.generateMipmaps&&wt.generateMipmap(m),$.unbindTexture()},this.initTexture=function(t){lt.setTexture2D(t,0),$.unbindTexture()},this.resetState=function(){M=0,z=0,S=null,$.reset(),yt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}(class extends Vi{}).prototype.isWebGL1Renderer=!0;class ki{constructor(t,e=25e-5){this.name="",this.color=new Ce(t),this.density=e}clone(){return new ki(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}ki.prototype.isFogExp2=!0;class Wi{constructor(t,e=1,l=1e3){this.name="",this.color=new Ce(t),this.near=e,this.far=l}clone(){return new Wi(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}Wi.prototype.isFog=!0;class ji extends oe{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.environment&&(e.object.environment=this.environment.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}ji.prototype.isScene=!0;class Xi{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=B,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=k()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,l){t*=this.stride,l*=e.stride;for(let n=0,i=this.stride;n<i;n++)this.array[t+n]=e.array[l+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=k()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),l=new this.constructor(e,this.stride);return l.setUsage(this.usage),l}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=k()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}Xi.prototype.isInterleavedBuffer=!0;const Yi=new rt;class Zi{constructor(t,e,l,n){this.name="",this.data=t,this.itemSize=e,this.offset=l,this.normalized=!0===n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,l=this.data.count;e<l;e++)Yi.x=this.getX(e),Yi.y=this.getY(e),Yi.z=this.getZ(e),Yi.applyMatrix4(t),this.setXYZ(e,Yi.x,Yi.y,Yi.z);return this}applyNormalMatrix(t){for(let e=0,l=this.count;e<l;e++)Yi.x=this.getX(e),Yi.y=this.getY(e),Yi.z=this.getZ(e),Yi.applyNormalMatrix(t),this.setXYZ(e,Yi.x,Yi.y,Yi.z);return this}transformDirection(t){for(let e=0,l=this.count;e<l;e++)Yi.x=this.getX(e),Yi.y=this.getY(e),Yi.z=this.getZ(e),Yi.transformDirection(t),this.setXYZ(e,Yi.x,Yi.y,Yi.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,l){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=l,this}setXYZ(t,e,l,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=l,this.data.array[t+2]=n,this}setXYZW(t,e,l,n,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=l,this.data.array[t+2]=n,this.data.array[t+3]=i,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const l=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[l+e])}return new Ie(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Zi(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const l=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[l+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Zi.prototype.isInterleavedBufferAttribute=!0;class Ji extends ze{constructor(t){super(),this.type="SpriteMaterial",this.color=new Ce(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let Qi;Ji.prototype.isSpriteMaterial=!0;const Ki=new rt,$i=new rt,ta=new rt,ea=new J,la=new J,na=new Bt,ia=new rt,aa=new rt,ra=new rt,qa=new J,oa=new J,sa=new J;class ma extends oe{constructor(t){if(super(),this.type="Sprite",void 0===Qi){Qi=new Ye;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new Xi(t,5);Qi.setIndex([0,1,2,0,2,3]),Qi.setAttribute("position",new Zi(e,3,0,!1)),Qi.setAttribute("uv",new Zi(e,2,3,!1))}this.geometry=Qi,this.material=void 0!==t?t:new Ji,this.center=new J(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),$i.setFromMatrixScale(this.matrixWorld),na.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),ta.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&$i.multiplyScalar(-ta.z);const l=this.material.rotation;let n,i;0!==l&&(i=Math.cos(l),n=Math.sin(l));const a=this.center;ha(ia.set(-.5,-.5,0),ta,a,$i,n,i),ha(aa.set(.5,-.5,0),ta,a,$i,n,i),ha(ra.set(.5,.5,0),ta,a,$i,n,i),qa.set(0,0),oa.set(1,0),sa.set(1,1);let r=t.ray.intersectTriangle(ia,aa,ra,!1,Ki);if(null===r&&(ha(aa.set(-.5,.5,0),ta,a,$i,n,i),oa.set(0,1),r=t.ray.intersectTriangle(ia,ra,aa,!1,Ki),null===r))return;const q=t.ray.origin.distanceTo(Ki);q<t.near||q>t.far||e.push({distance:q,point:Ki.clone(),uv:be.getUV(Ki,ia,aa,ra,qa,oa,sa,new J),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function ha(t,e,l,n,i,a){ea.subVectors(t,l).addScalar(.5).multiply(n),void 0!==i?(la.x=a*ea.x-i*ea.y,la.y=i*ea.x+a*ea.y):la.copy(ea),t.copy(e),t.x+=la.x,t.y+=la.y,t.applyMatrix4(na)}ma.prototype.isSprite=!0;const ca=new rt,ua=new nt,da=new nt,xa=new rt,pa=new Bt;class fa extends cl{constructor(t,e){super(t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Bt,this.bindMatrixInverse=new Bt}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new nt,e=this.geometry.attributes.skinWeight;for(let l=0,n=e.count;l<n;l++){t.x=e.getX(l),t.y=e.getY(l),t.z=e.getZ(l),t.w=e.getW(l);const n=1/t.manhattanLength();n!==1/0?t.multiplyScalar(n):t.set(1,0,0,0),e.setXYZW(l,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const l=this.skeleton,n=this.geometry;ua.fromBufferAttribute(n.attributes.skinIndex,t),da.fromBufferAttribute(n.attributes.skinWeight,t),ca.fromBufferAttribute(n.attributes.position,t).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const n=da.getComponent(t);if(0!==n){const i=ua.getComponent(t);pa.multiplyMatrices(l.bones[i].matrixWorld,l.boneInverses[i]),e.addScaledVector(xa.copy(ca).applyMatrix4(pa),n)}}return e.applyMatrix4(this.bindMatrixInverse)}}fa.prototype.isSkinnedMesh=!0;class _a extends oe{constructor(){super(),this.type="Bone"}}_a.prototype.isBone=!0;class ga extends et{constructor(t,e,l,n,i,a,r,q,o,s,h,c){super(null,a,r,q,o,s,n,i,h,c),this.image={data:t||null,width:e||1,height:l||1},this.magFilter=void 0!==o?o:m,this.minFilter=void 0!==s?s:m,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ga.prototype.isDataTexture=!0;const va=new Bt,ya=new Bt,wa=[],ba=new cl;class Ma extends cl{constructor(t,e,l){super(t,e),this.instanceMatrix=new Ie(new Float32Array(16*l),16),this.instanceColor=null,this.count=l,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const l=this.matrixWorld,n=this.count;if(ba.geometry=this.geometry,ba.material=this.material,void 0!==ba.material)for(let i=0;i<n;i++){this.getMatrixAt(i,va),ya.multiplyMatrices(l,va),ba.matrixWorld=ya,ba.raycast(t,wa);for(let t=0,l=wa.length;t<l;t++){const l=wa[t];l.instanceId=i,l.object=this,e.push(l)}wa.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Ie(new Float32Array(3*this.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}Ma.prototype.isInstancedMesh=!0;class za extends ze{constructor(t){super(),this.type="LineBasicMaterial",this.color=new Ce(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.morphTargets=t.morphTargets,this}}za.prototype.isLineBasicMaterial=!0;const Sa=new rt,Ea=new rt,Ta=new Bt,La=new It,Aa=new Tt;class Ra extends oe{constructor(t=new Ye,e=new za){super(),this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,l=[0];for(let t=1,n=e.count;t<n;t++)Sa.fromBufferAttribute(e,t-1),Ea.fromBufferAttribute(e,t),l[t]=l[t-1],l[t]+=Sa.distanceTo(Ea);t.setAttribute("lineDistance",new Fe(l,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(t,e){const l=this.geometry,n=this.matrixWorld,i=t.params.Line.threshold,a=l.drawRange;if(null===l.boundingSphere&&l.computeBoundingSphere(),Aa.copy(l.boundingSphere),Aa.applyMatrix4(n),Aa.radius+=i,!1===t.ray.intersectsSphere(Aa))return;Ta.copy(n).invert(),La.copy(t.ray).applyMatrix4(Ta);const r=i/((this.scale.x+this.scale.y+this.scale.z)/3),q=r*r,o=new rt,s=new rt,m=new rt,h=new rt,c=this.isLineSegments?2:1;if(l.isBufferGeometry){const n=l.index,i=l.attributes.position;if(null!==n){for(let l=Math.max(0,a.start),r=Math.min(n.count,a.start+a.count)-1;l<r;l+=c){const a=n.getX(l),r=n.getX(l+1);o.fromBufferAttribute(i,a),s.fromBufferAttribute(i,r);if(La.distanceSqToSegment(o,s,h,m)>q)continue;h.applyMatrix4(this.matrixWorld);const c=t.ray.origin.distanceTo(h);c<t.near||c>t.far||e.push({distance:c,point:m.clone().applyMatrix4(this.matrixWorld),index:l,face:null,faceIndex:null,object:this})}}else{for(let l=Math.max(0,a.start),n=Math.min(i.count,a.start+a.count)-1;l<n;l+=c){o.fromBufferAttribute(i,l),s.fromBufferAttribute(i,l+1);if(La.distanceSqToSegment(o,s,h,m)>q)continue;h.applyMatrix4(this.matrixWorld);const n=t.ray.origin.distanceTo(h);n<t.near||n>t.far||e.push({distance:n,point:m.clone().applyMatrix4(this.matrixWorld),index:l,face:null,faceIndex:null,object:this})}}}else l.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,l=Object.keys(e);if(l.length>0){const t=e[l[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,l=t.length;e<l;e++){const l=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[l]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Ra.prototype.isLine=!0;const Ca=new rt,Pa=new rt;class Da extends Ra{constructor(t,e){super(t,e),this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,l=[];for(let t=0,n=e.count;t<n;t+=2)Ca.fromBufferAttribute(e,t),Pa.fromBufferAttribute(e,t+1),l[t]=0===t?0:l[t-1],l[t+1]=l[t]+Ca.distanceTo(Pa);t.setAttribute("lineDistance",new Fe(l,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}Da.prototype.isLineSegments=!0;class Na extends Ra{constructor(t,e){super(t,e),this.type="LineLoop"}}Na.prototype.isLineLoop=!0;class Ia extends ze{constructor(t){super(),this.type="PointsMaterial",this.color=new Ce(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this}}Ia.prototype.isPointsMaterial=!0;const Ba=new Bt,Oa=new It,Fa=new Tt,Ha=new rt;class Ua extends oe{constructor(t=new Ye,e=new Ia){super(),this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const l=this.geometry,n=this.matrixWorld,i=t.params.Points.threshold,a=l.drawRange;if(null===l.boundingSphere&&l.computeBoundingSphere(),Fa.copy(l.boundingSphere),Fa.applyMatrix4(n),Fa.radius+=i,!1===t.ray.intersectsSphere(Fa))return;Ba.copy(n).invert(),Oa.copy(t.ray).applyMatrix4(Ba);const r=i/((this.scale.x+this.scale.y+this.scale.z)/3),q=r*r;if(l.isBufferGeometry){const i=l.index,r=l.attributes.position;if(null!==i){for(let l=Math.max(0,a.start),o=Math.min(i.count,a.start+a.count);l<o;l++){const a=i.getX(l);Ha.fromBufferAttribute(r,a),Ga(Ha,a,q,n,t,e,this)}}else{for(let l=Math.max(0,a.start),i=Math.min(r.count,a.start+a.count);l<i;l++)Ha.fromBufferAttribute(r,l),Ga(Ha,l,q,n,t,e,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,l=Object.keys(e);if(l.length>0){const t=e[l[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,l=t.length;e<l;e++){const l=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[l]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function Ga(t,e,l,n,i,a,r){const q=Oa.distanceSqToPoint(t);if(q<l){const l=new rt;Oa.closestPointToPoint(t,l),l.applyMatrix4(n);const o=i.ray.origin.distanceTo(l);if(o<i.near||o>i.far)return;a.push({distance:o,distanceToRay:Math.sqrt(q),point:l,index:e,face:null,object:r})}}Ua.prototype.isPoints=!0;(class extends et{constructor(t,e,l,n,i,a,r,q,o){super(t,e,l,n,i,a,r,q,o),this.format=void 0!==r?r:y,this.minFilter=void 0!==a?a:u,this.magFilter=void 0!==i?i:u,this.generateMipmaps=!1;const s=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){s.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1==="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}).prototype.isVideoTexture=!0;class Va extends et{constructor(t,e,l,n,i,a,r,q,o,s,m,h){super(null,a,r,q,o,s,n,i,m,h),this.image={width:e,height:l},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}Va.prototype.isCompressedTexture=!0;(class extends et{constructor(t,e,l,n,i,a,r,q,o){super(t,e,l,n,i,a,r,q,o),this.needsUpdate=!0}}).prototype.isCanvasTexture=!0;(class extends et{constructor(t,e,l,n,i,a,r,q,o,s){if((s=void 0!==s?s:b)!==b&&s!==M)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===l&&s===b&&(l=p),void 0===l&&s===M&&(l=v),super(null,n,i,a,r,q,s,l,o),this.image={width:t,height:e},this.magFilter=void 0!==r?r:m,this.minFilter=void 0!==q?q:m,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isDepthTexture=!0;new rt,new rt,new rt,new be;const ka=function(t,e,l){l=l||2;const n=e&&e.length,i=n?e[0]*l:t.length;let a=Wa(t,0,i,l,!0);const r=[];if(!a||a.next===a.prev)return r;let q,o,s,m,h,c,u;if(n&&(a=function(t,e,l,n){const i=[];let a,r,q,o,s;for(a=0,r=e.length;a<r;a++)q=e[a]*n,o=a<r-1?e[a+1]*n:t.length,s=Wa(t,q,o,n,!1),s===s.next&&(s.steiner=!0),i.push(lr(s));for(i.sort(Ka),a=0;a<i.length;a++)$a(i[a],l),l=ja(l,l.next);return l}(t,e,a,l)),t.length>80*l){q=s=t[0],o=m=t[1];for(let e=l;e<i;e+=l)h=t[e],c=t[e+1],h<q&&(q=h),c<o&&(o=c),h>s&&(s=h),c>m&&(m=c);u=Math.max(s-q,m-o),u=0!==u?1/u:0}return Xa(a,r,l,q,o,u),r};function Wa(t,e,l,n,i){let a,r;if(i===function(t,e,l,n){let i=0;for(let a=e,r=l-n;a<l;a+=n)i+=(t[r]-t[a])*(t[a+1]+t[r+1]),r=a;return i}(t,e,l,n)>0)for(a=e;a<l;a+=n)r=cr(a,t[a],t[a+1],r);else for(a=l-n;a>=e;a-=n)r=cr(a,t[a],t[a+1],r);return r&&rr(r,r.next)&&(ur(r),r=r.next),r}function ja(t,e){if(!t)return t;e||(e=t);let l,n=t;do{if(l=!1,n.steiner||!rr(n,n.next)&&0!==ar(n.prev,n,n.next))n=n.next;else{if(ur(n),n=e=n.prev,n===n.next)break;l=!0}}while(l||n!==e);return e}function Xa(t,e,l,n,i,a,r){if(!t)return;!r&&a&&function(t,e,l,n){let i=t;do{null===i.z&&(i.z=er(i.x,i.y,e,l,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){let e,l,n,i,a,r,q,o,s=1;do{for(l=t,t=null,a=null,r=0;l;){for(r++,n=l,q=0,e=0;e<s&&(q++,n=n.nextZ,n);e++);for(o=s;q>0||o>0&&n;)0!==q&&(0===o||!n||l.z<=n.z)?(i=l,l=l.nextZ,q--):(i=n,n=n.nextZ,o--),a?a.nextZ=i:t=i,i.prevZ=a,a=i;l=n}a.nextZ=null,s*=2}while(r>1)}(i)}(t,n,i,a);let q,o,s=t;for(;t.prev!==t.next;)if(q=t.prev,o=t.next,a?Za(t,n,i,a):Ya(t))e.push(q.i/l),e.push(t.i/l),e.push(o.i/l),ur(t),t=o.next,s=o.next;else if((t=o)===s){r?1===r?Xa(t=Ja(ja(t),e,l),e,l,n,i,a,2):2===r&&Qa(t,e,l,n,i,a):Xa(ja(t),e,l,n,i,a,1);break}}function Ya(t){const e=t.prev,l=t,n=t.next;if(ar(e,l,n)>=0)return!1;let i=t.next.next;for(;i!==t.prev;){if(nr(e.x,e.y,l.x,l.y,n.x,n.y,i.x,i.y)&&ar(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Za(t,e,l,n){const i=t.prev,a=t,r=t.next;if(ar(i,a,r)>=0)return!1;const q=i.x<a.x?i.x<r.x?i.x:r.x:a.x<r.x?a.x:r.x,o=i.y<a.y?i.y<r.y?i.y:r.y:a.y<r.y?a.y:r.y,s=i.x>a.x?i.x>r.x?i.x:r.x:a.x>r.x?a.x:r.x,m=i.y>a.y?i.y>r.y?i.y:r.y:a.y>r.y?a.y:r.y,h=er(q,o,e,l,n),c=er(s,m,e,l,n);let u=t.prevZ,d=t.nextZ;for(;u&&u.z>=h&&d&&d.z<=c;){if(u!==t.prev&&u!==t.next&&nr(i.x,i.y,a.x,a.y,r.x,r.y,u.x,u.y)&&ar(u.prev,u,u.next)>=0)return!1;if(u=u.prevZ,d!==t.prev&&d!==t.next&&nr(i.x,i.y,a.x,a.y,r.x,r.y,d.x,d.y)&&ar(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;u&&u.z>=h;){if(u!==t.prev&&u!==t.next&&nr(i.x,i.y,a.x,a.y,r.x,r.y,u.x,u.y)&&ar(u.prev,u,u.next)>=0)return!1;u=u.prevZ}for(;d&&d.z<=c;){if(d!==t.prev&&d!==t.next&&nr(i.x,i.y,a.x,a.y,r.x,r.y,d.x,d.y)&&ar(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function Ja(t,e,l){let n=t;do{const i=n.prev,a=n.next.next;!rr(i,a)&&qr(i,n,n.next,a)&&mr(i,a)&&mr(a,i)&&(e.push(i.i/l),e.push(n.i/l),e.push(a.i/l),ur(n),ur(n.next),n=t=a),n=n.next}while(n!==t);return ja(n)}function Qa(t,e,l,n,i,a){let r=t;do{let t=r.next.next;for(;t!==r.prev;){if(r.i!==t.i&&ir(r,t)){let q=hr(r,t);return r=ja(r,r.next),q=ja(q,q.next),Xa(r,e,l,n,i,a),void Xa(q,e,l,n,i,a)}t=t.next}r=r.next}while(r!==t)}function Ka(t,e){return t.x-e.x}function $a(t,e){if(e=function(t,e){let l=e;const n=t.x,i=t.y;let a,r=-1/0;do{if(i<=l.y&&i>=l.next.y&&l.next.y!==l.y){const t=l.x+(i-l.y)*(l.next.x-l.x)/(l.next.y-l.y);if(t<=n&&t>r){if(r=t,t===n){if(i===l.y)return l;if(i===l.next.y)return l.next}a=l.x<l.next.x?l:l.next}}l=l.next}while(l!==e);if(!a)return null;if(n===r)return a;const q=a,o=a.x,s=a.y;let m,h=1/0;l=a;do{n>=l.x&&l.x>=o&&n!==l.x&&nr(i<s?n:r,i,o,s,i<s?r:n,i,l.x,l.y)&&(m=Math.abs(i-l.y)/(n-l.x),mr(l,t)&&(m<h||m===h&&(l.x>a.x||l.x===a.x&&tr(a,l)))&&(a=l,h=m)),l=l.next}while(l!==q);return a}(t,e)){const l=hr(e,t);ja(e,e.next),ja(l,l.next)}}function tr(t,e){return ar(t.prev,t,e.prev)<0&&ar(e.next,t,t.next)<0}function er(t,e,l,n,i){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-l)*i)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*i)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function lr(t){let e=t,l=t;do{(e.x<l.x||e.x===l.x&&e.y<l.y)&&(l=e),e=e.next}while(e!==t);return l}function nr(t,e,l,n,i,a,r,q){return(i-r)*(e-q)-(t-r)*(a-q)>=0&&(t-r)*(n-q)-(l-r)*(e-q)>=0&&(l-r)*(a-q)-(i-r)*(n-q)>=0}function ir(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let l=t;do{if(l.i!==t.i&&l.next.i!==t.i&&l.i!==e.i&&l.next.i!==e.i&&qr(l,l.next,t,e))return!0;l=l.next}while(l!==t);return!1}(t,e)&&(mr(t,e)&&mr(e,t)&&function(t,e){let l=t,n=!1;const i=(t.x+e.x)/2,a=(t.y+e.y)/2;do{l.y>a!=l.next.y>a&&l.next.y!==l.y&&i<(l.next.x-l.x)*(a-l.y)/(l.next.y-l.y)+l.x&&(n=!n),l=l.next}while(l!==t);return n}(t,e)&&(ar(t.prev,t,e.prev)||ar(t,e.prev,e))||rr(t,e)&&ar(t.prev,t,t.next)>0&&ar(e.prev,e,e.next)>0)}function ar(t,e,l){return(e.y-t.y)*(l.x-e.x)-(e.x-t.x)*(l.y-e.y)}function rr(t,e){return t.x===e.x&&t.y===e.y}function qr(t,e,l,n){const i=sr(ar(t,e,l)),a=sr(ar(t,e,n)),r=sr(ar(l,n,t)),q=sr(ar(l,n,e));return i!==a&&r!==q||(!(0!==i||!or(t,l,e))||(!(0!==a||!or(t,n,e))||(!(0!==r||!or(l,t,n))||!(0!==q||!or(l,e,n)))))}function or(t,e,l){return e.x<=Math.max(t.x,l.x)&&e.x>=Math.min(t.x,l.x)&&e.y<=Math.max(t.y,l.y)&&e.y>=Math.min(t.y,l.y)}function sr(t){return t>0?1:t<0?-1:0}function mr(t,e){return ar(t.prev,t,t.next)<0?ar(t,e,t.next)>=0&&ar(t,t.prev,e)>=0:ar(t,e,t.prev)<0||ar(t,t.next,e)<0}function hr(t,e){const l=new dr(t.i,t.x,t.y),n=new dr(e.i,e.x,e.y),i=t.next,a=e.prev;return t.next=e,e.prev=t,l.next=i,i.prev=l,n.next=l,l.prev=n,a.next=n,n.prev=a,n}function cr(t,e,l,n){const i=new dr(t,e,l);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function ur(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function dr(t,e,l){this.i=t,this.x=e,this.y=l,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class xr{static area(t){const e=t.length;let l=0;for(let n=e-1,i=0;i<e;n=i++)l+=t[n].x*t[i].y-t[i].x*t[n].y;return.5*l}static isClockWise(t){return xr.area(t)<0}static triangulateShape(t,e){const l=[],n=[],i=[];pr(t),fr(l,t);let a=t.length;e.forEach(pr);for(let t=0;t<e.length;t++)n.push(a),a+=e[t].length,fr(l,e[t]);const r=ka(l,n);for(let t=0;t<r.length;t+=3)i.push(r.slice(t,t+3));return i}}function pr(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function fr(t,e){for(let l=0;l<e.length;l++)t.push(e[l].x),t.push(e[l].y)}class _r extends Ye{constructor(t,e){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const l=this,n=[],i=[];for(let e=0,l=t.length;e<l;e++){a(t[e])}function a(t){const a=[],r=void 0!==e.curveSegments?e.curveSegments:12,q=void 0!==e.steps?e.steps:1;let o=void 0!==e.depth?e.depth:100,s=void 0===e.bevelEnabled||e.bevelEnabled,m=void 0!==e.bevelThickness?e.bevelThickness:6,h=void 0!==e.bevelSize?e.bevelSize:m-2,c=void 0!==e.bevelOffset?e.bevelOffset:0,u=void 0!==e.bevelSegments?e.bevelSegments:3;const d=e.extrudePath,x=void 0!==e.UVGenerator?e.UVGenerator:gr;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),o=e.amount);let p,f,_,g,v,y=!1;d&&(p=d.getSpacedPoints(q),y=!0,s=!1,f=d.computeFrenetFrames(q,!1),_=new rt,g=new rt,v=new rt),s||(u=0,m=0,h=0,c=0);const w=t.extractPoints(r);let b=w.shape;const M=w.holes;if(!xr.isClockWise(b)){b=b.reverse();for(let t=0,e=M.length;t<e;t++){const e=M[t];xr.isClockWise(e)&&(M[t]=e.reverse())}}const z=xr.triangulateShape(b,M),S=b;for(let t=0,e=M.length;t<e;t++){const e=M[t];b=b.concat(e)}function E(t,e,l){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(l).add(t)}const T=b.length,L=z.length;function A(t,e,l){let n,i,a;const r=t.x-e.x,q=t.y-e.y,o=l.x-t.x,s=l.y-t.y,m=r*r+q*q,h=r*s-q*o;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(m),c=Math.sqrt(o*o+s*s),u=e.x-q/h,d=e.y+r/h,x=((l.x-s/c-u)*s-(l.y+o/c-d)*o)/(r*s-q*o);n=u+r*x-t.x,i=d+q*x-t.y;const p=n*n+i*i;if(p<=2)return new J(n,i);a=Math.sqrt(p/2)}else{let t=!1;r>Number.EPSILON?o>Number.EPSILON&&(t=!0):r<-Number.EPSILON?o<-Number.EPSILON&&(t=!0):Math.sign(q)===Math.sign(s)&&(t=!0),t?(n=-q,i=r,a=Math.sqrt(m)):(n=r,i=q,a=Math.sqrt(m/2))}return new J(n/a,i/a)}const R=[];for(let t=0,e=S.length,l=e-1,n=t+1;t<e;t++,l++,n++)l===e&&(l=0),n===e&&(n=0),R[t]=A(S[t],S[l],S[n]);const C=[];let P,D=R.concat();for(let t=0,e=M.length;t<e;t++){const e=M[t];P=[];for(let t=0,l=e.length,n=l-1,i=t+1;t<l;t++,n++,i++)n===l&&(n=0),i===l&&(i=0),P[t]=A(e[t],e[n],e[i]);C.push(P),D=D.concat(P)}for(let t=0;t<u;t++){const e=t/u,l=m*Math.cos(e*Math.PI/2),n=h*Math.sin(e*Math.PI/2)+c;for(let t=0,e=S.length;t<e;t++){const e=E(S[t],R[t],n);B(e.x,e.y,-l)}for(let t=0,e=M.length;t<e;t++){const e=M[t];P=C[t];for(let t=0,i=e.length;t<i;t++){const i=E(e[t],P[t],n);B(i.x,i.y,-l)}}}const N=h+c;for(let t=0;t<T;t++){const e=s?E(b[t],D[t],N):b[t];y?(g.copy(f.normals[0]).multiplyScalar(e.x),_.copy(f.binormals[0]).multiplyScalar(e.y),v.copy(p[0]).add(g).add(_),B(v.x,v.y,v.z)):B(e.x,e.y,0)}for(let t=1;t<=q;t++)for(let e=0;e<T;e++){const l=s?E(b[e],D[e],N):b[e];y?(g.copy(f.normals[t]).multiplyScalar(l.x),_.copy(f.binormals[t]).multiplyScalar(l.y),v.copy(p[t]).add(g).add(_),B(v.x,v.y,v.z)):B(l.x,l.y,o/q*t)}for(let t=u-1;t>=0;t--){const e=t/u,l=m*Math.cos(e*Math.PI/2),n=h*Math.sin(e*Math.PI/2)+c;for(let t=0,e=S.length;t<e;t++){const e=E(S[t],R[t],n);B(e.x,e.y,o+l)}for(let t=0,e=M.length;t<e;t++){const e=M[t];P=C[t];for(let t=0,i=e.length;t<i;t++){const i=E(e[t],P[t],n);y?B(i.x,i.y+p[q-1].y,p[q-1].x+l):B(i.x,i.y,o+l)}}}function I(t,e){let l=t.length;for(;--l>=0;){const n=l;let i=l-1;i<0&&(i=t.length-1);for(let t=0,l=q+2*u;t<l;t++){const l=T*t,a=T*(t+1);F(e+n+l,e+i+l,e+i+a,e+n+a)}}}function B(t,e,l){a.push(t),a.push(e),a.push(l)}function O(t,e,i){H(t),H(e),H(i);const a=n.length/3,r=x.generateTopUV(l,n,a-3,a-2,a-1);U(r[0]),U(r[1]),U(r[2])}function F(t,e,i,a){H(t),H(e),H(a),H(e),H(i),H(a);const r=n.length/3,q=x.generateSideWallUV(l,n,r-6,r-3,r-2,r-1);U(q[0]),U(q[1]),U(q[3]),U(q[1]),U(q[2]),U(q[3])}function H(t){n.push(a[3*t+0]),n.push(a[3*t+1]),n.push(a[3*t+2])}function U(t){i.push(t.x),i.push(t.y)}!function(){const t=n.length/3;if(s){let t=0,e=T*t;for(let t=0;t<L;t++){const l=z[t];O(l[2]+e,l[1]+e,l[0]+e)}t=q+2*u,e=T*t;for(let t=0;t<L;t++){const l=z[t];O(l[0]+e,l[1]+e,l[2]+e)}}else{for(let t=0;t<L;t++){const e=z[t];O(e[2],e[1],e[0])}for(let t=0;t<L;t++){const e=z[t];O(e[0]+T*q,e[1]+T*q,e[2]+T*q)}}l.addGroup(t,n.length/3-t,0)}(),function(){const t=n.length/3;let e=0;I(S,e),e+=S.length;for(let t=0,l=M.length;t<l;t++){const l=M[t];I(l,e),e+=l.length}l.addGroup(t,n.length/3-t,1)}()}this.setAttribute("position",new Fe(n,3)),this.setAttribute("uv",new Fe(i,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,l){if(l.shapes=[],Array.isArray(t))for(let e=0,n=t.length;e<n;e++){const n=t[e];l.shapes.push(n.uuid)}else l.shapes.push(t.uuid);void 0!==e.extrudePath&&(l.options.extrudePath=e.extrudePath.toJSON());return l}(this.parameters.shapes,this.parameters.options,t)}}const gr={generateTopUV:function(t,e,l,n,i){const a=e[3*l],r=e[3*l+1],q=e[3*n],o=e[3*n+1],s=e[3*i],m=e[3*i+1];return[new J(a,r),new J(q,o),new J(s,m)]},generateSideWallUV:function(t,e,l,n,i,a){const r=e[3*l],q=e[3*l+1],o=e[3*l+2],s=e[3*n],m=e[3*n+1],h=e[3*n+2],c=e[3*i],u=e[3*i+1],d=e[3*i+2],x=e[3*a],p=e[3*a+1],f=e[3*a+2];return Math.abs(q-m)<Math.abs(r-s)?[new J(r,1-o),new J(s,1-h),new J(c,1-d),new J(x,1-f)]:[new J(q,1-o),new J(m,1-h),new J(u,1-d),new J(p,1-f)]}};class vr extends Ye{constructor(t,e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const l=[],n=[],i=[],a=[];let r=0,q=0;if(!1===Array.isArray(t))o(t);else for(let e=0;e<t.length;e++)o(t[e]),this.addGroup(r,q,e),r+=q,q=0;function o(t){const r=n.length/3,o=t.extractPoints(e);let s=o.shape;const m=o.holes;!1===xr.isClockWise(s)&&(s=s.reverse());for(let t=0,e=m.length;t<e;t++){const e=m[t];!0===xr.isClockWise(e)&&(m[t]=e.reverse())}const h=xr.triangulateShape(s,m);for(let t=0,e=m.length;t<e;t++){const e=m[t];s=s.concat(e)}for(let t=0,e=s.length;t<e;t++){const e=s[t];n.push(e.x,e.y,0),i.push(0,0,1),a.push(e.x,e.y)}for(let t=0,e=h.length;t<e;t++){const e=h[t],n=e[0]+r,i=e[1]+r,a=e[2]+r;l.push(n,i,a),q+=3}}this.setIndex(l),this.setAttribute("position",new Fe(n,3)),this.setAttribute("normal",new Fe(i,3)),this.setAttribute("uv",new Fe(a,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let l=0,n=t.length;l<n;l++){const n=t[l];e.shapes.push(n.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}}class yr extends _r{constructor(t,e={}){const l=e.font;if(!l||!l.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Ye;const n=l.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),super(n,e),this.type="TextGeometry"}}class wr extends Ye{constructor(t){if(super(),this.type="WireframeGeometry",!0===t.isGeometry)return void console.error("THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const e=[],l=[0,0],n={},i=new rt;if(null!==t.index){const a=t.attributes.position,r=t.index;let q=t.groups;0===q.length&&(q=[{start:0,count:r.count,materialIndex:0}]);for(let t=0,e=q.length;t<e;++t){const e=q[t],i=e.start;for(let t=i,a=i+e.count;t<a;t+=3)for(let e=0;e<3;e++){const i=r.getX(t+e),a=r.getX(t+(e+1)%3);l[0]=Math.min(i,a),l[1]=Math.max(i,a);const q=l[0]+","+l[1];void 0===n[q]&&(n[q]={index1:l[0],index2:l[1]})}}for(const t in n){const l=n[t];i.fromBufferAttribute(a,l.index1),e.push(i.x,i.y,i.z),i.fromBufferAttribute(a,l.index2),e.push(i.x,i.y,i.z)}}else{const l=t.attributes.position;for(let t=0,n=l.count/3;t<n;t++)for(let n=0;n<3;n++){const a=3*t+n;i.fromBufferAttribute(l,a),e.push(i.x,i.y,i.z);const r=3*t+(n+1)%3;i.fromBufferAttribute(l,r),e.push(i.x,i.y,i.z)}}this.setAttribute("position",new Fe(e,3))}}class br extends ze{constructor(t){super(),this.type="ShadowMaterial",this.color=new Ce(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}br.prototype.isShadowMaterial=!0;class Mr extends _l{constructor(t){super(t),this.type="RawShaderMaterial"}}Mr.prototype.isRawShaderMaterial=!0;class zr extends ze{constructor(t){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Ce(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ce(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.vertexTangents=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this.vertexTangents=t.vertexTangents,this}}zr.prototype.isMeshStandardMaterial=!0;class Sr extends zr{constructor(t){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new J(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=W(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Ce(1,1,1),this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.reflectivity=t.reflectivity,t.sheen?this.sheen=(this.sheen||new Ce).copy(t.sheen):this.sheen=null,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this}}Sr.prototype.isMeshPhysicalMaterial=!0;class Er extends ze{constructor(t){super(),this.type="MeshPhongMaterial",this.color=new Ce(16777215),this.specular=new Ce(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ce(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}Er.prototype.isMeshPhongMaterial=!0;class Tr extends ze{constructor(t){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Ce(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ce(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}Tr.prototype.isMeshToonMaterial=!0;class Lr extends ze{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}Lr.prototype.isMeshNormalMaterial=!0;class Ar extends ze{constructor(t){super(),this.type="MeshLambertMaterial",this.color=new Ce(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ce(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}Ar.prototype.isMeshLambertMaterial=!0;class Rr extends ze{constructor(t){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Ce(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}Rr.prototype.isMeshMatcapMaterial=!0;class Cr extends za{constructor(t){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}Cr.prototype.isLineDashedMaterial=!0;const Pr={arraySlice:function(t,e,l){return Pr.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==l?l:t.length)):t.slice(e,l)},convertArray:function(t,e,l){return!t||!l&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,l=new Array(e);for(let t=0;t!==e;++t)l[t]=t;return l.sort((function(e,l){return t[e]-t[l]})),l},sortedArray:function(t,e,l){const n=t.length,i=new t.constructor(n);for(let a=0,r=0;r!==n;++a){const n=l[a]*e;for(let l=0;l!==e;++l)i[r++]=t[n+l]}return i},flattenJSON:function(t,e,l,n){let i=1,a=t[0];for(;void 0!==a&&void 0===a[n];)a=t[i++];if(void 0===a)return;let r=a[n];if(void 0!==r)if(Array.isArray(r))do{r=a[n],void 0!==r&&(e.push(a.time),l.push.apply(l,r)),a=t[i++]}while(void 0!==a);else if(void 0!==r.toArray)do{r=a[n],void 0!==r&&(e.push(a.time),r.toArray(l,l.length)),a=t[i++]}while(void 0!==a);else do{r=a[n],void 0!==r&&(e.push(a.time),l.push(r)),a=t[i++]}while(void 0!==a)},subclip:function(t,e,l,n,i=30){const a=t.clone();a.name=e;const r=[];for(let t=0;t<a.tracks.length;++t){const e=a.tracks[t],q=e.getValueSize(),o=[],s=[];for(let t=0;t<e.times.length;++t){const a=e.times[t]*i;if(!(a<l||a>=n)){o.push(e.times[t]);for(let l=0;l<q;++l)s.push(e.values[t*q+l])}}0!==o.length&&(e.times=Pr.convertArray(o,e.times.constructor),e.values=Pr.convertArray(s,e.values.constructor),r.push(e))}a.tracks=r;let q=1/0;for(let t=0;t<a.tracks.length;++t)q>a.tracks[t].times[0]&&(q=a.tracks[t].times[0]);for(let t=0;t<a.tracks.length;++t)a.tracks[t].shift(-1*q);return a.resetDuration(),a},makeClipAdditive:function(t,e=0,l=t,n=30){n<=0&&(n=30);const i=l.tracks.length,a=e/n;for(let e=0;e<i;++e){const n=l.tracks[e],i=n.ValueTypeName;if("bool"===i||"string"===i)continue;const r=t.tracks.find((function(t){return t.name===n.name&&t.ValueTypeName===i}));if(void 0===r)continue;let q=0;const o=n.getValueSize();n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(q=o/3);let s=0;const m=r.getValueSize();r.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(s=m/3);const h=n.times.length-1;let c;if(a<=n.times[0]){const t=q,e=o-q;c=Pr.arraySlice(n.values,t,e)}else if(a>=n.times[h]){const t=h*o+q,e=t+o-q;c=Pr.arraySlice(n.values,t,e)}else{const t=n.createInterpolant(),e=q,l=o-q;t.evaluate(a),c=Pr.arraySlice(t.resultBuffer,e,l)}if("quaternion"===i){(new at).fromArray(c).normalize().conjugate().toArray(c)}const u=r.times.length;for(let t=0;t<u;++t){const e=t*m+s;if("quaternion"===i)at.multiplyQuaternionsFlat(r.values,e,c,0,r.values,e);else{const t=m-2*s;for(let l=0;l<t;++l)r.values[e+l]-=c[l]}}}return t.blendMode=2501,t}};class Dr{constructor(t,e,l,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(l),this.sampleValues=e,this.valueSize=l,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let l=this._cachedIndex,n=e[l],i=e[l-1];t:{e:{let a;l:{n:if(!(t<n)){for(let a=l+2;;){if(void 0===n){if(t<i)break n;return l=e.length,this._cachedIndex=l,this.afterEnd_(l-1,t,i)}if(l===a)break;if(i=n,n=e[++l],t<n)break e}a=e.length;break l}if(t>=i)break t;{const r=e[1];t<r&&(l=2,i=r);for(let a=l-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(l===a)break;if(n=i,i=e[--l-1],t>=i)break e}a=l,l=0}}for(;l<a;){const n=l+a>>>1;t<e[n]?a=n:l=n+1}if(n=e[l],i=e[l-1],void 0===i)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(void 0===n)return l=e.length,this._cachedIndex=l,this.afterEnd_(l-1,i,t)}this._cachedIndex=l,this.intervalChanged_(l,i,n)}return this.interpolate_(l,i,t,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,l=this.sampleValues,n=this.valueSize,i=t*n;for(let t=0;t!==n;++t)e[t]=l[i+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}Dr.prototype.beforeStart_=Dr.prototype.copySampleValue_,Dr.prototype.afterEnd_=Dr.prototype.copySampleValue_;class Nr extends Dr{constructor(t,e,l,n){super(t,e,l,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:T,endingEnd:T}}intervalChanged_(t,e,l){const n=this.parameterPositions;let i=t-2,a=t+1,r=n[i],q=n[a];if(void 0===r)switch(this.getSettings_().endingStart){case L:i=t,r=2*e-l;break;case A:i=n.length-2,r=e+n[i]-n[i+1];break;default:i=t,r=l}if(void 0===q)switch(this.getSettings_().endingEnd){case L:a=t,q=2*l-e;break;case A:a=1,q=l+n[1]-n[0];break;default:a=t-1,q=e}const o=.5*(l-e),s=this.valueSize;this._weightPrev=o/(e-r),this._weightNext=o/(q-l),this._offsetPrev=i*s,this._offsetNext=a*s}interpolate_(t,e,l,n){const i=this.resultBuffer,a=this.sampleValues,r=this.valueSize,q=t*r,o=q-r,s=this._offsetPrev,m=this._offsetNext,h=this._weightPrev,c=this._weightNext,u=(l-e)/(n-e),d=u*u,x=d*u,p=-h*x+2*h*d-h*u,f=(1+h)*x+(-1.5-2*h)*d+(-.5+h)*u+1,_=(-1-c)*x+(1.5+c)*d+.5*u,g=c*x-c*d;for(let t=0;t!==r;++t)i[t]=p*a[s+t]+f*a[o+t]+_*a[q+t]+g*a[m+t];return i}}class Ir extends Dr{constructor(t,e,l,n){super(t,e,l,n)}interpolate_(t,e,l,n){const i=this.resultBuffer,a=this.sampleValues,r=this.valueSize,q=t*r,o=q-r,s=(l-e)/(n-e),m=1-s;for(let t=0;t!==r;++t)i[t]=a[o+t]*m+a[q+t]*s;return i}}class Br extends Dr{constructor(t,e,l,n){super(t,e,l,n)}interpolate_(t){return this.copySampleValue_(t-1)}}class Or{constructor(t,e,l,n){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Pr.convertArray(e,this.TimeBufferType),this.values=Pr.convertArray(l,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let l;if(e.toJSON!==this.toJSON)l=e.toJSON(t);else{l={name:t.name,times:Pr.convertArray(t.times,Array),values:Pr.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(l.interpolation=e)}return l.type=t.ValueTypeName,l}InterpolantFactoryMethodDiscrete(t){return new Br(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Ir(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Nr(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case z:e=this.InterpolantFactoryMethodDiscrete;break;case S:e=this.InterpolantFactoryMethodLinear;break;case E:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return z;case this.InterpolantFactoryMethodLinear:return S;case this.InterpolantFactoryMethodSmooth:return E}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let l=0,n=e.length;l!==n;++l)e[l]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let l=0,n=e.length;l!==n;++l)e[l]*=t}return this}trim(t,e){const l=this.times,n=l.length;let i=0,a=n-1;for(;i!==n&&l[i]<t;)++i;for(;-1!==a&&l[a]>e;)--a;if(++a,0!==i||a!==n){i>=a&&(a=Math.max(a,1),i=a-1);const t=this.getValueSize();this.times=Pr.arraySlice(l,i,a),this.values=Pr.arraySlice(this.values,i*t,a*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const l=this.times,n=this.values,i=l.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let a=null;for(let e=0;e!==i;e++){const n=l[e];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,n),t=!1;break}if(null!==a&&a>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,n,a),t=!1;break}a=n}if(void 0!==n&&Pr.isTypedArray(n))for(let e=0,l=n.length;e!==l;++e){const l=n[e];if(isNaN(l)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,l),t=!1;break}}return t}optimize(){const t=Pr.arraySlice(this.times),e=Pr.arraySlice(this.values),l=this.getValueSize(),n=this.getInterpolation()===E,i=t.length-1;let a=1;for(let r=1;r<i;++r){let i=!1;const q=t[r];if(q!==t[r+1]&&(1!==r||q!==t[0]))if(n)i=!0;else{const t=r*l,n=t-l,a=t+l;for(let r=0;r!==l;++r){const l=e[t+r];if(l!==e[n+r]||l!==e[a+r]){i=!0;break}}}if(i){if(r!==a){t[a]=t[r];const n=r*l,i=a*l;for(let t=0;t!==l;++t)e[i+t]=e[n+t]}++a}}if(i>0){t[a]=t[i];for(let t=i*l,n=a*l,r=0;r!==l;++r)e[n+r]=e[t+r];++a}return a!==t.length?(this.times=Pr.arraySlice(t,0,a),this.values=Pr.arraySlice(e,0,a*l)):(this.times=t,this.values=e),this}clone(){const t=Pr.arraySlice(this.times,0),e=Pr.arraySlice(this.values,0),l=new(0,this.constructor)(this.name,t,e);return l.createInterpolant=this.createInterpolant,l}}Or.prototype.TimeBufferType=Float32Array,Or.prototype.ValueBufferType=Float32Array,Or.prototype.DefaultInterpolation=S;class Fr extends Or{}Fr.prototype.ValueTypeName="bool",Fr.prototype.ValueBufferType=Array,Fr.prototype.DefaultInterpolation=z,Fr.prototype.InterpolantFactoryMethodLinear=void 0,Fr.prototype.InterpolantFactoryMethodSmooth=void 0;class Hr extends Or{}Hr.prototype.ValueTypeName="color";class Ur extends Or{}Ur.prototype.ValueTypeName="number";class Gr extends Dr{constructor(t,e,l,n){super(t,e,l,n)}interpolate_(t,e,l,n){const i=this.resultBuffer,a=this.sampleValues,r=this.valueSize,q=(l-e)/(n-e);let o=t*r;for(let t=o+r;o!==t;o+=4)at.slerpFlat(i,0,a,o-r,a,o,q);return i}}class Vr extends Or{InterpolantFactoryMethodLinear(t){return new Gr(this.times,this.values,this.getValueSize(),t)}}Vr.prototype.ValueTypeName="quaternion",Vr.prototype.DefaultInterpolation=S,Vr.prototype.InterpolantFactoryMethodSmooth=void 0;class kr extends Or{}kr.prototype.ValueTypeName="string",kr.prototype.ValueBufferType=Array,kr.prototype.DefaultInterpolation=z,kr.prototype.InterpolantFactoryMethodLinear=void 0,kr.prototype.InterpolantFactoryMethodSmooth=void 0;class Wr extends Or{}Wr.prototype.ValueTypeName="vector";class jr{constructor(t,e=-1,l,n=2500){this.name=t,this.tracks=l,this.duration=e,this.blendMode=n,this.uuid=k(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],l=t.tracks,n=1/(t.fps||1);for(let t=0,i=l.length;t!==i;++t)e.push(Xr(l[t]).scale(n));const i=new this(t.name,t.duration,e,t.blendMode);return i.uuid=t.uuid,i}static toJSON(t){const e=[],l=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,n=l.length;t!==n;++t)e.push(Or.toJSON(l[t]));return n}static CreateFromMorphTargetSequence(t,e,l,n){const i=e.length,a=[];for(let t=0;t<i;t++){let r=[],q=[];r.push((t+i-1)%i,t,(t+1)%i),q.push(0,1,0);const o=Pr.getKeyframeOrder(r);r=Pr.sortedArray(r,1,o),q=Pr.sortedArray(q,1,o),n||0!==r[0]||(r.push(i),q.push(q[0])),a.push(new Ur(".morphTargetInfluences["+e[t].name+"]",r,q).scale(1/l))}return new this(t,-1,a)}static findByName(t,e){let l=t;if(!Array.isArray(t)){const e=t;l=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<l.length;t++)if(l[t].name===e)return l[t];return null}static CreateClipsFromMorphTargetSequences(t,e,l){const n={},i=/^([\w-]*?)([\d]+)$/;for(let e=0,l=t.length;e<l;e++){const l=t[e],a=l.name.match(i);if(a&&a.length>1){const t=a[1];let e=n[t];e||(n[t]=e=[]),e.push(l)}}const a=[];for(const t in n)a.push(this.CreateFromMorphTargetSequence(t,n[t],e,l));return a}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const l=function(t,e,l,n,i){if(0!==l.length){const a=[],r=[];Pr.flattenJSON(l,a,r,n),0!==a.length&&i.push(new t(e,a,r))}},n=[],i=t.name||"default",a=t.fps||30,r=t.blendMode;let q=t.length||-1;const o=t.hierarchy||[];for(let t=0;t<o.length;t++){const i=o[t].keys;if(i&&0!==i.length)if(i[0].morphTargets){const t={};let e;for(e=0;e<i.length;e++)if(i[e].morphTargets)for(let l=0;l<i[e].morphTargets.length;l++)t[i[e].morphTargets[l]]=-1;for(const l in t){const t=[],a=[];for(let n=0;n!==i[e].morphTargets.length;++n){const n=i[e];t.push(n.time),a.push(n.morphTarget===l?1:0)}n.push(new Ur(".morphTargetInfluence["+l+"]",t,a))}q=t.length*(a||1)}else{const a=".bones["+e[t].name+"]";l(Wr,a+".position",i,"pos",n),l(Vr,a+".quaternion",i,"rot",n),l(Wr,a+".scale",i,"scl",n)}}if(0===n.length)return null;return new this(i,q,n,r)}resetDuration(){let t=0;for(let e=0,l=this.tracks.length;e!==l;++e){const l=this.tracks[e];t=Math.max(t,l.times[l.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Xr(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Ur;case"vector":case"vector2":case"vector3":case"vector4":return Wr;case"color":return Hr;case"quaternion":return Vr;case"bool":case"boolean":return Fr;case"string":return kr}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],l=[];Pr.flattenJSON(t.keys,e,l,"value"),t.times=e,t.values=l}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const Yr={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class Zr{constructor(t,e,l){const n=this;let i,a=!1,r=0,q=0;const o=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=l,this.itemStart=function(t){q++,!1===a&&void 0!==n.onStart&&n.onStart(t,r,q),a=!0},this.itemEnd=function(t){r++,void 0!==n.onProgress&&n.onProgress(t,r,q),r===q&&(a=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return i?i(t):t},this.setURLModifier=function(t){return i=t,this},this.addHandler=function(t,e){return o.push(t,e),this},this.removeHandler=function(t){const e=o.indexOf(t);return-1!==e&&o.splice(e,2),this},this.getHandler=function(t){for(let e=0,l=o.length;e<l;e+=2){const l=o[e],n=o[e+1];if(l.global&&(l.lastIndex=0),l.test(t))return n}return null}}}const Jr=new Zr;class Qr{constructor(t){this.manager=void 0!==t?t:Jr,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const l=this;return new Promise((function(n,i){l.load(t,n,e,i)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const Kr={};class $r extends Qr{constructor(t){super(t)}load(t,e,l,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const i=this,a=Yr.get(t);if(void 0!==a)return i.manager.itemStart(t),setTimeout((function(){e&&e(a),i.manager.itemEnd(t)}),0),a;if(void 0!==Kr[t])return void Kr[t].push({onLoad:e,onProgress:l,onError:n});const r=t.match(/^data:(.*?)(;base64)?,(.*)$/);let q;if(r){const l=r[1],a=!!r[2];let q=r[3];q=decodeURIComponent(q),a&&(q=atob(q));try{let n;const a=(this.responseType||"").toLowerCase();switch(a){case"arraybuffer":case"blob":const t=new Uint8Array(q.length);for(let e=0;e<q.length;e++)t[e]=q.charCodeAt(e);n="blob"===a?new Blob([t.buffer],{type:l}):t.buffer;break;case"document":const e=new DOMParser;n=e.parseFromString(q,l);break;case"json":n=JSON.parse(q);break;default:n=q}setTimeout((function(){e&&e(n),i.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){n&&n(e),i.manager.itemError(t),i.manager.itemEnd(t)}),0)}}else{Kr[t]=[],Kr[t].push({onLoad:e,onProgress:l,onError:n}),q=new XMLHttpRequest,q.open("GET",t,!0),q.addEventListener("load",(function(e){const l=this.response,n=Kr[t];if(delete Kr[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),Yr.add(t,l);for(let t=0,e=n.length;t<e;t++){const e=n[t];e.onLoad&&e.onLoad(l)}i.manager.itemEnd(t)}else{for(let t=0,l=n.length;t<l;t++){const l=n[t];l.onError&&l.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}}),!1),q.addEventListener("progress",(function(e){const l=Kr[t];for(let t=0,n=l.length;t<n;t++){const n=l[t];n.onProgress&&n.onProgress(e)}}),!1),q.addEventListener("error",(function(e){const l=Kr[t];delete Kr[t];for(let t=0,n=l.length;t<n;t++){const n=l[t];n.onError&&n.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}),!1),q.addEventListener("abort",(function(e){const l=Kr[t];delete Kr[t];for(let t=0,n=l.length;t<n;t++){const n=l[t];n.onError&&n.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(q.responseType=this.responseType),void 0!==this.withCredentials&&(q.withCredentials=this.withCredentials),q.overrideMimeType&&q.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const t in this.requestHeader)q.setRequestHeader(t,this.requestHeader[t]);q.send(null)}return i.manager.itemStart(t),q}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class tq extends Qr{constructor(t){super(t)}load(t,e,l,n){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const i=this,a=Yr.get(t);if(void 0!==a)return i.manager.itemStart(t),setTimeout((function(){e&&e(a),i.manager.itemEnd(t)}),0),a;const r=document.createElementNS("http://www.w3.org/1999/xhtml","img");function q(){r.removeEventListener("load",q,!1),r.removeEventListener("error",o,!1),Yr.add(t,this),e&&e(this),i.manager.itemEnd(t)}function o(e){r.removeEventListener("load",q,!1),r.removeEventListener("error",o,!1),n&&n(e),i.manager.itemError(t),i.manager.itemEnd(t)}return r.addEventListener("load",q,!1),r.addEventListener("error",o,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(r.crossOrigin=this.crossOrigin),i.manager.itemStart(t),r.src=t,r}}class eq extends Qr{constructor(t){super(t)}load(t,e,l,n){const i=new bl,a=new tq(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let r=0;function q(l){a.load(t[l],(function(t){i.images[l]=t,r++,6===r&&(i.needsUpdate=!0,e&&e(i))}),void 0,n)}for(let e=0;e<t.length;++e)q(e);return i}}class lq extends Qr{constructor(t){super(t)}load(t,e,l,n){const i=new et,a=new tq(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,(function(l){i.image=l;const n=t.search(/\.jpe?g($|\?)/i)>0||0===t.search(/^data\:image\/jpeg/);i.format=n?y:w,i.needsUpdate=!0,void 0!==e&&e(i)}),l,n),i}}class nq{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const l=this.getUtoTmapping(t);return this.getPoint(l,e)}getPoints(t=5){const e=[];for(let l=0;l<=t;l++)e.push(this.getPoint(l/t));return e}getSpacedPoints(t=5){const e=[];for(let l=0;l<=t;l++)e.push(this.getPointAt(l/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let l,n=this.getPoint(0),i=0;e.push(0);for(let a=1;a<=t;a++)l=this.getPoint(a/t),i+=l.distanceTo(n),e.push(i),n=l;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const l=this.getLengths();let n=0;const i=l.length;let a;a=e||t*l[i-1];let r,q=0,o=i-1;for(;q<=o;)if(n=Math.floor(q+(o-q)/2),r=l[n]-a,r<0)q=n+1;else{if(!(r>0)){o=n;break}o=n-1}if(n=o,l[n]===a)return n/(i-1);const s=l[n];return(n+(a-s)/(l[n+1]-s))/(i-1)}getTangent(t,e){const l=1e-4;let n=t-l,i=t+l;n<0&&(n=0),i>1&&(i=1);const a=this.getPoint(n),r=this.getPoint(i),q=e||(a.isVector2?new J:new rt);return q.copy(r).sub(a).normalize(),q}getTangentAt(t,e){const l=this.getUtoTmapping(t);return this.getTangent(l,e)}computeFrenetFrames(t,e){const l=new rt,n=[],i=[],a=[],r=new rt,q=new Bt;for(let e=0;e<=t;e++){const l=e/t;n[e]=this.getTangentAt(l,new rt),n[e].normalize()}i[0]=new rt,a[0]=new rt;let o=Number.MAX_VALUE;const s=Math.abs(n[0].x),m=Math.abs(n[0].y),h=Math.abs(n[0].z);s<=o&&(o=s,l.set(1,0,0)),m<=o&&(o=m,l.set(0,1,0)),h<=o&&l.set(0,0,1),r.crossVectors(n[0],l).normalize(),i[0].crossVectors(n[0],r),a[0].crossVectors(n[0],i[0]);for(let e=1;e<=t;e++){if(i[e]=i[e-1].clone(),a[e]=a[e-1].clone(),r.crossVectors(n[e-1],n[e]),r.length()>Number.EPSILON){r.normalize();const t=Math.acos(W(n[e-1].dot(n[e]),-1,1));i[e].applyMatrix4(q.makeRotationAxis(r,t))}a[e].crossVectors(n[e],i[e])}if(!0===e){let e=Math.acos(W(i[0].dot(i[t]),-1,1));e/=t,n[0].dot(r.crossVectors(i[0],i[t]))>0&&(e=-e);for(let l=1;l<=t;l++)i[l].applyMatrix4(q.makeRotationAxis(n[l],e*l)),a[l].crossVectors(n[l],i[l])}return{tangents:n,normals:i,binormals:a}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class iq extends nq{constructor(t=0,e=0,l=1,n=1,i=0,a=2*Math.PI,r=!1,q=0){super(),this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=l,this.yRadius=n,this.aStartAngle=i,this.aEndAngle=a,this.aClockwise=r,this.aRotation=q}getPoint(t,e){const l=e||new J,n=2*Math.PI;let i=this.aEndAngle-this.aStartAngle;const a=Math.abs(i)<Number.EPSILON;for(;i<0;)i+=n;for(;i>n;)i-=n;i<Number.EPSILON&&(i=a?0:n),!0!==this.aClockwise||a||(i===n?i=-n:i-=n);const r=this.aStartAngle+t*i;let q=this.aX+this.xRadius*Math.cos(r),o=this.aY+this.yRadius*Math.sin(r);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),l=q-this.aX,n=o-this.aY;q=l*t-n*e+this.aX,o=l*e+n*t+this.aY}return l.set(q,o)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}iq.prototype.isEllipseCurve=!0;class aq extends iq{constructor(t,e,l,n,i,a){super(t,e,l,l,n,i,a),this.type="ArcCurve"}}function rq(){let t=0,e=0,l=0,n=0;function i(i,a,r,q){t=i,e=r,l=-3*i+3*a-2*r-q,n=2*i-2*a+r+q}return{initCatmullRom:function(t,e,l,n,a){i(e,l,a*(l-t),a*(n-e))},initNonuniformCatmullRom:function(t,e,l,n,a,r,q){let o=(e-t)/a-(l-t)/(a+r)+(l-e)/r,s=(l-e)/r-(n-e)/(r+q)+(n-l)/q;o*=r,s*=r,i(e,l,o,s)},calc:function(i){const a=i*i;return t+e*i+l*a+n*(a*i)}}}aq.prototype.isArcCurve=!0;const qq=new rt,oq=new rq,sq=new rq,mq=new rq;class hq extends nq{constructor(t=[],e=!1,l="centripetal",n=.5){super(),this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=l,this.tension=n}getPoint(t,e=new rt){const l=e,n=this.points,i=n.length,a=(i-(this.closed?0:1))*t;let r,q,o=Math.floor(a),s=a-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/i)+1)*i:0===s&&o===i-1&&(o=i-2,s=1),this.closed||o>0?r=n[(o-1)%i]:(qq.subVectors(n[0],n[1]).add(n[0]),r=qq);const m=n[o%i],h=n[(o+1)%i];if(this.closed||o+2<i?q=n[(o+2)%i]:(qq.subVectors(n[i-1],n[i-2]).add(n[i-1]),q=qq),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(r.distanceToSquared(m),t),l=Math.pow(m.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(q),t);l<1e-4&&(l=1),e<1e-4&&(e=l),n<1e-4&&(n=l),oq.initNonuniformCatmullRom(r.x,m.x,h.x,q.x,e,l,n),sq.initNonuniformCatmullRom(r.y,m.y,h.y,q.y,e,l,n),mq.initNonuniformCatmullRom(r.z,m.z,h.z,q.z,e,l,n)}else"catmullrom"===this.curveType&&(oq.initCatmullRom(r.x,m.x,h.x,q.x,this.tension),sq.initCatmullRom(r.y,m.y,h.y,q.y,this.tension),mq.initCatmullRom(r.z,m.z,h.z,q.z,this.tension));return l.set(oq.calc(s),sq.calc(s),mq.calc(s)),l}copy(t){super.copy(t),this.points=[];for(let e=0,l=t.points.length;e<l;e++){const l=t.points[e];this.points.push(l.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,l=this.points.length;e<l;e++){const l=this.points[e];t.points.push(l.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,l=t.points.length;e<l;e++){const l=t.points[e];this.points.push((new rt).fromArray(l))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function cq(t,e,l,n,i){const a=.5*(n-e),r=.5*(i-l),q=t*t;return(2*l-2*n+a+r)*(t*q)+(-3*l+3*n-2*a-r)*q+a*t+l}function uq(t,e,l,n){return function(t,e){const l=1-t;return l*l*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,l)+function(t,e){return t*t*e}(t,n)}function dq(t,e,l,n,i){return function(t,e){const l=1-t;return l*l*l*e}(t,e)+function(t,e){const l=1-t;return 3*l*l*t*e}(t,l)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,i)}hq.prototype.isCatmullRomCurve3=!0;class xq extends nq{constructor(t=new J,e=new J,l=new J,n=new J){super(),this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=l,this.v3=n}getPoint(t,e=new J){const l=e,n=this.v0,i=this.v1,a=this.v2,r=this.v3;return l.set(dq(t,n.x,i.x,a.x,r.x),dq(t,n.y,i.y,a.y,r.y)),l}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}xq.prototype.isCubicBezierCurve=!0;class pq extends nq{constructor(t=new rt,e=new rt,l=new rt,n=new rt){super(),this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=l,this.v3=n}getPoint(t,e=new rt){const l=e,n=this.v0,i=this.v1,a=this.v2,r=this.v3;return l.set(dq(t,n.x,i.x,a.x,r.x),dq(t,n.y,i.y,a.y,r.y),dq(t,n.z,i.z,a.z,r.z)),l}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}pq.prototype.isCubicBezierCurve3=!0;class fq extends nq{constructor(t=new J,e=new J){super(),this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new J){const l=e;return 1===t?l.copy(this.v2):(l.copy(this.v2).sub(this.v1),l.multiplyScalar(t).add(this.v1)),l}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const l=e||new J;return l.copy(this.v2).sub(this.v1).normalize(),l}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}fq.prototype.isLineCurve=!0;class _q extends nq{constructor(t=new J,e=new J,l=new J){super(),this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=l}getPoint(t,e=new J){const l=e,n=this.v0,i=this.v1,a=this.v2;return l.set(uq(t,n.x,i.x,a.x),uq(t,n.y,i.y,a.y)),l}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}_q.prototype.isQuadraticBezierCurve=!0;class gq extends nq{constructor(t=new rt,e=new rt,l=new rt){super(),this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=l}getPoint(t,e=new rt){const l=e,n=this.v0,i=this.v1,a=this.v2;return l.set(uq(t,n.x,i.x,a.x),uq(t,n.y,i.y,a.y),uq(t,n.z,i.z,a.z)),l}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}gq.prototype.isQuadraticBezierCurve3=!0;class vq extends nq{constructor(t=[]){super(),this.type="SplineCurve",this.points=t}getPoint(t,e=new J){const l=e,n=this.points,i=(n.length-1)*t,a=Math.floor(i),r=i-a,q=n[0===a?a:a-1],o=n[a],s=n[a>n.length-2?n.length-1:a+1],m=n[a>n.length-3?n.length-1:a+2];return l.set(cq(r,q.x,o.x,s.x,m.x),cq(r,q.y,o.y,s.y,m.y)),l}copy(t){super.copy(t),this.points=[];for(let e=0,l=t.points.length;e<l;e++){const l=t.points[e];this.points.push(l.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,l=this.points.length;e<l;e++){const l=this.points[e];t.points.push(l.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,l=t.points.length;e<l;e++){const l=t.points[e];this.points.push((new J).fromArray(l))}return this}}vq.prototype.isSplineCurve=!0;var yq=Object.freeze({__proto__:null,ArcCurve:aq,CatmullRomCurve3:hq,CubicBezierCurve:xq,CubicBezierCurve3:pq,EllipseCurve:iq,LineCurve:fq,LineCurve3:class extends nq{constructor(t=new rt,e=new rt){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new rt){const l=e;return 1===t?l.copy(this.v2):(l.copy(this.v2).sub(this.v1),l.multiplyScalar(t).add(this.v1)),l}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}},QuadraticBezierCurve:_q,QuadraticBezierCurve3:gq,SplineCurve:vq});class wq extends nq{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new fq(e,t))}getPoint(t){const e=t*this.getLength(),l=this.getCurveLengths();let n=0;for(;n<l.length;){if(l[n]>=e){const t=l[n]-e,i=this.curves[n],a=i.getLength(),r=0===a?0:1-t/a;return i.getPointAt(r)}n++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let l=0,n=this.curves.length;l<n;l++)e+=this.curves[l].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let l=0;l<=t;l++)e.push(this.getPoint(l/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let l;for(let n=0,i=this.curves;n<i.length;n++){const a=i[n],r=a&&a.isEllipseCurve?2*t:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?t*a.points.length:t,q=a.getPoints(r);for(let t=0;t<q.length;t++){const n=q[t];l&&l.equals(n)||(e.push(n),l=n)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,l=t.curves.length;e<l;e++){const l=t.curves[e];this.curves.push(l.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,l=this.curves.length;e<l;e++){const l=this.curves[e];t.curves.push(l.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,l=t.curves.length;e<l;e++){const l=t.curves[e];this.curves.push((new yq[l.type]).fromJSON(l))}return this}}class bq extends wq{constructor(t){super(),this.type="Path",this.currentPoint=new J,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,l=t.length;e<l;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const l=new fq(this.currentPoint.clone(),new J(t,e));return this.curves.push(l),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,l,n){const i=new _q(this.currentPoint.clone(),new J(t,e),new J(l,n));return this.curves.push(i),this.currentPoint.set(l,n),this}bezierCurveTo(t,e,l,n,i,a){const r=new xq(this.currentPoint.clone(),new J(t,e),new J(l,n),new J(i,a));return this.curves.push(r),this.currentPoint.set(i,a),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),l=new vq(e);return this.curves.push(l),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,l,n,i,a){const r=this.currentPoint.x,q=this.currentPoint.y;return this.absarc(t+r,e+q,l,n,i,a),this}absarc(t,e,l,n,i,a){return this.absellipse(t,e,l,l,n,i,a),this}ellipse(t,e,l,n,i,a,r,q){const o=this.currentPoint.x,s=this.currentPoint.y;return this.absellipse(t+o,e+s,l,n,i,a,r,q),this}absellipse(t,e,l,n,i,a,r,q){const o=new iq(t,e,l,n,i,a,r,q);if(this.curves.length>0){const t=o.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(o);const s=o.getPoint(1);return this.currentPoint.copy(s),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Mq extends bq{constructor(t){super(t),this.uuid=k(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let l=0,n=this.holes.length;l<n;l++)e[l]=this.holes[l].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,l=t.holes.length;e<l;e++){const l=t.holes[e];this.holes.push(l.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,l=this.holes.length;e<l;e++){const l=this.holes[e];t.holes.push(l.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,l=t.holes.length;e<l;e++){const l=t.holes[e];this.holes.push((new bq).fromJSON(l))}return this}}class zq extends oe{constructor(t,e=1){super(),this.type="Light",this.color=new Ce(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}zq.prototype.isLight=!0;class Sq extends zq{constructor(t,e,l){super(t,l),this.type="HemisphereLight",this.position.copy(oe.DefaultUp),this.updateMatrix(),this.groundColor=new Ce(e)}copy(t){return zq.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}Sq.prototype.isHemisphereLight=!0;const Eq=new Bt,Tq=new rt,Lq=new rt;class Aq{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new J(512,512),this.map=null,this.mapPass=null,this.matrix=new Bt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new El,this._frameExtents=new J(1,1),this._viewportCount=1,this._viewports=[new nt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,l=this.matrix;Tq.setFromMatrixPosition(t.matrixWorld),e.position.copy(Tq),Lq.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(Lq),e.updateMatrixWorld(),Eq.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Eq),l.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),l.multiply(e.projectionMatrix),l.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class Rq extends Aq{constructor(){super(new vl(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,l=2*V*t.angle*this.focus,n=this.mapSize.width/this.mapSize.height,i=t.distance||e.far;l===e.fov&&n===e.aspect&&i===e.far||(e.fov=l,e.aspect=n,e.far=i,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}Rq.prototype.isSpotLightShadow=!0;class Cq extends zq{constructor(t,e,l=0,n=Math.PI/3,i=0,a=1){super(t,e),this.type="SpotLight",this.position.copy(oe.DefaultUp),this.updateMatrix(),this.target=new oe,this.distance=l,this.angle=n,this.penumbra=i,this.decay=a,this.shadow=new Rq}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Cq.prototype.isSpotLight=!0;const Pq=new Bt,Dq=new rt,Nq=new rt;class Iq extends Aq{constructor(){super(new vl(90,1,.5,500)),this._frameExtents=new J(4,2),this._viewportCount=6,this._viewports=[new nt(2,1,1,1),new nt(0,1,1,1),new nt(3,1,1,1),new nt(1,1,1,1),new nt(3,0,1,1),new nt(1,0,1,1)],this._cubeDirections=[new rt(1,0,0),new rt(-1,0,0),new rt(0,0,1),new rt(0,0,-1),new rt(0,1,0),new rt(0,-1,0)],this._cubeUps=[new rt(0,1,0),new rt(0,1,0),new rt(0,1,0),new rt(0,1,0),new rt(0,0,1),new rt(0,0,-1)]}updateMatrices(t,e=0){const l=this.camera,n=this.matrix,i=t.distance||l.far;i!==l.far&&(l.far=i,l.updateProjectionMatrix()),Dq.setFromMatrixPosition(t.matrixWorld),l.position.copy(Dq),Nq.copy(l.position),Nq.add(this._cubeDirections[e]),l.up.copy(this._cubeUps[e]),l.lookAt(Nq),l.updateMatrixWorld(),n.makeTranslation(-Dq.x,-Dq.y,-Dq.z),Pq.multiplyMatrices(l.projectionMatrix,l.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Pq)}}Iq.prototype.isPointLightShadow=!0;class Bq extends zq{constructor(t,e,l=0,n=1){super(t,e),this.type="PointLight",this.distance=l,this.decay=n,this.shadow=new Iq}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}Bq.prototype.isPointLight=!0;class Oq extends gl{constructor(t=-1,e=1,l=1,n=-1,i=.1,a=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=l,this.bottom=n,this.near=i,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,l,n,i,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=l,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),l=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let i=l-t,a=l+t,r=n+e,q=n-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;i+=t*this.view.offsetX,a=i+t*this.view.width,r-=e*this.view.offsetY,q=r-e*this.view.height}this.projectionMatrix.makeOrthographic(i,a,r,q,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}Oq.prototype.isOrthographicCamera=!0;class Fq extends Aq{constructor(){super(new Oq(-5,5,5,-5,.5,500))}}Fq.prototype.isDirectionalLightShadow=!0;class Hq extends zq{constructor(t,e){super(t,e),this.type="DirectionalLight",this.position.copy(oe.DefaultUp),this.updateMatrix(),this.target=new oe,this.shadow=new Fq}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Hq.prototype.isDirectionalLight=!0;class Uq extends zq{constructor(t,e){super(t,e),this.type="AmbientLight"}}Uq.prototype.isAmbientLight=!0;class Gq extends zq{constructor(t,e,l=10,n=10){super(t,e),this.type="RectAreaLight",this.width=l,this.height=n}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}Gq.prototype.isRectAreaLight=!0;class Vq{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new rt)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const l=t.x,n=t.y,i=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.282095),e.addScaledVector(a[1],.488603*n),e.addScaledVector(a[2],.488603*i),e.addScaledVector(a[3],.488603*l),e.addScaledVector(a[4],l*n*1.092548),e.addScaledVector(a[5],n*i*1.092548),e.addScaledVector(a[6],.315392*(3*i*i-1)),e.addScaledVector(a[7],l*i*1.092548),e.addScaledVector(a[8],.546274*(l*l-n*n)),e}getIrradianceAt(t,e){const l=t.x,n=t.y,i=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.886227),e.addScaledVector(a[1],1.023328*n),e.addScaledVector(a[2],1.023328*i),e.addScaledVector(a[3],1.023328*l),e.addScaledVector(a[4],.858086*l*n),e.addScaledVector(a[5],.858086*n*i),e.addScaledVector(a[6],.743125*i*i-.247708),e.addScaledVector(a[7],.858086*l*i),e.addScaledVector(a[8],.429043*(l*l-n*n)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let l=0;l<9;l++)this.coefficients[l].addScaledVector(t.coefficients[l],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let l=0;l<9;l++)this.coefficients[l].lerp(t.coefficients[l],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const l=this.coefficients;for(let n=0;n<9;n++)l[n].fromArray(t,e+3*n);return this}toArray(t=[],e=0){const l=this.coefficients;for(let n=0;n<9;n++)l[n].toArray(t,e+3*n);return t}static getBasisAt(t,e){const l=t.x,n=t.y,i=t.z;e[0]=.282095,e[1]=.488603*n,e[2]=.488603*i,e[3]=.488603*l,e[4]=1.092548*l*n,e[5]=1.092548*n*i,e[6]=.315392*(3*i*i-1),e[7]=1.092548*l*i,e[8]=.546274*(l*l-n*n)}}Vq.prototype.isSphericalHarmonics3=!0;class kq extends zq{constructor(t=new Vq,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}kq.prototype.isLightProbe=!0;class Wq{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let l=0,n=t.length;l<n;l++)e+=String.fromCharCode(t[l]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}}class jq extends Ye{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}jq.prototype.isInstancedBufferGeometry=!0;class Xq extends Ie{constructor(t,e,l,n){"number"==typeof l&&(n=l,l=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(t,e,l),this.meshPerAttribute=n||1}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}Xq.prototype.isInstancedBufferAttribute=!0;(class extends Qr{constructor(t){super(t),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,l,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const i=this,a=Yr.get(t);if(void 0!==a)return i.manager.itemStart(t),setTimeout((function(){e&&e(a),i.manager.itemEnd(t)}),0),a;const r={};r.credentials="anonymous"===this.crossOrigin?"same-origin":"include",r.headers=this.requestHeader,fetch(t,r).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(i.options,{colorSpaceConversion:"none"}))})).then((function(l){Yr.add(t,l),e&&e(l),i.manager.itemEnd(t)})).catch((function(e){n&&n(e),i.manager.itemError(t),i.manager.itemEnd(t)})),i.manager.itemStart(t)}}).prototype.isImageBitmapLoader=!0;class Yq{constructor(){this.type="ShapePath",this.color=new Ce,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new bq,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,l,n){return this.currentPath.quadraticCurveTo(t,e,l,n),this}bezierCurveTo(t,e,l,n,i,a){return this.currentPath.bezierCurveTo(t,e,l,n,i,a),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t,e){function l(t){const e=[];for(let l=0,n=t.length;l<n;l++){const n=t[l],i=new Mq;i.curves=n.curves,e.push(i)}return e}function n(t,e){const l=e.length;let n=!1;for(let i=l-1,a=0;a<l;i=a++){let l=e[i],r=e[a],q=r.x-l.x,o=r.y-l.y;if(Math.abs(o)>Number.EPSILON){if(o<0&&(l=e[a],q=-q,r=e[i],o=-o),t.y<l.y||t.y>r.y)continue;if(t.y===l.y){if(t.x===l.x)return!0}else{const e=o*(t.x-l.x)-q*(t.y-l.y);if(0===e)return!0;if(e<0)continue;n=!n}}else{if(t.y!==l.y)continue;if(r.x<=t.x&&t.x<=l.x||l.x<=t.x&&t.x<=r.x)return!0}}return n}const i=xr.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===e)return l(a);let r,q,o;const s=[];if(1===a.length)return q=a[0],o=new Mq,o.curves=q.curves,s.push(o),s;let m=!i(a[0].getPoints());m=t?!m:m;const h=[],c=[];let u,d,x=[],p=0;c[p]=void 0,x[p]=[];for(let e=0,l=a.length;e<l;e++)q=a[e],u=q.getPoints(),r=i(u),r=t?!r:r,r?(!m&&c[p]&&p++,c[p]={s:new Mq,p:u},c[p].s.curves=q.curves,m&&p++,x[p]=[]):x[p].push({h:q,p:u[0]});if(!c[0])return l(a);if(c.length>1){let t=!1;const e=[];for(let t=0,e=c.length;t<e;t++)h[t]=[];for(let l=0,i=c.length;l<i;l++){const i=x[l];for(let a=0;a<i.length;a++){const r=i[a];let q=!0;for(let i=0;i<c.length;i++)n(r.p,c[i].p)&&(l!==i&&e.push({froms:l,tos:i,hole:a}),q?(q=!1,h[i].push(r)):t=!0);q&&h[l].push(r)}}e.length>0&&(t||(x=h))}for(let t=0,e=c.length;t<e;t++){o=c[t].s,s.push(o),d=x[t];for(let t=0,e=d.length;t<e;t++)o.holes.push(d[t].h)}return s}}class Zq{constructor(t){this.type="Font",this.data=t}generateShapes(t,e=100){const l=[],n=function(t,e,l){const n=Array.from(t),i=e/l.resolution,a=(l.boundingBox.yMax-l.boundingBox.yMin+l.underlineThickness)*i,r=[];let q=0,o=0;for(let t=0;t<n.length;t++){const e=n[t];if("\n"===e)q=0,o-=a;else{const t=Jq(e,i,q,o,l);q+=t.offsetX,r.push(t.path)}}return r}(t,e,this.data);for(let t=0,e=n.length;t<e;t++)Array.prototype.push.apply(l,n[t].toShapes());return l}}function Jq(t,e,l,n,i){const a=i.glyphs[t]||i.glyphs["?"];if(!a)return void console.error('THREE.Font: character "'+t+'" does not exists in font family '+i.familyName+".");const r=new Yq;let q,o,s,m,h,c,u,d;if(a.o){const t=a._cachedOutline||(a._cachedOutline=a.o.split(" "));for(let i=0,a=t.length;i<a;){switch(t[i++]){case"m":q=t[i++]*e+l,o=t[i++]*e+n,r.moveTo(q,o);break;case"l":q=t[i++]*e+l,o=t[i++]*e+n,r.lineTo(q,o);break;case"q":s=t[i++]*e+l,m=t[i++]*e+n,h=t[i++]*e+l,c=t[i++]*e+n,r.quadraticCurveTo(h,c,s,m);break;case"b":s=t[i++]*e+l,m=t[i++]*e+n,h=t[i++]*e+l,c=t[i++]*e+n,u=t[i++]*e+l,d=t[i++]*e+n,r.bezierCurveTo(h,c,u,d,s,m)}}}return{offsetX:a.ha*e,path:r}}Zq.prototype.isFont=!0;let Qq;const Kq=function(){return void 0===Qq&&(Qq=new(window.AudioContext||window.webkitAudioContext)),Qq};class $q extends Qr{constructor(t){super(t)}load(t,e,l,n){const i=this,a=new $r(this.manager);a.setResponseType("arraybuffer"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(l){try{const t=l.slice(0);Kq().decodeAudioData(t,(function(t){e(t)}))}catch(e){n?n(e):console.error(e),i.manager.itemError(t)}}),l,n)}}(class extends kq{constructor(t,e,l=1){super(void 0,l);const n=(new Ce).set(t),i=(new Ce).set(e),a=new rt(n.r,n.g,n.b),r=new rt(i.r,i.g,i.b),q=Math.sqrt(Math.PI),o=q*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(r).multiplyScalar(q),this.sh.coefficients[1].copy(a).sub(r).multiplyScalar(o)}}).prototype.isHemisphereLightProbe=!0;(class extends kq{constructor(t,e=1){super(void 0,e);const l=(new Ce).set(t);this.sh.coefficients[0].set(l.r,l.g,l.b).multiplyScalar(2*Math.sqrt(Math.PI))}}).prototype.isAmbientLightProbe=!0;class to extends oe{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}class eo{constructor(t,e,l){let n,i,a;switch(this.binding=t,this.valueSize=l,e){case"quaternion":n=this._slerp,i=this._slerpAdditive,a=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*l),this._workIndex=5;break;case"string":case"bool":n=this._select,i=this._select,a=this._setAdditiveIdentityOther,this.buffer=new Array(5*l);break;default:n=this._lerp,i=this._lerpAdditive,a=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*l)}this._mixBufferRegion=n,this._mixBufferRegionAdditive=i,this._setIdentity=a,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const l=this.buffer,n=this.valueSize,i=t*n+n;let a=this.cumulativeWeight;if(0===a){for(let t=0;t!==n;++t)l[i+t]=l[t];a=e}else{a+=e;const t=e/a;this._mixBufferRegion(l,i,0,t,n)}this.cumulativeWeight=a}accumulateAdditive(t){const e=this.buffer,l=this.valueSize,n=l*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,n,0,t,l),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,l=this.buffer,n=t*e+e,i=this.cumulativeWeight,a=this.cumulativeWeightAdditive,r=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,i<1){const t=e*this._origIndex;this._mixBufferRegion(l,n,t,1-i,e)}a>0&&this._mixBufferRegionAdditive(l,n,this._addIndex*e,1,e);for(let t=e,i=e+e;t!==i;++t)if(l[t]!==l[t+e]){r.setValue(l,n);break}}saveOriginalState(){const t=this.binding,e=this.buffer,l=this.valueSize,n=l*this._origIndex;t.getValue(e,n);for(let t=l,i=n;t!==i;++t)e[t]=e[n+t%l];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let l=t;l<e;l++)this.buffer[l]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let l=0;l<this.valueSize;l++)this.buffer[e+l]=this.buffer[t+l]}_select(t,e,l,n,i){if(n>=.5)for(let n=0;n!==i;++n)t[e+n]=t[l+n]}_slerp(t,e,l,n){at.slerpFlat(t,e,t,e,t,l,n)}_slerpAdditive(t,e,l,n,i){const a=this._workIndex*i;at.multiplyQuaternionsFlat(t,a,t,e,t,l),at.slerpFlat(t,e,t,e,t,a,n)}_lerp(t,e,l,n,i){const a=1-n;for(let r=0;r!==i;++r){const i=e+r;t[i]=t[i]*a+t[l+r]*n}}_lerpAdditive(t,e,l,n,i){for(let a=0;a!==i;++a){const i=e+a;t[i]=t[i]+t[l+a]*n}}}const lo="\\[\\]\\.:\\/",no=new RegExp("[\\[\\]\\.:\\/]","g"),io="[^\\[\\]\\.:\\/]",ao="[^"+lo.replace("\\.","")+"]",ro=/((?:WC+[\/:])*)/.source.replace("WC",io),qo=/(WCOD+)?/.source.replace("WCOD",ao),oo=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",io),so=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",io),mo=new RegExp("^"+ro+qo+oo+so+"$"),ho=["material","materials","bones"];class co{constructor(t,e,l){this.path=e,this.parsedPath=l||co.parseTrackName(e),this.node=co.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,l){return t&&t.isAnimationObjectGroup?new co.Composite(t,e,l):new co(t,e,l)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(no,"")}static parseTrackName(t){const e=mo.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const l={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=l.nodeName&&l.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){const t=l.nodeName.substring(n+1);-1!==ho.indexOf(t)&&(l.nodeName=l.nodeName.substring(0,n),l.objectName=t)}if(null===l.propertyName||0===l.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return l}static findNode(t,e){if(!e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const l=t.skeleton.getBoneByName(e);if(void 0!==l)return l}if(t.children){const l=function(t){for(let n=0;n<t.length;n++){const i=t[n];if(i.name===e||i.uuid===e)return i;const a=l(i.children);if(a)return a}return null},n=l(t.children);if(n)return n}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.node[this.propertyName]}_getValue_array(t,e){const l=this.resolvedProperty;for(let n=0,i=l.length;n!==i;++n)t[e++]=l[n]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const l=this.resolvedProperty;for(let n=0,i=l.length;n!==i;++n)l[n]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const l=this.resolvedProperty;for(let n=0,i=l.length;n!==i;++n)l[n]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const l=this.resolvedProperty;for(let n=0,i=l.length;n!==i;++n)l[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,l=e.objectName,n=e.propertyName;let i=e.propertyIndex;if(t||(t=co.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(l){let n=e.objectIndex;switch(l){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===n){n=e;break}break;default:if(void 0===t[l])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[l]}if(void 0!==n){if(void 0===t[n])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[n]}}const a=t[n];if(void 0===a){const l=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+n+" but it wasn't found.",t)}let r=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?r=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(r=this.Versioning.MatrixWorldNeedsUpdate);let q=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[i]&&(i=t.morphTargetDictionary[i])}q=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=i}else void 0!==a.fromArray&&void 0!==a.toArray?(q=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(q=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=n;this.getValue=this.GetterByBindingType[q],this.setValue=this.SetterByBindingTypeAndVersioning[q][r]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}co.Composite=class{constructor(t,e,l){const n=l||co.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}getValue(t,e){this.bind();const l=this._targetGroup.nCachedObjects_,n=this._bindings[l];void 0!==n&&n.getValue(t,e)}setValue(t,e){const l=this._bindings;for(let n=this._targetGroup.nCachedObjects_,i=l.length;n!==i;++n)l[n].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,l=t.length;e!==l;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,l=t.length;e!==l;++e)t[e].unbind()}},co.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},co.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},co.prototype.GetterByBindingType=[co.prototype._getValue_direct,co.prototype._getValue_array,co.prototype._getValue_arrayElement,co.prototype._getValue_toArray],co.prototype.SetterByBindingTypeAndVersioning=[[co.prototype._setValue_direct,co.prototype._setValue_direct_setNeedsUpdate,co.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[co.prototype._setValue_array,co.prototype._setValue_array_setNeedsUpdate,co.prototype._setValue_array_setMatrixWorldNeedsUpdate],[co.prototype._setValue_arrayElement,co.prototype._setValue_arrayElement_setNeedsUpdate,co.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[co.prototype._setValue_fromArray,co.prototype._setValue_fromArray_setNeedsUpdate,co.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class uo{constructor(t,e,l=null,n=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=l,this.blendMode=n;const i=e.tracks,a=i.length,r=new Array(a),q={endingStart:T,endingEnd:T};for(let t=0;t!==a;++t){const e=i[t].createInterpolant(null);r[t]=e,e.settings=q}this._interpolantSettings=q,this._interpolants=r,this._propertyBindings=new Array(a),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,l){if(t.fadeOut(e),this.fadeIn(e),l){const l=this._clip.duration,n=t._clip.duration,i=n/l,a=l/n;t.warp(1,i,e),this.warp(a,1,e)}return this}crossFadeTo(t,e,l){return t.crossFadeFrom(this,e,l)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,l){const n=this._mixer,i=n.time,a=this.timeScale;let r=this._timeScaleInterpolant;null===r&&(r=n._lendControlInterpolant(),this._timeScaleInterpolant=r);const q=r.parameterPositions,o=r.sampleValues;return q[0]=i,q[1]=i+l,o[0]=t/a,o[1]=e/a,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,l,n){if(!this.enabled)return void this._updateWeight(t);const i=this._startTime;if(null!==i){const n=(t-i)*l;if(n<0||0===l)return;this._startTime=null,e=l*n}e*=this._updateTimeScale(t);const a=this._updateTime(e),r=this._updateWeight(t);if(r>0){const t=this._interpolants,e=this._propertyBindings;switch(this.blendMode){case 2501:for(let l=0,n=t.length;l!==n;++l)t[l].evaluate(a),e[l].accumulateAdditive(r);break;case R:default:for(let l=0,i=t.length;l!==i;++l)t[l].evaluate(a),e[l].accumulate(n,r)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const l=this._weightInterpolant;if(null!==l){const n=l.evaluate(t)[0];e*=n,t>l.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const l=this._timeScaleInterpolant;if(null!==l){e*=l.evaluate(t)[0],t>l.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,l=this.loop;let n=this.time+t,i=this._loopCount;const a=2202===l;if(0===t)return-1===i?n:a&&1==(1&i)?e-n:n;if(2200===l){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(n>=e)n=e;else{if(!(n<0)){this.time=n;break t}n=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===i&&(t>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),n>=e||n<0){const l=Math.floor(n/e);n-=e*l,i+=Math.abs(l);const r=this.repetitions-i;if(r<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,n=t>0?e:0,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===r){const e=t<0;this._setEndings(e,!e,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this.time=n,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:l})}}else this.time=n;if(a&&1==(1&i))return e-n}return n}_setEndings(t,e,l){const n=this._interpolantSettings;l?(n.endingStart=L,n.endingEnd=L):(n.endingStart=t?this.zeroSlopeAtStart?L:T:A,n.endingEnd=e?this.zeroSlopeAtEnd?L:T:A)}_scheduleFading(t,e,l){const n=this._mixer,i=n.time;let a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);const r=a.parameterPositions,q=a.sampleValues;return r[0]=i,q[0]=e,r[1]=i+t,q[1]=l,this}}(class extends H{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const l=t._localRoot||this._root,n=t._clip.tracks,i=n.length,a=t._propertyBindings,r=t._interpolants,q=l.uuid,o=this._bindingsByRootAndName;let s=o[q];void 0===s&&(s={},o[q]=s);for(let t=0;t!==i;++t){const i=n[t],o=i.name;let m=s[o];if(void 0!==m)a[t]=m;else{if(m=a[t],void 0!==m){null===m._cacheIndex&&(++m.referenceCount,this._addInactiveBinding(m,q,o));continue}const n=e&&e._propertyBindings[t].binding.parsedPath;m=new eo(co.create(l,o,n),i.ValueTypeName,i.getValueSize()),++m.referenceCount,this._addInactiveBinding(m,q,o),a[t]=m}r[t].resultBuffer=m.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,l=t._clip.uuid,n=this._actionsByClip[l];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,l,e)}const e=t._propertyBindings;for(let t=0,l=e.length;t!==l;++t){const l=e[t];0==l.useCount++&&(this._lendBinding(l),l.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,l=e.length;t!==l;++t){const l=e[t];0==--l.useCount&&(l.restoreOriginalState(),this._takeBackBinding(l))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,l){const n=this._actions,i=this._actionsByClip;let a=i[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,i[e]=a;else{const e=a.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=n.length,n.push(t),a.actionByRoot[l]=t}_removeInactiveAction(t){const e=this._actions,l=e[e.length-1],n=t._cacheIndex;l._cacheIndex=n,e[n]=l,e.pop(),t._cacheIndex=null;const i=t._clip.uuid,a=this._actionsByClip,r=a[i],q=r.knownActions,o=q[q.length-1],s=t._byClipCacheIndex;o._byClipCacheIndex=s,q[s]=o,q.pop(),t._byClipCacheIndex=null;delete r.actionByRoot[(t._localRoot||this._root).uuid],0===q.length&&delete a[i],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,l=e.length;t!==l;++t){const l=e[t];0==--l.referenceCount&&this._removeInactiveBinding(l)}}_lendAction(t){const e=this._actions,l=t._cacheIndex,n=this._nActiveActions++,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=l,e[l]=i}_takeBackAction(t){const e=this._actions,l=t._cacheIndex,n=--this._nActiveActions,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=l,e[l]=i}_addInactiveBinding(t,e,l){const n=this._bindingsByRootAndName,i=this._bindings;let a=n[e];void 0===a&&(a={},n[e]=a),a[l]=t,t._cacheIndex=i.length,i.push(t)}_removeInactiveBinding(t){const e=this._bindings,l=t.binding,n=l.rootNode.uuid,i=l.path,a=this._bindingsByRootAndName,r=a[n],q=e[e.length-1],o=t._cacheIndex;q._cacheIndex=o,e[o]=q,e.pop(),delete r[i],0===Object.keys(r).length&&delete a[n]}_lendBinding(t){const e=this._bindings,l=t._cacheIndex,n=this._nActiveBindings++,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=l,e[l]=i}_takeBackBinding(t){const e=this._bindings,l=t._cacheIndex,n=--this._nActiveBindings,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=l,e[l]=i}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let l=t[e];return void 0===l&&(l=new Ir(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),l.__cacheIndex=e,t[e]=l),l}_takeBackControlInterpolant(t){const e=this._controlInterpolants,l=t.__cacheIndex,n=--this._nActiveControlInterpolants,i=e[n];t.__cacheIndex=n,e[n]=t,i.__cacheIndex=l,e[l]=i}clipAction(t,e,l){const n=e||this._root,i=n.uuid;let a="string"==typeof t?jr.findByName(n,t):t;const r=null!==a?a.uuid:t,q=this._actionsByClip[r];let o=null;if(void 0===l&&(l=null!==a?a.blendMode:R),void 0!==q){const t=q.actionByRoot[i];if(void 0!==t&&t.blendMode===l)return t;o=q.knownActions[0],null===a&&(a=o._clip)}if(null===a)return null;const s=new uo(this,a,e,l);return this._bindAction(s,o),this._addInactiveAction(s,r,i),s}existingAction(t,e){const l=e||this._root,n=l.uuid,i="string"==typeof t?jr.findByName(l,t):t,a=i?i.uuid:t,r=this._actionsByClip[a];return void 0!==r&&r.actionByRoot[n]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,l=this._nActiveActions,n=this.time+=t,i=Math.sign(t),a=this._accuIndex^=1;for(let r=0;r!==l;++r){e[r]._update(n,t,i,a)}const r=this._bindings,q=this._nActiveBindings;for(let t=0;t!==q;++t)r[t].apply(a);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,l=t.uuid,n=this._actionsByClip,i=n[l];if(void 0!==i){const t=i.knownActions;for(let l=0,n=t.length;l!==n;++l){const n=t[l];this._deactivateAction(n);const i=n._cacheIndex,a=e[e.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,a._cacheIndex=i,e[i]=a,e.pop(),this._removeInactiveBindingsForAction(n)}delete n[l]}}uncacheRoot(t){const e=t.uuid,l=this._actionsByClip;for(const t in l){const n=l[t].actionByRoot[e];void 0!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}const n=this._bindingsByRootAndName[e];if(void 0!==n)for(const t in n){const e=n[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const l=this.existingAction(t,e);null!==l&&(this._deactivateAction(l),this._removeInactiveAction(l))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);class xo{constructor(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new xo(void 0===this.value.clone?this.value:this.value.clone())}}(class extends Xi{constructor(t,e,l=1){super(t,e),this.meshPerAttribute=l||1}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}).prototype.isInstancedInterleavedBuffer=!0;const po=new J;class fo{constructor(t=new J(1/0,1/0),e=new J(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,l=t.length;e<l;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const l=po.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(l),this.max.copy(t).add(l),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new J),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new J),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new J),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new J),e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return po.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}fo.prototype.isBox2=!0;(class extends oe{constructor(t){super(),this.material=t,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}).prototype.isImmediateRenderObject=!0;const _o=new rt,go=new Bt,vo=new Bt;function yo(t){const e=[];t&&t.isBone&&e.push(t);for(let l=0;l<t.children.length;l++)e.push.apply(e,yo(t.children[l]));return e}const wo=new Float32Array(1);new Int32Array(wo.buffer);Math.pow(2,8);const bo=[.125,.215,.35,.446,.526,.582],Mo=5+bo.length,zo=new Pe({side:1,depthWrite:!1,depthTest:!1}),{_lodPlanes:So,_sizeLods:Eo,_sigmas:To}=(new cl(new dl,zo),Lo());Math.sqrt(5);function Lo(){const t=[],e=[],l=[];let n=8;for(let i=0;i<Mo;i++){const a=Math.pow(2,n);e.push(a);let r=1/a;i>4?r=bo[i-8+4-1]:0==i&&(r=0),l.push(r);const q=1/(a-1),o=-q/2,s=1+q/2,m=[o,o,s,o,s,s,o,o,s,s,o,s],h=6,c=6,u=3,d=2,x=1,p=new Float32Array(u*c*h),f=new Float32Array(d*c*h),_=new Float32Array(x*c*h);for(let t=0;t<h;t++){const e=t%3*2/3-1,l=t>2?0:-1,n=[e,l,0,e+2/3,l,0,e+2/3,l+1,0,e,l,0,e+2/3,l+1,0,e,l+1,0];p.set(n,u*c*t),f.set(m,d*c*t);const i=[t,t,t,t,t,t];_.set(i,x*c*t)}const g=new Ye;g.setAttribute("position",new Ie(p,u)),g.setAttribute("uv",new Ie(f,d)),g.setAttribute("faceIndex",new Ie(_,x)),t.push(g),n>4&&n--}return{_lodPlanes:t,_sizeLods:e,_sigmas:l}}nq.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(nq.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},bq.prototype.fromPoints=function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)},class extends Da{constructor(t=10,e=10,l=4473924,n=8947848){l=new Ce(l),n=new Ce(n);const i=e/2,a=t/e,r=t/2,q=[],o=[];for(let t=0,s=0,m=-r;t<=e;t++,m+=a){q.push(-r,0,m,r,0,m),q.push(m,0,-r,m,0,r);const e=t===i?l:n;e.toArray(o,s),s+=3,e.toArray(o,s),s+=3,e.toArray(o,s),s+=3,e.toArray(o,s),s+=3}const s=new Ye;s.setAttribute("position",new Fe(q,3)),s.setAttribute("color",new Fe(o,3));super(s,new za({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},class extends Da{constructor(t){const e=yo(t),l=new Ye,n=[],i=[],a=new Ce(0,0,1),r=new Ce(0,1,0);for(let t=0;t<e.length;t++){const l=e[t];l.parent&&l.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),i.push(a.r,a.g,a.b),i.push(r.r,r.g,r.b))}l.setAttribute("position",new Fe(n,3)),l.setAttribute("color",new Fe(i,3));super(l,new za({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,l=this.geometry,n=l.getAttribute("position");vo.copy(this.root.matrixWorld).invert();for(let t=0,l=0;t<e.length;t++){const i=e[t];i.parent&&i.parent.isBone&&(go.multiplyMatrices(vo,i.matrixWorld),_o.setFromMatrixPosition(go),n.setXYZ(l,_o.x,_o.y,_o.z),go.multiplyMatrices(vo,i.parent.matrixWorld),_o.setFromMatrixPosition(go),n.setXYZ(l+1,_o.x,_o.y,_o.z),l+=2)}l.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Qr.prototype.extractUrlBase=function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Wq.extractUrlBase(t)},Qr.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},fo.prototype.center=function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},fo.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},fo.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},fo.prototype.size=function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)},st.prototype.center=function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},st.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},st.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},st.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},st.prototype.size=function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)},Tt.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},El.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},Q.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Q.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Q.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},Q.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Q.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},Q.prototype.getInverse=function(t){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Bt.prototype.extractPosition=function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},Bt.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Bt.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new rt).setFromMatrixColumn(this,3)},Bt.prototype.setRotationFromQuaternion=function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},Bt.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Bt.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Bt.prototype.multiplyVector4=function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Bt.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Bt.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},Bt.prototype.crossVector=function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Bt.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Bt.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Bt.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Bt.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Bt.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Bt.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Bt.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Bt.prototype.makeFrustum=function(t,e,l,n,i,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,n,l,i,a)},Bt.prototype.getInverse=function(t){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},ce.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},at.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},at.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},It.prototype.isIntersectionBox=function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},It.prototype.isIntersectionPlane=function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},It.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},be.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},be.prototype.barycoordFromPoint=function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},be.prototype.midpoint=function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},be.prototypenormal=function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},be.prototype.plane=function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)},be.barycoordFromPoint=function(t,e,l,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),be.getBarycoord(t,e,l,n,i)},be.normal=function(t,e,l,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),be.getNormal(t,e,l,n)},Mq.prototype.extractAllPoints=function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},Mq.prototype.extrude=function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new _r(this,t)},Mq.prototype.makeGeometry=function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new vr(this,t)},J.prototype.fromAttribute=function(t,e,l){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,l)},J.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},J.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},rt.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},rt.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},rt.prototype.getPositionFromMatrix=function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},rt.prototype.getScaleFromMatrix=function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},rt.prototype.getColumnFromMatrix=function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},rt.prototype.applyProjection=function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},rt.prototype.fromAttribute=function(t,e,l){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,l)},rt.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},rt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},nt.prototype.fromAttribute=function(t,e,l){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,l)},nt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},oe.prototype.getChildByName=function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},oe.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},oe.prototype.translate=function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},oe.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},oe.prototype.applyMatrix=function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(oe.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),cl.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(cl.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),fa.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},vl.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(zq.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Ie.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===O},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(O)}}}),Ie.prototype.setDynamic=function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?O:B),this},Ie.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Ie.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},Ye.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},Ye.prototype.addAttribute=function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new Ie(arguments[1],arguments[2])))},Ye.prototype.addDrawCall=function(t,e,l){void 0!==l&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},Ye.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},Ye.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},Ye.prototype.removeAttribute=function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},Ye.prototype.applyMatrix=function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(Ye.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Xi.prototype.setDynamic=function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?O:B),this},Xi.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},_r.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},_r.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},_r.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},ji.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},xo.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(ze.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Ce}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===t}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}}}),Object.defineProperties(_l.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Vi.prototype.clearTarget=function(t,e,l,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,l,n)},Vi.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},Vi.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},Vi.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},Vi.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},Vi.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},Vi.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},Vi.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},Vi.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},Vi.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},Vi.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},Vi.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},Vi.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},Vi.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},Vi.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},Vi.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},Vi.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},Vi.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},Vi.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},Vi.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},Vi.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},Vi.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},Vi.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},Vi.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},Vi.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(Vi.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?P:C}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(Pi.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(it.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),to.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return(new $q).load(t,(function(t){e.setBuffer(t)})),this},wl.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)},wl.prototype.clear=function(t,e,l,n){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(t,e,l,n)},$.crossOrigin=void 0,$.loadTexture=function(t,e,l,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new lq;i.setCrossOrigin(this.crossOrigin);const a=i.load(t,l,void 0,n);return e&&(a.mapping=e),a},$.loadTextureCube=function(t,e,l,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new eq;i.setCrossOrigin(this.crossOrigin);const a=i.load(t,l,void 0,n);return e&&(a.mapping=e),a},$.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},$.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"129"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="129");var Ao,Ro,Co={};Ao=Co,Ro=function(){"use strict";function t(t,e,l){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){r(n.response,e,l)},n.onerror=function(){console.error("could not download file")},n.send()}function l(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function n(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(l){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var i="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof e&&e.global===e?e:void 0,a=i.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),r=i.saveAs||("object"!=typeof window||window!==i?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(e,a,r){var q=i.URL||i.webkitURL,o=document.createElement("a");a=a||e.name||"download",o.download=a,o.rel="noopener","string"==typeof e?(o.href=e,o.origin===location.origin?n(o):l(o.href)?t(e,a,r):n(o,o.target="_blank")):(o.href=q.createObjectURL(e),setTimeout((function(){q.revokeObjectURL(o.href)}),4e4),setTimeout((function(){n(o)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,i,a){if(i=i||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(e,a),i);else if(l(e))t(e,i,a);else{var r=document.createElement("a");r.href=e,r.target="_blank",setTimeout((function(){n(r)}))}}:function(e,l,n,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof e)return t(e,l,n);var q="application/octet-stream"===e.type,o=/constructor/i.test(i.HTMLElement)||i.safari,s=/CriOS\/[\d]+/.test(navigator.userAgent);if((s||q&&o||a)&&"undefined"!=typeof FileReader){var m=new FileReader;m.onloadend=function(){var t=m.result;t=s?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},m.readAsDataURL(e)}else{var h=i.URL||i.webkitURL,c=h.createObjectURL(e);r?r.location=c:location.href=c,r=null,setTimeout((function(){h.revokeObjectURL(c)}),4e4)}});i.saveAs=r.saveAs=r,Co=r},"function"==typeof define&&define.amd?define([],Ro):void 0!==Co?Ro():(Ro(),Ao.FileSaver={});var Po;Po=JSON.parse('{"glyphs":{"0":{"ha":836,"x_min":38,"x_max":799,"o":"m 418 967 q 700 838 601 967 q 799 471 799 710 q 700 102 799 232 q 418 -28 601 -28 q 136 102 235 -28 q 38 471 38 232 q 136 838 38 710 q 418 967 235 967 m 418 768 q 358 742 379 768 q 327 653 336 717 q 318 471 318 589 q 327 288 318 351 q 358 199 336 225 q 418 172 379 172 q 479 197 458 172 q 509 285 500 221 q 518 471 518 349 q 509 658 518 594 q 479 744 500 721 q 418 768 458 768 z "},"1":{"ha":669,"x_min":0,"x_max":579,"o":"m 579 0 l 313 0 l 313 683 l 119 565 l 0 744 l 335 944 l 579 944 l 579 0 z "},"2":{"ha":736,"x_min":-7,"x_max":708,"o":"m 339 967 q 531 929 451 967 q 649 828 610 892 q 689 690 689 765 q 663 558 689 619 q 563 414 638 497 q 343 206 489 331 l 708 206 l 681 0 l 32 0 l 32 189 q 270 424 193 342 q 378 558 347 506 q 408 660 408 611 q 382 734 408 707 q 308 761 356 761 q 226 738 263 761 q 150 667 189 715 l -7 792 q 140 919 53 872 q 339 967 228 967 z "},"3":{"ha":739,"x_min":-21,"x_max":711,"o":"m 343 967 q 526 936 450 967 q 640 851 601 906 q 679 728 679 797 q 632 585 679 643 q 493 499 585 526 q 650 430 589 488 q 711 263 711 372 q 667 117 711 183 q 537 12 624 51 q 328 -28 450 -28 q -21 125 104 -28 l 122 265 q 213 198 171 218 q 308 178 256 178 q 397 206 363 178 q 431 286 431 233 q 398 374 431 346 q 296 401 365 401 l 213 401 l 243 585 l 300 585 q 386 610 357 585 q 415 681 415 636 q 387 745 415 722 q 308 768 358 768 q 131 689 213 768 l -4 831 q 343 967 136 967 z "},"4":{"ha":813,"x_min":28,"x_max":792,"o":"m 792 186 l 694 186 l 694 0 l 425 0 l 424 186 l 28 186 l 28 365 l 288 974 l 522 890 l 310 389 l 426 389 l 458 594 l 694 594 l 694 389 l 792 389 l 792 186 z "},"5":{"ha":774,"x_min":7,"x_max":739,"o":"m 660 753 l 333 753 l 333 601 q 465 631 397 631 q 605 594 543 631 q 703 486 667 557 q 739 318 739 415 q 690 137 739 215 q 551 15 642 58 q 342 -28 461 -28 q 7 129 132 -28 l 158 267 q 329 175 228 175 q 425 210 392 175 q 458 314 458 246 q 430 417 458 386 q 349 449 401 449 q 249 415 303 449 l 69 415 l 69 944 l 689 944 l 660 753 z "},"6":{"ha":808,"x_min":38,"x_max":788,"o":"m 511 644 q 656 606 593 644 q 753 494 718 567 q 788 324 788 422 q 744 149 788 229 q 618 21 701 69 q 421 -28 535 -28 q 133 93 229 -28 q 38 425 38 214 q 92 710 38 588 q 246 899 146 832 q 482 967 346 967 q 608 949 550 967 q 708 903 665 932 l 610 743 q 552 769 579 760 q 490 778 525 778 q 381 728 424 778 q 326 578 339 678 q 511 644 410 644 m 424 164 q 491 206 469 164 q 513 322 513 247 q 492 431 513 400 q 425 463 472 463 q 326 421 376 463 q 335 267 326 322 q 365 188 344 213 q 424 164 386 164 z "},"7":{"ha":669,"x_min":7,"x_max":656,"o":"m 656 764 l 313 -28 l 64 56 l 367 742 l 7 742 l 7 944 l 656 944 l 656 764 z "},"8":{"ha":832,"x_min":28,"x_max":804,"o":"m 622 507 q 760 397 717 458 q 804 257 804 335 q 758 115 804 181 q 624 11 713 50 q 410 -28 535 -28 q 204 10 290 -28 q 73 113 118 49 q 28 253 28 176 q 72 388 28 331 q 196 481 115 446 q 64 707 64 567 q 107 840 64 781 q 231 933 150 899 q 417 967 311 967 q 673 901 578 967 q 768 721 768 835 q 732 606 768 663 q 622 507 696 549 m 418 788 q 353 766 376 788 q 329 703 329 744 q 347 640 329 667 q 407 592 365 613 l 440 578 q 490 638 478 607 q 503 706 503 668 q 481 765 503 743 q 418 788 460 788 m 419 164 q 503 192 475 164 q 532 261 532 219 q 507 333 532 307 q 422 385 482 360 l 369 404 q 317 346 335 381 q 300 269 300 311 q 333 193 300 222 q 419 164 365 164 z "},"9":{"ha":808,"x_min":21,"x_max":781,"o":"m 400 967 q 608 920 522 967 q 738 791 694 874 q 781 601 781 708 q 713 281 781 411 q 503 71 644 150 q 142 -44 363 -8 l 88 144 q 285 201 210 171 q 406 277 360 232 q 481 393 453 322 q 399 336 442 354 q 296 318 357 318 q 158 356 221 318 q 58 466 96 394 q 21 633 21 538 q 70 806 21 731 q 206 924 119 882 q 400 967 293 967 m 388 504 q 447 519 418 504 q 499 567 476 535 q 491 692 500 647 q 460 758 482 738 q 397 778 439 778 q 324 744 351 778 q 296 647 296 711 q 388 504 296 504 z "},"\\r":{"ha":306,"x_min":0,"x_max":0,"o":""}," ":{"ha":306,"x_min":0,"x_max":0,"o":""},"A":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Á":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 629 1167 l 276 1040 l 207 1178 l 532 1367 l 629 1167 z "},"Ă":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 418 1036 q 236 1112 301 1036 q 161 1294 171 1188 l 304 1318 q 345 1249 317 1276 q 418 1222 374 1222 q 491 1249 463 1222 q 532 1318 519 1276 l 675 1294 q 600 1112 665 1188 q 418 1036 535 1036 z "},"Ắ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ặ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 418 1036 q 236 1112 301 1036 q 161 1294 171 1188 l 304 1318 q 345 1249 317 1276 q 418 1222 374 1222 q 491 1249 463 1222 q 532 1318 519 1276 l 675 1294 q 600 1112 665 1188 q 418 1036 535 1036 m 418 -367 q 308 -324 351 -367 q 264 -219 264 -282 q 308 -115 264 -157 q 418 -72 351 -72 q 528 -115 485 -72 q 572 -219 572 -157 q 528 -324 572 -282 q 418 -367 485 -367 z "},"Ằ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ẳ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ẵ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ǎ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 701 1233 l 500 1038 l 336 1038 l 135 1233 l 228 1340 l 418 1221 l 608 1340 l 701 1233 z "},"Â":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 135 1151 l 336 1347 l 500 1347 l 701 1151 l 608 1044 l 418 1164 l 228 1044 l 135 1151 z "},"Ấ":{"ha":835,"x_min":-35,"x_max":908,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ậ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 135 1151 l 336 1347 l 500 1347 l 701 1151 l 608 1044 l 418 1164 l 228 1044 l 135 1151 m 418 -367 q 308 -324 351 -367 q 264 -219 264 -282 q 308 -115 264 -157 q 418 -72 351 -72 q 528 -115 485 -72 q 572 -219 572 -157 q 528 -324 572 -282 q 418 -367 485 -367 z "},"Ầ":{"ha":835,"x_min":-71,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ẩ":{"ha":835,"x_min":-35,"x_max":871,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ẫ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ȁ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ä":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ǟ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ȧ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ạ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 418 -367 q 308 -324 351 -367 q 264 -219 264 -282 q 308 -115 264 -157 q 418 -72 351 -72 q 528 -115 485 -72 q 572 -219 572 -157 q 528 -324 572 -282 q 418 -367 485 -367 z "},"Ǡ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"À":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 629 1178 l 560 1040 l 207 1167 l 306 1367 l 629 1178 z "},"Ả":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 342 1190 q 417 1203 394 1192 q 440 1239 440 1214 q 426 1267 440 1257 q 389 1278 413 1278 q 347 1274 365 1278 q 303 1260 328 1269 l 263 1363 q 426 1401 328 1401 q 564 1360 515 1401 q 613 1251 613 1318 q 582 1161 613 1196 q 493 1115 551 1126 l 493 1061 l 342 1061 l 342 1190 z "},"Ȃ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 418 1346 q 601 1268 536 1346 q 675 1074 665 1190 l 532 1050 q 491 1131 519 1101 q 418 1160 463 1160 q 345 1131 374 1160 q 304 1050 317 1101 l 161 1074 q 235 1268 171 1190 q 418 1346 300 1346 z "},"Ɑ":{"ha":956,"x_min":28,"x_max":943,"o":"m 886 279 q 899 211 886 235 q 943 171 911 188 l 865 -28 q 739 8 789 -17 q 656 75 689 32 q 410 -28 563 -28 q 207 33 293 -28 q 74 206 121 93 q 28 471 28 318 q 77 750 28 632 q 213 931 126 868 q 413 994 300 994 q 534 969 482 994 q 631 900 586 944 l 644 967 l 886 967 l 886 279 m 325 471 q 362 236 325 304 q 476 168 399 168 q 600 217 547 168 l 600 739 q 476 792 550 792 q 362 718 399 792 q 325 471 325 644 z "},"Ā":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ą":{"ha":835,"x_min":-35,"x_max":869,"o":"m 717 0 q 592 -65 626 -31 q 557 -132 557 -100 q 628 -193 557 -193 q 713 -182 664 -193 l 696 -342 q 593 -353 647 -353 q 433 -306 496 -353 q 371 -178 371 -258 q 557 46 371 -32 l 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 717 0 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Å":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ǻ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ⱥ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 551 188 l 417 188 l 339 -107 l 247 -86 l 319 188 l 278 188 l 236 0 l -35 0 l 247 967 l 525 967 l 549 1054 l 639 1033 l 606 908 l 869 0 l 594 0 l 551 188 m 368 374 l 444 660 l 414 794 l 319 374 l 368 374 m 510 374 l 489 464 l 465 374 l 510 374 z "},"Ã":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Æ":{"ha":1199,"x_min":-42,"x_max":1171,"o":"m 1171 200 l 1171 0 l 606 0 l 581 188 l 326 188 l 269 0 l -42 0 l 335 967 l 1122 967 l 1093 768 l 750 768 l 782 585 l 1110 585 l 1110 392 l 814 392 l 847 200 l 1171 200 m 553 388 l 503 763 l 388 388 l 553 388 z "},"Ǽ":{"ha":1199,"x_min":-42,"x_max":1171,"o":"m 1171 200 l 1171 0 l 606 0 l 581 188 l 326 188 l 269 0 l -42 0 l 335 967 l 1122 967 l 1093 768 l 750 768 l 782 585 l 1110 585 l 1110 392 l 814 392 l 847 200 l 1171 200 m 553 388 l 503 763 l 388 388 l 553 388 m 890 1167 l 538 1040 l 468 1178 l 793 1367 l 890 1167 z "},"Ǣ":{"ha":1199,"x_min":-42,"x_max":1171,"o":"m 1171 200 l 1171 0 l 606 0 l 581 188 l 326 188 l 269 0 l -42 0 l 335 967 l 1122 967 l 1093 768 l 750 768 l 782 585 l 1110 585 l 1110 392 l 814 392 l 847 200 l 1171 200 m 553 388 l 503 763 l 388 388 l 553 388 z "},"B":{"ha":864,"x_min":60,"x_max":843,"o":"m 628 513 q 783 441 724 493 q 843 286 843 389 q 727 63 843 126 q 399 0 611 0 l 60 0 l 60 967 l 361 967 q 690 909 576 967 q 803 717 803 851 q 753 581 803 631 q 628 513 703 532 m 346 771 l 346 593 l 394 593 q 486 615 460 593 q 513 688 513 636 q 484 751 513 731 q 388 771 456 771 l 346 771 m 401 201 q 511 224 474 201 q 549 306 549 246 q 515 387 549 361 q 413 413 481 413 l 346 413 l 346 201 l 401 201 z "},"Ḃ":{"ha":864,"x_min":60,"x_max":843,"o":"m 628 513 q 783 441 724 493 q 843 286 843 389 q 727 63 843 126 q 399 0 611 0 l 60 0 l 60 967 l 361 967 q 690 909 576 967 q 803 717 803 851 q 753 581 803 631 q 628 513 703 532 m 346 771 l 346 593 l 394 593 q 486 615 460 593 q 513 688 513 636 q 484 751 513 731 q 388 771 456 771 l 346 771 m 401 201 q 511 224 474 201 q 549 306 549 246 q 515 387 549 361 q 413 413 481 413 l 346 413 l 346 201 l 401 201 z "},"Ḅ":{"ha":864,"x_min":60,"x_max":843,"o":"m 628 513 q 783 441 724 493 q 843 286 843 389 q 727 63 843 126 q 399 0 611 0 l 60 0 l 60 967 l 361 967 q 690 909 576 967 q 803 717 803 851 q 753 581 803 631 q 628 513 703 532 m 346 771 l 346 593 l 394 593 q 486 615 460 593 q 513 688 513 636 q 484 751 513 731 q 388 771 456 771 l 346 771 m 401 201 q 511 224 474 201 q 549 306 549 246 q 515 387 549 361 q 413 413 481 413 l 346 413 l 346 201 l 401 201 m 431 -367 q 320 -324 364 -367 q 276 -219 276 -282 q 320 -115 276 -157 q 431 -72 364 -72 q 541 -115 497 -72 q 585 -219 585 -157 q 541 -324 585 -282 q 431 -367 497 -367 z "},"Ꞵ":{"ha":864,"x_min":60,"x_max":843,"o":"m 628 513 q 783 442 722 493 q 843 289 843 390 q 736 67 843 133 q 468 0 629 0 q 346 10 414 0 l 346 -299 l 60 -299 l 60 967 l 361 967 q 690 909 576 967 q 803 717 803 851 q 753 581 803 631 q 628 513 703 532 m 419 201 q 549 311 549 201 q 521 388 549 363 q 440 413 493 413 l 407 413 l 421 593 l 425 593 q 489 615 465 593 q 513 681 513 638 q 484 750 513 729 q 388 771 456 771 l 346 771 l 346 206 q 419 201 383 201 z "},"Ɓ":{"ha":1110,"x_min":0,"x_max":1089,"o":"m 874 513 q 1029 441 969 493 q 1089 286 1089 389 q 973 63 1089 126 q 644 0 857 0 l 306 0 l 306 768 l 271 768 q 214 717 214 768 q 219 678 214 697 q 235 632 224 660 l 64 560 q 17 648 35 606 q 0 736 0 690 q 78 906 0 844 q 286 967 157 967 l 607 967 q 935 909 822 967 q 1049 717 1049 851 q 999 581 1049 631 q 874 513 949 532 m 592 771 l 592 593 l 640 593 q 732 615 706 593 q 758 688 758 636 q 730 751 758 731 q 633 771 701 771 l 592 771 m 647 201 q 757 224 719 201 q 794 306 794 246 q 760 387 794 361 q 658 413 726 413 l 592 413 l 592 201 l 647 201 z "},"Ƀ":{"ha":886,"x_min":14,"x_max":865,"o":"m 650 513 q 806 441 746 493 q 865 286 865 389 q 749 63 865 126 q 421 0 633 0 l 82 0 l 82 250 l 14 250 l 14 369 l 82 369 l 82 967 l 383 967 q 712 909 599 967 q 825 717 825 851 q 775 581 825 631 q 650 513 725 532 m 368 771 l 368 593 l 417 593 q 508 615 482 593 q 535 688 535 636 q 506 751 535 731 q 410 771 478 771 l 368 771 m 424 201 q 533 224 496 201 q 571 306 571 246 q 537 387 571 361 q 435 413 503 413 l 368 413 l 368 369 l 493 369 l 493 250 l 368 250 l 368 201 l 424 201 z "},"Ƃ":{"ha":842,"x_min":60,"x_max":828,"o":"m 435 633 q 726 556 625 633 q 828 326 828 478 q 722 85 828 169 q 446 0 617 0 l 60 0 l 60 967 l 710 967 l 682 754 l 346 754 l 346 633 l 435 633 m 408 201 q 500 234 469 201 q 531 324 531 267 q 403 442 531 442 l 346 442 l 346 201 l 408 201 z "},"C":{"ha":811,"x_min":28,"x_max":811,"o":"m 489 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 670 10 753 49 q 493 -28 588 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 z "},"Ć":{"ha":811,"x_min":28,"x_max":811,"o":"m 489 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 670 10 753 49 q 493 -28 588 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 m 708 1167 l 356 1040 l 286 1178 l 611 1367 l 708 1167 z "},"Č":{"ha":811,"x_min":28,"x_max":811,"o":"m 489 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 670 10 753 49 q 493 -28 588 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 m 781 1233 l 579 1038 l 415 1038 l 214 1233 l 307 1340 l 497 1221 l 688 1340 l 781 1233 z "},"Ç":{"ha":811,"x_min":28,"x_max":811,"o":"m 539 -60 q 692 -210 692 -79 q 631 -333 692 -285 q 464 -382 569 -382 q 367 -369 413 -382 q 290 -335 322 -356 l 350 -215 q 439 -240 396 -240 q 501 -207 501 -240 q 471 -176 501 -185 q 371 -167 440 -167 l 389 -19 q 124 141 219 11 q 28 486 28 271 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 690 19 760 56 q 539 -25 619 -17 l 539 -60 z "},"Ĉ":{"ha":811,"x_min":28,"x_max":811,"o":"m 489 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 670 10 753 49 q 493 -28 588 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 m 214 1151 l 415 1347 l 579 1347 l 781 1151 l 688 1044 l 497 1164 l 307 1044 l 214 1151 z "},"Ċ":{"ha":811,"x_min":28,"x_max":811,"o":"m 489 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 670 10 753 49 q 493 -28 588 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 z "},"Ꭓ":{"ha":828,"x_min":-14,"x_max":842,"o":"m 842 -250 l 533 -250 l 407 207 l 289 -250 l -14 -250 l 238 388 l 4 967 l 311 967 l 410 564 l 521 967 l 822 967 l 579 396 l 842 -250 z "},"Ƈ":{"ha":811,"x_min":28,"x_max":1022,"o":"m 818 1199 q 1022 1147 932 1199 l 950 978 q 861 1001 900 1001 q 815 983 829 1001 q 800 926 800 965 l 800 881 l 679 739 q 596 776 636 764 q 500 789 556 789 q 371 713 417 789 q 325 486 325 636 q 372 262 325 336 q 508 188 419 188 q 594 208 554 188 q 686 268 635 228 l 811 107 q 670 10 753 49 q 492 -28 588 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 85 757 28 642 q 239 933 143 872 q 447 994 335 994 q 567 974 517 994 q 635 1140 574 1081 q 818 1199 697 1199 z "},"Ȼ":{"ha":811,"x_min":28,"x_max":811,"o":"m 811 107 q 670 10 753 49 q 493 -28 588 -28 q 390 -19 439 -28 l 367 -107 l 275 -86 l 300 6 q 99 179 169 57 q 28 486 28 301 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 q 560 990 526 994 l 576 1054 l 667 1033 l 650 968 q 800 881 733 939 l 668 725 q 597 768 624 756 l 447 197 q 507 188 472 188 q 595 207 554 188 q 686 265 636 226 l 811 107 m 325 486 q 368 268 325 343 l 507 789 l 503 789 q 372 713 418 789 q 325 486 325 636 z "},"D":{"ha":911,"x_min":60,"x_max":883,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 z "},"Ǳ":{"ha":1650,"x_min":60,"x_max":1629,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 m 1617 754 l 1232 224 l 1629 224 l 1601 0 l 890 0 l 890 210 l 1288 750 l 929 750 l 929 967 l 1617 967 l 1617 754 z "},"Ǆ":{"ha":1650,"x_min":60,"x_max":1629,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 z "},"Ɖ":{"ha":932,"x_min":14,"x_max":904,"o":"m 390 967 q 764 863 624 967 q 904 488 904 760 q 769 110 904 219 q 407 0 635 0 l 81 0 l 81 410 l 14 410 l 14 571 l 81 571 l 81 967 l 390 967 m 424 201 q 531 228 490 201 q 590 316 571 254 q 610 488 610 378 q 590 656 610 596 q 529 741 569 717 q 425 765 489 765 l 367 765 l 367 571 l 535 571 l 535 410 l 367 410 l 367 201 l 424 201 z "},"Ð":{"ha":932,"x_min":14,"x_max":904,"o":"m 390 967 q 764 863 624 967 q 904 488 904 760 q 769 110 904 219 q 407 0 635 0 l 81 0 l 81 410 l 14 410 l 14 571 l 81 571 l 81 967 l 390 967 m 424 201 q 531 228 490 201 q 590 316 571 254 q 610 488 610 378 q 590 656 610 596 q 529 741 569 717 q 425 765 489 765 l 367 765 l 367 571 l 535 571 l 535 410 l 367 410 l 367 201 l 424 201 z "},"Ď":{"ha":911,"x_min":60,"x_max":883,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 m 688 1233 l 486 1038 l 322 1038 l 121 1233 l 214 1340 l 404 1221 l 594 1340 l 688 1233 z "},"Ḓ":{"ha":911,"x_min":60,"x_max":883,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 m 147 -293 l 349 -83 l 513 -83 l 714 -293 l 621 -400 l 431 -267 l 240 -400 l 147 -293 z "},"Đ":{"ha":932,"x_min":14,"x_max":904,"o":"m 390 967 q 764 863 624 967 q 904 488 904 760 q 769 110 904 219 q 407 0 635 0 l 81 0 l 81 410 l 14 410 l 14 571 l 81 571 l 81 967 l 390 967 m 424 201 q 531 228 490 201 q 590 316 571 254 q 610 488 610 378 q 590 656 610 596 q 529 741 569 717 q 425 765 489 765 l 367 765 l 367 571 l 535 571 l 535 410 l 367 410 l 367 201 l 424 201 z "},"Ḋ":{"ha":911,"x_min":60,"x_max":883,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 z "},"Ḍ":{"ha":911,"x_min":60,"x_max":883,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 m 431 -367 q 320 -324 364 -367 q 276 -219 276 -282 q 320 -115 276 -157 q 431 -72 364 -72 q 541 -115 497 -72 q 585 -219 585 -157 q 541 -324 585 -282 q 431 -367 497 -367 z "},"Ɗ":{"ha":1157,"x_min":0,"x_max":1129,"o":"m 615 967 q 989 863 849 967 q 1129 488 1129 760 q 994 110 1129 219 q 632 0 860 0 l 306 0 l 306 768 l 271 768 q 214 717 214 768 q 219 678 214 697 q 235 632 224 660 l 64 560 q 17 648 35 606 q 0 736 0 690 q 78 906 0 844 q 286 967 157 967 l 615 967 m 649 201 q 756 228 715 201 q 815 316 796 254 q 835 488 835 378 q 815 656 835 596 q 754 741 794 717 q 650 765 714 765 l 592 765 l 592 201 l 649 201 z "},"Ḏ":{"ha":911,"x_min":60,"x_max":883,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 z "},"Ƌ":{"ha":842,"x_min":14,"x_max":782,"o":"m 782 0 l 392 0 q 117 81 219 0 q 14 319 14 161 q 117 551 14 469 q 407 633 219 633 l 496 633 l 496 754 l 143 754 l 143 967 l 782 967 l 782 0 m 496 201 l 496 442 l 439 442 q 311 319 311 442 q 342 233 311 264 q 433 201 372 201 l 496 201 z "},"ǲ":{"ha":1546,"x_min":60,"x_max":1539,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 m 1529 551 l 1225 203 l 1539 203 l 1515 0 l 904 0 l 904 192 l 1213 542 l 932 542 l 932 742 l 1529 742 l 1529 551 z "},"ǅ":{"ha":1546,"x_min":60,"x_max":1539,"o":"m 369 967 q 743 863 603 967 q 883 488 883 760 q 749 110 883 219 q 386 0 614 0 l 60 0 l 60 967 l 369 967 m 346 765 l 346 201 l 403 201 q 510 228 469 201 q 569 316 550 254 q 589 488 589 378 q 569 656 589 596 q 508 741 549 717 q 404 765 468 765 l 346 765 z "},"E":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"É":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 589 1167 l 236 1040 l 167 1178 l 492 1367 l 589 1167 z "},"Ĕ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 378 1036 q 196 1112 261 1036 q 121 1294 131 1188 l 264 1318 q 305 1249 276 1276 q 378 1222 333 1222 q 451 1249 422 1222 q 492 1318 479 1276 l 635 1294 q 560 1112 625 1188 q 378 1036 494 1036 z "},"Ě":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 661 1233 l 460 1038 l 296 1038 l 94 1233 l 188 1340 l 378 1221 l 568 1340 l 661 1233 z "},"Ȩ":{"ha":722,"x_min":60,"x_max":694,"o":"m 346 200 l 688 200 l 688 0 l 442 0 l 442 -60 q 594 -210 594 -79 q 533 -333 594 -285 q 367 -382 472 -382 q 270 -369 315 -382 q 193 -335 225 -356 l 253 -215 q 342 -240 299 -240 q 404 -207 404 -240 q 374 -176 404 -185 q 274 -167 343 -167 l 294 0 l 60 0 l 60 967 l 694 967 l 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 z "},"Ê":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 94 1151 l 296 1347 l 460 1347 l 661 1151 l 568 1044 l 378 1164 l 188 1044 l 94 1151 z "},"Ế":{"ha":722,"x_min":60,"x_max":868,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ệ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 94 1151 l 296 1347 l 460 1347 l 661 1151 l 568 1044 l 378 1164 l 188 1044 l 94 1151 m 374 -367 q 263 -324 307 -367 q 219 -219 219 -282 q 263 -115 219 -157 q 374 -72 307 -72 q 484 -115 440 -72 q 528 -219 528 -157 q 484 -324 528 -282 q 374 -367 440 -367 z "},"Ề":{"ha":722,"x_min":-111,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ể":{"ha":722,"x_min":60,"x_max":831,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ễ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ȅ":{"ha":722,"x_min":18,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ë":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ė":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ẹ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 374 -367 q 263 -324 307 -367 q 219 -219 219 -282 q 263 -115 219 -157 q 374 -72 307 -72 q 484 -115 440 -72 q 528 -219 528 -157 q 484 -324 528 -282 q 374 -367 440 -367 z "},"È":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 589 1178 l 519 1040 l 167 1167 l 265 1367 l 589 1178 z "},"Ẻ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 301 1190 q 377 1203 354 1192 q 400 1239 400 1214 q 386 1267 400 1257 q 349 1278 372 1278 q 306 1274 325 1278 q 263 1260 288 1269 l 222 1363 q 386 1401 288 1401 q 524 1360 475 1401 q 572 1251 572 1318 q 542 1161 572 1196 q 453 1115 511 1126 l 453 1061 l 301 1061 l 301 1190 z "},"Ȇ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 378 1346 q 560 1268 496 1346 q 635 1074 625 1190 l 492 1050 q 451 1131 479 1101 q 378 1160 422 1160 q 305 1131 333 1160 q 264 1050 276 1101 l 121 1074 q 195 1268 131 1190 q 378 1346 260 1346 z "},"Ē":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ę":{"ha":722,"x_min":60,"x_max":694,"o":"m 346 200 l 688 200 l 688 0 l 632 0 q 508 -65 543 -31 q 472 -132 472 -100 q 543 -193 472 -193 q 628 -182 579 -193 l 611 -342 q 508 -353 563 -353 q 349 -306 411 -353 q 286 -178 286 -258 q 388 0 286 -69 l 60 0 l 60 967 l 694 967 l 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 z "},"Ɛ":{"ha":768,"x_min":21,"x_max":782,"o":"m 415 994 q 599 961 518 994 q 750 861 679 928 l 618 722 q 451 794 538 794 q 340 703 340 794 q 371 631 340 656 q 461 606 401 606 l 574 606 l 542 410 l 467 410 q 356 378 393 410 q 318 290 318 347 q 354 204 318 233 q 453 175 390 175 q 544 194 503 175 q 633 256 586 214 l 782 111 q 422 -28 650 -28 q 213 8 304 -28 q 72 112 122 44 q 21 268 21 179 q 87 435 21 375 q 279 510 153 496 q 105 593 161 533 q 49 736 49 653 q 96 870 49 811 q 226 962 143 929 q 415 994 310 994 z "},"Ǝ":{"ha":722,"x_min":35,"x_max":663,"o":"m 663 967 l 663 0 l 35 0 l 35 200 l 376 200 l 376 394 l 96 394 l 96 588 l 376 588 l 376 768 l 42 768 l 42 967 l 663 967 z "},"Ʃ":{"ha":699,"x_min":14,"x_max":685,"o":"m 685 765 l 328 765 l 533 522 l 533 428 l 324 206 l 685 206 l 685 0 l 14 0 l 14 200 l 256 472 l 14 767 l 14 967 l 685 967 l 685 765 z "},"Ɇ":{"ha":722,"x_min":60,"x_max":694,"o":"m 433 200 l 688 200 l 688 0 l 381 0 l 353 -107 l 261 -86 l 283 0 l 60 0 l 60 967 l 539 967 l 563 1054 l 653 1033 l 635 967 l 694 967 l 665 768 l 583 768 l 536 588 l 626 588 l 626 394 l 485 394 l 433 200 m 346 588 l 439 588 l 488 768 l 346 768 l 346 588 m 346 235 l 388 394 l 346 394 l 346 235 z "},"Ẽ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ʒ":{"ha":785,"x_min":0,"x_max":764,"o":"m 489 564 q 692 483 619 554 q 764 292 764 411 q 715 130 764 203 q 574 15 667 57 q 353 -28 482 -28 q 148 12 233 -28 q 0 125 63 51 l 142 263 q 236 197 193 217 q 336 178 279 178 q 433 210 396 178 q 469 304 469 243 q 430 385 469 360 q 324 411 390 411 l 176 411 l 176 560 l 396 767 l 63 767 l 63 967 l 706 967 l 706 774 l 489 564 z "},"Ǯ":{"ha":785,"x_min":0,"x_max":764,"o":"m 489 564 q 692 483 619 554 q 764 292 764 411 q 715 130 764 203 q 574 15 667 57 q 353 -28 482 -28 q 148 12 233 -28 q 0 125 63 51 l 142 263 q 236 197 193 217 q 336 178 279 178 q 433 210 396 178 q 469 304 469 243 q 430 385 469 360 q 324 411 390 411 l 176 411 l 176 560 l 396 767 l 63 767 l 63 967 l 706 967 l 706 774 l 489 564 m 668 1233 l 467 1038 l 303 1038 l 101 1233 l 194 1340 l 385 1221 l 575 1340 l 668 1233 z "},"Ƹ":{"ha":785,"x_min":21,"x_max":785,"o":"m 785 125 q 633 12 719 51 q 422 -28 546 -28 q 207 14 297 -28 q 69 128 117 56 q 21 292 21 200 q 97 479 21 406 q 296 564 172 553 l 79 774 l 79 967 l 722 967 l 722 767 l 393 767 l 608 556 l 608 411 l 461 411 q 354 381 393 411 q 315 296 315 350 q 349 209 315 240 q 440 178 383 178 q 547 198 500 178 q 643 263 593 218 l 785 125 z "},"F":{"ha":674,"x_min":60,"x_max":674,"o":"m 60 967 l 674 967 l 644 768 l 346 768 l 346 557 l 608 557 l 608 358 l 346 358 l 346 0 l 60 0 l 60 967 z "},"Ḟ":{"ha":674,"x_min":60,"x_max":674,"o":"m 60 967 l 674 967 l 644 768 l 346 768 l 346 557 l 608 557 l 608 358 l 346 358 l 346 0 l 60 0 l 60 967 z "},"Ƒ":{"ha":674,"x_min":-193,"x_max":674,"o":"m 346 768 l 346 557 l 608 557 l 608 358 l 346 358 l 346 -22 q 260 -240 346 -165 q 25 -315 174 -315 q -193 -253 -107 -315 l -104 -86 q -55 -108 -74 -101 q -10 -114 -36 -114 q 42 -95 24 -114 q 60 -40 60 -76 l 60 967 l 674 967 l 644 768 l 346 768 z "},"G":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 z "},"Ǵ":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 m 697 1167 l 344 1040 l 275 1178 l 600 1367 l 697 1167 z "},"Ğ":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 m 486 1036 q 304 1112 369 1036 q 229 1294 239 1188 l 372 1318 q 413 1249 385 1276 q 486 1222 442 1222 q 559 1249 531 1222 q 600 1318 588 1276 l 743 1294 q 668 1112 733 1188 q 486 1036 603 1036 z "},"Ǧ":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 m 769 1233 l 568 1038 l 404 1038 l 203 1233 l 296 1340 l 486 1221 l 676 1340 l 769 1233 z "},"Ĝ":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 m 203 1151 l 404 1347 l 568 1347 l 769 1151 l 676 1044 l 486 1164 l 296 1044 l 203 1151 z "},"Ģ":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 z "},"Ġ":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 z "},"Ɠ":{"ha":869,"x_min":28,"x_max":1081,"o":"m 876 1199 q 1081 1147 990 1199 l 1008 978 q 919 1001 958 1001 q 873 983 888 1001 q 858 926 858 965 l 858 868 l 728 733 q 628 779 674 764 q 532 794 583 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 758 28 643 q 256 934 153 874 q 483 994 360 994 q 625 968 558 994 q 692 1138 631 1078 q 876 1199 754 1199 z "},"Ɂ":{"ha":743,"x_min":0,"x_max":715,"o":"m 201 468 l 264 486 q 385 553 350 511 q 421 671 421 594 q 390 761 421 728 q 304 794 360 794 q 219 777 260 794 q 132 722 179 760 l 0 861 q 349 994 140 994 q 544 956 461 994 q 671 848 626 918 q 715 685 715 778 q 670 514 715 579 q 525 407 625 449 l 488 392 l 488 0 l 201 0 l 201 468 z "},"Ǥ":{"ha":944,"x_min":28,"x_max":944,"o":"m 944 251 l 858 251 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 q 858 868 715 994 l 721 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 544 181 515 175 q 611 199 572 186 l 611 251 l 472 251 l 472 397 l 611 397 l 611 444 l 482 444 l 460 603 l 858 603 l 858 397 l 944 397 l 944 251 z "},"Ȝ":{"ha":736,"x_min":-14,"x_max":715,"o":"m 335 994 q 520 961 440 994 q 644 868 600 928 q 688 729 688 808 q 631 581 688 642 q 457 496 575 519 q 651 428 586 482 q 715 269 715 374 q 566 8 715 122 q 97 -167 417 -107 l 75 36 q 290 115 215 76 q 392 192 365 153 q 418 285 418 232 q 269 396 418 396 l 163 396 l 194 592 l 275 592 q 396 696 396 592 q 292 794 396 794 q 114 722 206 794 l -14 861 q 335 994 126 994 z "},"H":{"ha":913,"x_min":60,"x_max":853,"o":"m 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 0 l 567 0 l 567 390 z "},"Ħ":{"ha":932,"x_min":0,"x_max":932,"o":"m 932 688 l 863 688 l 863 0 l 576 0 l 576 390 l 356 390 l 356 0 l 69 0 l 69 688 l 0 688 l 0 835 l 69 835 l 69 967 l 356 967 l 356 835 l 576 835 l 576 967 l 863 967 l 863 835 l 932 835 l 932 688 m 576 688 l 356 688 l 356 610 l 576 610 l 576 688 z "},"Ȟ":{"ha":913,"x_min":60,"x_max":853,"o":"m 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 0 l 567 0 l 567 390 m 740 1233 l 539 1038 l 375 1038 l 174 1233 l 267 1340 l 457 1221 l 647 1340 l 740 1233 z "},"Ĥ":{"ha":913,"x_min":60,"x_max":853,"o":"m 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 0 l 567 0 l 567 390 m 174 1151 l 375 1347 l 539 1347 l 740 1151 l 647 1044 l 457 1164 l 267 1044 l 174 1151 z "},"Ḥ":{"ha":913,"x_min":60,"x_max":853,"o":"m 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 0 l 567 0 l 567 390 m 457 -367 q 347 -324 390 -367 q 303 -219 303 -282 q 347 -115 303 -157 q 457 -72 390 -72 q 567 -115 524 -72 q 611 -219 611 -157 q 567 -324 611 -282 q 457 -367 524 -367 z "},"Ɦ":{"ha":1158,"x_min":0,"x_max":1099,"o":"m 1099 967 l 1099 0 l 813 0 l 813 390 l 592 390 l 592 0 l 306 0 l 306 768 l 271 768 q 214 717 214 768 q 219 678 214 697 q 235 632 224 660 l 64 560 q 17 648 35 606 q 0 736 0 690 q 78 906 0 844 q 286 967 157 967 l 592 967 l 592 610 l 813 610 l 813 967 l 1099 967 z "},"Ɥ":{"ha":865,"x_min":14,"x_max":806,"o":"m 806 967 l 806 0 l 519 0 l 519 339 q 322 271 439 271 q 94 365 175 271 q 14 626 14 460 l 14 967 l 294 967 l 294 626 q 320 510 294 546 q 407 474 346 474 q 471 483 444 474 q 519 511 497 492 l 519 967 l 806 967 z "},"Ƕ":{"ha":1306,"x_min":60,"x_max":1271,"o":"m 1228 742 q 1259 544 1247 640 q 1271 339 1271 447 q 1217 131 1271 214 q 1076 10 1163 49 q 888 -28 989 -28 q 656 44 744 -28 q 567 265 567 115 l 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 264 q 867 190 853 211 q 910 169 882 169 q 972 215 949 169 q 996 360 996 261 q 958 742 996 517 l 1228 742 z "},"I":{"ha":406,"x_min":60,"x_max":346,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ĳ":{"ha":857,"x_min":60,"x_max":800,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 800 154 q 751 -55 800 28 q 628 -183 703 -137 q 454 -262 554 -229 l 378 -61 q 467 -8 438 -39 q 505 63 496 24 q 514 164 514 103 l 514 967 l 800 967 l 800 154 z "},"Í":{"ha":406,"x_min":-8,"x_max":414,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 414 1167 l 61 1040 l -8 1178 l 317 1367 l 414 1167 z "},"Ĭ":{"ha":406,"x_min":-54,"x_max":460,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 203 1036 q 21 1112 86 1036 q -54 1294 -44 1188 l 89 1318 q 130 1249 101 1276 q 203 1222 158 1222 q 276 1249 247 1222 q 317 1318 304 1276 l 460 1294 q 385 1112 450 1188 q 203 1036 319 1036 z "},"Ǐ":{"ha":406,"x_min":-81,"x_max":486,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 486 1233 l 285 1038 l 121 1038 l -81 1233 l 13 1340 l 203 1221 l 393 1340 l 486 1233 z "},"Î":{"ha":406,"x_min":-81,"x_max":486,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m -81 1151 l 121 1347 l 285 1347 l 486 1151 l 393 1044 l 203 1164 l 13 1044 l -81 1151 z "},"Ȉ":{"ha":406,"x_min":-157,"x_max":411,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ï":{"ha":406,"x_min":-103,"x_max":501,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ḯ":{"ha":406,"x_min":-114,"x_max":518,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 436 1450 l 199 1243 l 97 1333 l 292 1592 l 436 1450 m 18 1297 q 111 1260 72 1297 q 150 1169 150 1222 q 111 1078 150 1115 q 18 1040 72 1040 q -76 1078 -37 1040 q -114 1169 -114 1115 q -76 1260 -114 1222 q 18 1297 -37 1297 m 386 1297 q 479 1260 440 1297 q 518 1169 518 1222 q 479 1078 518 1115 q 386 1040 440 1040 q 292 1078 331 1040 q 254 1169 254 1115 q 292 1260 254 1222 q 386 1297 331 1297 z "},"İ":{"ha":406,"x_min":49,"x_max":357,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ị":{"ha":406,"x_min":49,"x_max":357,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 203 -367 q 92 -324 136 -367 q 49 -219 49 -282 q 92 -115 49 -157 q 203 -72 136 -72 q 313 -115 269 -72 q 357 -219 357 -157 q 313 -324 357 -282 q 203 -367 269 -367 z "},"Ì":{"ha":406,"x_min":-8,"x_max":414,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 414 1178 l 344 1040 l -8 1167 l 90 1367 l 414 1178 z "},"Ỉ":{"ha":406,"x_min":47,"x_max":397,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 126 1190 q 202 1203 179 1192 q 225 1239 225 1214 q 211 1267 225 1257 q 174 1278 197 1278 q 131 1274 150 1278 q 88 1260 113 1269 l 47 1363 q 211 1401 113 1401 q 349 1360 300 1401 q 397 1251 397 1318 q 367 1161 397 1196 q 278 1115 336 1126 l 278 1061 l 126 1061 l 126 1190 z "},"Ȋ":{"ha":406,"x_min":-54,"x_max":460,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 203 1346 q 385 1268 321 1346 q 460 1074 450 1190 l 317 1050 q 276 1131 304 1101 q 203 1160 247 1160 q 130 1131 158 1160 q 89 1050 101 1101 l -54 1074 q 20 1268 -44 1190 q 203 1346 85 1346 z "},"Ī":{"ha":406,"x_min":-24,"x_max":428,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Į":{"ha":406,"x_min":-64,"x_max":346,"o":"m 346 967 l 346 0 l 282 0 q 158 -65 193 -29 q 122 -132 122 -100 q 193 -193 122 -193 q 278 -182 229 -193 l 261 -342 q 158 -353 213 -353 q -1 -306 61 -353 q -64 -178 -64 -258 q 60 15 -64 -60 l 60 967 l 346 967 z "},"Ɩ":{"ha":564,"x_min":46,"x_max":585,"o":"m 585 35 q 367 -28 499 -28 q 132 47 218 -28 q 46 265 46 122 l 46 967 l 332 967 l 332 247 q 350 192 332 211 q 401 174 368 174 q 447 180 428 174 q 496 201 465 186 l 585 35 z "},"Ɨ":{"ha":472,"x_min":0,"x_max":472,"o":"m 472 396 l 379 396 l 379 0 l 93 0 l 93 396 l 0 396 l 0 604 l 93 604 l 93 967 l 379 967 l 379 604 l 472 604 l 472 396 z "},"Ĩ":{"ha":406,"x_min":-76,"x_max":482,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"J":{"ha":451,"x_min":-28,"x_max":394,"o":"m 394 154 q 346 -55 394 28 q 223 -183 297 -137 q 49 -262 149 -229 l -28 -61 q 61 -8 32 -39 q 99 63 90 24 q 108 164 108 103 l 108 967 l 394 967 l 394 154 z "},"Ĵ":{"ha":451,"x_min":-32,"x_max":535,"o":"m 394 154 q 346 -55 394 28 q 223 -183 297 -137 q 49 -262 149 -229 l -28 -61 q 61 -8 32 -39 q 99 63 90 24 q 108 164 108 103 l 108 967 l 394 967 l 394 154 m -32 1151 l 169 1347 l 333 1347 l 535 1151 l 442 1044 l 251 1164 l 61 1044 l -32 1151 z "},"Ʝ":{"ha":513,"x_min":-125,"x_max":601,"o":"m 556 -162 q 426 -114 492 -133 q 311 -265 392 -215 q 101 -315 231 -315 q -66 -269 -7 -315 q -125 -143 -125 -224 q -61 -3 -125 -51 q 121 44 3 44 q 167 43 154 44 l 167 967 l 453 967 l 453 79 q 450 6 453 53 q 601 -57 528 -18 l 556 -162 m 86 -185 q 144 -160 125 -185 q 165 -78 163 -136 q 119 -76 156 -76 q 50 -91 71 -76 q 29 -135 29 -106 q 44 -172 29 -158 q 86 -185 58 -185 z "},"Ɉ":{"ha":488,"x_min":-28,"x_max":488,"o":"m 488 372 l 394 372 l 394 154 q 346 -55 394 28 q 223 -183 297 -137 q 49 -262 149 -229 l -28 -61 q 61 -8 32 -39 q 99 63 90 24 q 108 164 108 103 l 108 372 l 15 372 l 15 581 l 108 581 l 108 967 l 394 967 l 394 581 l 488 581 l 488 372 z "},"K":{"ha":915,"x_min":60,"x_max":943,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 644 538 l 943 0 l 618 0 l 354 515 l 624 967 l 918 967 l 644 538 z "},"Ǩ":{"ha":915,"x_min":60,"x_max":943,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 644 538 l 943 0 l 618 0 l 354 515 l 624 967 l 918 967 l 644 538 m 742 1233 l 540 1038 l 376 1038 l 175 1233 l 268 1340 l 458 1221 l 649 1340 l 742 1233 z "},"Ķ":{"ha":915,"x_min":60,"x_max":943,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 644 538 l 943 0 l 618 0 l 354 515 l 624 967 l 918 967 l 644 538 z "},"Ƙ":{"ha":938,"x_min":60,"x_max":965,"o":"m 354 515 l 521 806 q 641 953 582 911 q 799 994 700 994 q 965 940 894 994 l 897 783 q 881 791 896 785 q 844 797 867 797 q 801 784 818 797 q 760 731 783 771 l 644 538 l 943 0 l 618 0 l 354 515 m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"L":{"ha":725,"x_min":60,"x_max":711,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 z "},"Ǉ":{"ha":1142,"x_min":60,"x_max":1085,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 m 1085 154 q 1036 -55 1085 28 q 913 -183 988 -137 q 739 -262 839 -229 l 663 -61 q 751 -8 722 -39 q 790 63 781 24 q 799 164 799 103 l 799 967 l 1085 967 l 1085 154 z "},"Ĺ":{"ha":725,"x_min":-8,"x_max":711,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 m 414 1167 l 61 1040 l -8 1178 l 317 1367 l 414 1167 z "},"Ƚ":{"ha":758,"x_min":0,"x_max":744,"o":"m 744 219 l 715 0 l 93 0 l 93 400 l 0 400 l 0 608 l 93 608 l 93 967 l 379 967 l 379 608 l 472 608 l 472 400 l 379 400 l 379 219 l 744 219 z "},"Ɬ":{"ha":903,"x_min":-7,"x_max":889,"o":"m 889 219 l 860 0 l 238 0 l 238 344 q 53 400 114 347 q -7 539 -7 453 q 44 666 -7 621 q 182 711 96 711 q 238 704 213 711 l 238 967 l 524 967 l 524 496 q 690 514 611 500 l 708 374 q 524 350 624 356 l 524 219 l 889 219 m 164 542 q 238 490 164 490 l 238 575 q 203 579 219 579 q 174 569 185 579 q 164 542 164 558 z "},"Ľ":{"ha":725,"x_min":60,"x_max":711,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 m 624 965 l 428 994 l 393 663 l 543 640 l 624 965 z "},"Ḽ":{"ha":725,"x_min":60,"x_max":711,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 m 88 -293 l 289 -83 l 453 -83 l 654 -293 l 561 -400 l 371 -267 l 181 -400 l 88 -293 z "},"Ļ":{"ha":725,"x_min":60,"x_max":711,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 z "},"Ŀ":{"ha":725,"x_min":60,"x_max":717,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 m 563 713 q 673 670 629 713 q 717 565 717 628 q 673 460 717 503 q 563 418 629 418 q 452 460 496 418 q 408 565 408 503 q 452 670 408 628 q 563 713 496 713 z "},"Ḷ":{"ha":725,"x_min":60,"x_max":711,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 m 371 -367 q 260 -324 304 -367 q 217 -219 217 -282 q 260 -115 217 -157 q 371 -72 304 -72 q 481 -115 438 -72 q 525 -219 525 -157 q 481 -324 525 -282 q 371 -367 438 -367 z "},"ǈ":{"ha":1103,"x_min":60,"x_max":1061,"o":"m 346 219 l 711 219 l 682 0 l 60 0 l 60 967 l 346 967 l 346 219 z "},"Ł":{"ha":800,"x_min":0,"x_max":786,"o":"m 786 219 l 757 0 l 135 0 l 135 285 l 88 256 l 0 399 l 135 482 l 135 967 l 421 967 l 421 658 l 571 751 l 660 610 l 421 463 l 421 219 l 786 219 z "},"M":{"ha":1099,"x_min":21,"x_max":1078,"o":"m 1078 0 l 796 0 l 789 343 q 788 464 788 383 q 799 738 788 606 l 685 97 l 414 97 l 292 738 q 310 407 310 544 l 310 344 l 303 0 l 21 0 l 90 967 l 443 967 l 554 340 l 654 967 l 1008 967 l 1078 0 z "},"Ḿ":{"ha":1099,"x_min":21,"x_max":1078,"o":"m 1078 0 l 796 0 l 789 343 q 788 464 788 383 q 799 738 788 606 l 685 97 l 414 97 l 292 738 q 310 407 310 544 l 310 344 l 303 0 l 21 0 l 90 967 l 443 967 l 554 340 l 654 967 l 1008 967 l 1078 0 m 760 1167 l 407 1040 l 338 1178 l 663 1367 l 760 1167 z "},"Ṁ":{"ha":1099,"x_min":21,"x_max":1078,"o":"m 1078 0 l 796 0 l 789 343 q 788 464 788 383 q 799 738 788 606 l 685 97 l 414 97 l 292 738 q 310 407 310 544 l 310 344 l 303 0 l 21 0 l 90 967 l 443 967 l 554 340 l 654 967 l 1008 967 l 1078 0 z "},"Ɯ":{"ha":1256,"x_min":46,"x_max":1196,"o":"m 1196 967 l 1196 0 l 944 0 l 925 76 q 824 -3 874 21 q 710 -28 774 -28 q 588 4 640 -28 q 508 93 536 36 q 400 1 453 29 q 278 -28 347 -28 q 108 45 169 -28 q 46 236 46 118 l 46 967 l 332 967 l 332 251 q 346 199 332 218 q 386 179 360 179 q 422 194 404 179 q 456 227 439 208 q 478 253 472 246 l 478 967 l 764 967 l 764 251 q 778 199 764 218 q 817 179 792 179 q 863 197 842 179 q 910 253 885 214 l 910 967 l 1196 967 z "},"N":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 z "},"Ǌ":{"ha":1356,"x_min":60,"x_max":1299,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 m 1299 154 q 1250 -55 1299 28 q 1127 -183 1201 -137 q 953 -262 1053 -229 l 876 -61 q 965 -8 936 -39 q 1003 63 994 24 q 1013 164 1013 103 l 1013 967 l 1299 967 l 1299 154 z "},"Ń":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 m 664 1167 l 311 1040 l 242 1178 l 567 1367 l 664 1167 z "},"Ň":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 m 736 1233 l 535 1038 l 371 1038 l 169 1233 l 263 1340 l 453 1221 l 643 1340 l 736 1233 z "},"Ṋ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 m 169 -293 l 371 -83 l 535 -83 l 736 -293 l 643 -400 l 453 -267 l 263 -400 l 169 -293 z "},"Ņ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 z "},"Ṅ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 z "},"Ṇ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 m 453 -367 q 342 -324 386 -367 q 299 -219 299 -282 q 342 -115 299 -157 q 453 -72 386 -72 q 563 -115 519 -72 q 607 -219 607 -157 q 563 -324 607 -282 q 453 -367 519 -367 z "},"Ǹ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 m 664 1178 l 594 1040 l 242 1167 l 340 1367 l 664 1178 z "},"Ŋ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 967 l 844 -22 q 758 -240 844 -165 q 524 -315 672 -315 q 306 -253 392 -315 l 394 -86 q 444 -108 425 -101 q 489 -114 463 -114 q 540 -95 522 -114 q 558 -40 558 -76 l 558 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 z "},"Ɲ":{"ha":904,"x_min":-196,"x_max":844,"o":"m 844 967 l 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 -22 q 234 -240 313 -165 q 22 -315 156 -315 q -196 -253 -110 -315 l -107 -93 q -58 -115 -76 -108 q -12 -121 -39 -121 q 41 -102 22 -121 q 60 -47 60 -83 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 z "},"ǋ":{"ha":1296,"x_min":60,"x_max":1254,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 z "},"Ƞ":{"ha":893,"x_min":60,"x_max":840,"o":"m 594 994 q 777 925 714 994 q 840 744 840 856 l 840 -299 l 554 -299 l 554 701 q 538 767 554 746 q 485 788 522 788 q 414 770 446 788 q 346 714 382 753 l 346 0 l 60 0 l 60 967 l 311 967 l 331 888 q 452 969 393 944 q 594 994 511 994 z "},"Ñ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 z "},"O":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ȣ":{"ha":903,"x_min":28,"x_max":875,"o":"m 699 564 q 875 310 875 492 q 823 140 875 218 q 675 17 771 63 q 451 -28 579 -28 q 227 17 324 -28 q 79 138 131 61 q 28 310 28 214 q 73 462 28 399 q 203 561 118 525 q 81 769 81 625 l 81 967 l 367 967 l 367 750 q 385 672 367 697 q 451 647 403 647 q 518 672 500 647 q 536 750 536 697 l 536 967 l 822 967 l 822 769 q 790 649 822 701 q 699 564 758 596 m 451 175 q 545 213 513 175 q 578 314 578 250 q 544 417 578 378 q 451 456 511 456 q 358 417 392 456 q 325 314 325 378 q 358 213 325 250 q 451 175 392 175 z "},"Ó":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 690 1167 l 338 1040 l 268 1178 l 593 1367 l 690 1167 z "},"Ŏ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 479 1036 q 297 1112 363 1036 q 222 1294 232 1188 l 365 1318 q 406 1249 378 1276 q 479 1222 435 1222 q 552 1249 524 1222 q 593 1318 581 1276 l 736 1294 q 661 1112 726 1188 q 479 1036 596 1036 z "},"Ǒ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 763 1233 l 561 1038 l 397 1038 l 196 1233 l 289 1340 l 479 1221 l 669 1340 l 763 1233 z "},"Ɵ":{"ha":958,"x_min":28,"x_max":931,"o":"z "},"Ô":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 196 1151 l 397 1347 l 561 1347 l 763 1151 l 669 1044 l 479 1164 l 289 1044 l 196 1151 z "},"Ố":{"ha":958,"x_min":28,"x_max":969,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ộ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 196 1151 l 397 1347 l 561 1347 l 763 1151 l 669 1044 l 479 1164 l 289 1044 l 196 1151 m 479 -367 q 369 -324 413 -367 q 325 -219 325 -282 q 369 -115 325 -157 q 479 -72 413 -72 q 590 -115 546 -72 q 633 -219 633 -157 q 590 -324 633 -282 q 479 -367 546 -367 z "},"Ồ":{"ha":958,"x_min":-10,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ổ":{"ha":958,"x_min":28,"x_max":932,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ỗ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ȍ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ö":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ȫ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ȯ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ȱ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ọ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 479 -367 q 369 -324 413 -367 q 325 -219 325 -282 q 369 -115 325 -157 q 479 -72 413 -72 q 590 -115 546 -72 q 633 -219 633 -157 q 590 -324 633 -282 q 479 -367 546 -367 z "},"Ò":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 690 1178 l 621 1040 l 268 1167 l 367 1367 l 690 1178 z "},"Ỏ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 403 1190 q 478 1203 456 1192 q 501 1239 501 1214 q 488 1267 501 1257 q 450 1278 474 1278 q 408 1274 426 1278 q 364 1260 389 1269 l 324 1363 q 488 1401 389 1401 q 625 1360 576 1401 q 674 1251 674 1318 q 643 1161 674 1196 q 554 1115 613 1126 l 554 1061 l 403 1061 l 403 1190 z "},"Ơ":{"ha":1004,"x_min":28,"x_max":1032,"o":"m 1032 946 q 992 823 1032 869 q 878 761 951 776 q 931 485 931 644 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 794 879 679 994 q 842 903 828 883 q 856 963 856 922 q 839 1053 856 1006 l 1006 1074 q 1032 946 1032 1018 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 z "},"Ớ":{"ha":1004,"x_min":28,"x_max":1032,"o":"m 338 1040 l 268 1178 l 593 1367 l 690 1167 l 338 1040 m 1032 946 q 992 823 1032 869 q 878 761 951 776 q 931 485 931 644 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 794 879 679 994 q 842 903 828 883 q 856 963 856 922 q 839 1053 856 1006 l 1006 1074 q 1032 946 1032 1018 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 z "},"Ợ":{"ha":1004,"x_min":28,"x_max":1032,"o":"m 1032 946 q 992 823 1032 869 q 878 761 951 776 q 931 485 931 644 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 794 879 679 994 q 842 903 828 883 q 856 963 856 922 q 839 1053 856 1006 l 1006 1074 q 1032 946 1032 1018 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 m 479 -72 q 590 -115 546 -72 q 633 -219 633 -157 q 590 -324 633 -282 q 479 -367 546 -367 q 369 -324 413 -367 q 325 -219 325 -282 q 369 -115 325 -157 q 479 -72 413 -72 z "},"Ờ":{"ha":1004,"x_min":28,"x_max":1032,"o":"m 621 1040 l 268 1167 l 367 1367 l 690 1178 l 621 1040 m 1032 946 q 992 823 1032 869 q 878 761 951 776 q 931 485 931 644 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 794 879 679 994 q 842 903 828 883 q 856 963 856 922 q 839 1053 856 1006 l 1006 1074 q 1032 946 1032 1018 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 z "},"Ở":{"ha":1004,"x_min":28,"x_max":1032,"o":"m 450 1278 q 408 1274 426 1278 q 364 1260 389 1269 l 324 1363 q 488 1401 389 1401 q 625 1360 576 1401 q 674 1251 674 1318 q 643 1161 674 1196 q 554 1115 613 1126 l 554 1061 l 403 1061 l 403 1190 q 478 1203 456 1192 q 501 1239 501 1214 q 488 1267 501 1257 q 450 1278 474 1278 m 1032 946 q 992 823 1032 869 q 878 761 951 776 q 931 485 931 644 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 794 879 679 994 q 842 903 828 883 q 856 963 856 922 q 839 1053 856 1006 l 1006 1074 q 1032 946 1032 1018 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 z "},"Ỡ":{"ha":1004,"x_min":28,"x_max":1032,"o":"m 403 1099 q 363 1085 378 1099 q 329 1039 347 1071 l 200 1101 q 280 1237 229 1183 q 396 1290 331 1290 q 448 1283 426 1290 q 493 1260 469 1276 q 530 1237 517 1243 q 557 1231 543 1231 q 596 1244 581 1231 q 629 1290 611 1258 l 758 1228 q 678 1092 729 1144 q 560 1039 626 1039 q 510 1046 531 1039 q 468 1068 490 1053 q 430 1092 442 1086 q 403 1099 418 1099 m 1032 946 q 992 823 1032 869 q 878 761 951 776 q 931 485 931 644 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 794 879 679 994 q 842 903 828 883 q 856 963 856 922 q 839 1053 856 1006 l 1006 1074 q 1032 946 1032 1018 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 z "},"Ő":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 574 1267 l 396 1035 l 278 1096 l 404 1356 l 574 1267 m 822 1244 l 632 1022 l 518 1090 l 658 1343 l 822 1244 z "},"Ƣ":{"ha":1363,"x_min":28,"x_max":1303,"o":"m 986 994 q 1217 919 1132 994 q 1303 701 1303 844 l 1303 -299 l 1017 -299 l 1017 713 q 947 800 1017 800 q 863 782 906 800 q 931 485 931 661 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 740 919 631 994 q 986 994 851 994 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 z "},"Ȏ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 479 1346 q 662 1268 597 1346 q 736 1074 726 1190 l 593 1050 q 552 1131 581 1101 q 479 1160 524 1160 q 406 1131 435 1160 q 365 1050 378 1101 l 222 1074 q 297 1268 232 1190 q 479 1346 361 1346 z "},"Ō":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ṓ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ṑ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ꞷ":{"ha":1272,"x_min":56,"x_max":1217,"o":"m 1106 967 q 1188 722 1160 844 q 1217 422 1217 600 q 1135 83 1217 194 q 890 -28 1053 -28 q 638 151 690 -28 q 549 16 614 60 q 397 -28 483 -28 q 138 82 221 -28 q 56 422 56 192 q 84 721 56 599 q 165 967 113 843 l 428 967 l 418 929 q 361 688 381 793 q 342 439 342 583 q 362 235 342 296 q 431 175 382 175 q 499 278 499 175 l 499 554 l 781 554 l 781 278 q 795 197 781 219 q 847 175 810 175 q 912 235 893 175 q 931 439 931 294 q 917 640 931 549 q 883 799 903 731 q 831 967 864 867 l 1106 967 z "},"Ǫ":{"ha":958,"x_min":28,"x_max":931,"o":"m 931 485 q 858 174 931 300 q 651 0 786 49 q 527 -65 563 -29 q 492 -132 492 -100 q 563 -193 492 -193 q 647 -182 599 -193 l 631 -342 q 528 -353 582 -353 q 368 -306 431 -353 q 306 -178 306 -258 q 381 -19 306 -83 q 119 141 210 10 q 28 485 28 272 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 813 860 696 994 q 931 485 931 726 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ǭ":{"ha":958,"x_min":28,"x_max":931,"o":"m 704 1075 l 253 1075 l 253 1261 l 704 1261 l 704 1075 m 931 485 q 858 174 931 300 q 651 0 786 49 q 527 -65 563 -29 q 492 -132 492 -100 q 563 -193 492 -193 q 647 -182 599 -193 l 631 -342 q 528 -353 582 -353 q 368 -306 431 -353 q 306 -178 306 -258 q 381 -19 306 -83 q 119 141 210 10 q 28 485 28 272 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 813 860 696 994 q 931 485 931 726 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ɔ":{"ha":811,"x_min":0,"x_max":783,"o":"m 339 994 q 572 934 471 994 q 728 759 672 874 q 783 486 783 644 q 727 206 783 322 q 567 31 671 90 q 325 -28 464 -28 q 144 10 226 -28 q 0 107 61 47 l 124 264 q 217 206 175 225 q 310 188 258 188 q 440 258 394 188 q 486 486 486 329 q 444 717 486 644 q 322 789 403 789 q 231 772 272 789 q 147 721 190 754 l 11 881 q 157 965 78 936 q 339 994 236 994 z "},"Ø":{"ha":958,"x_min":28,"x_max":931,"o":"m 738 926 q 881 753 832 865 q 931 485 931 640 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 425 -25 461 -28 l 374 -193 l 165 -137 l 221 42 q 77 216 126 103 q 28 485 28 329 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 533 992 497 994 l 585 1157 l 793 1101 l 738 926 m 479 792 q 361 722 397 792 q 325 485 325 651 q 346 267 325 336 l 504 790 q 479 792 496 792 m 479 175 q 598 246 563 175 q 633 485 633 317 q 613 700 633 632 l 456 176 q 479 175 463 175 z "},"Ǿ":{"ha":958,"x_min":28,"x_max":931,"o":"m 738 926 q 881 753 832 865 q 931 485 931 640 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 425 -25 461 -28 l 374 -193 l 165 -137 l 221 42 q 77 216 126 103 q 28 485 28 329 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 533 992 497 994 l 585 1157 l 793 1101 l 738 926 m 479 792 q 361 722 397 792 q 325 485 325 651 q 346 267 325 336 l 504 790 q 479 792 496 792 m 479 175 q 598 246 563 175 q 633 485 633 317 q 613 700 633 632 l 456 176 q 479 175 463 175 m 690 1229 l 338 1103 l 268 1240 l 593 1429 l 690 1229 z "},"Õ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ṍ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ȭ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Œ":{"ha":1264,"x_min":28,"x_max":1236,"o":"m 896 394 q 824 200 878 283 l 1229 200 l 1229 0 l 603 0 q 454 -28 536 -28 q 226 33 322 -28 q 79 210 131 94 q 28 485 28 325 q 79 756 28 640 q 226 933 131 871 q 454 994 322 994 q 608 967 540 994 l 1236 967 l 1207 768 l 825 768 q 894 588 876 690 l 1168 588 l 1168 394 l 896 394 m 465 175 q 572 247 539 175 q 606 485 606 318 q 572 720 606 649 q 465 792 538 792 q 359 720 393 792 q 325 485 325 649 q 359 247 325 319 q 465 175 393 175 z "},"P":{"ha":849,"x_min":60,"x_max":828,"o":"m 408 967 q 717 884 607 967 q 828 642 828 801 q 723 389 828 476 q 440 301 618 301 l 346 301 l 346 0 l 60 0 l 60 967 l 408 967 m 413 503 q 536 642 536 503 q 404 768 536 768 l 346 768 l 346 503 l 413 503 z "},"Ṕ":{"ha":849,"x_min":60,"x_max":828,"o":"m 408 967 q 717 884 607 967 q 828 642 828 801 q 723 389 828 476 q 440 301 618 301 l 346 301 l 346 0 l 60 0 l 60 967 l 408 967 m 413 503 q 536 642 536 503 q 404 768 536 768 l 346 768 l 346 503 l 413 503 m 636 1167 l 283 1040 l 214 1178 l 539 1367 l 636 1167 z "},"Ṗ":{"ha":849,"x_min":60,"x_max":828,"o":"m 408 967 q 717 884 607 967 q 828 642 828 801 q 723 389 828 476 q 440 301 618 301 l 346 301 l 346 0 l 60 0 l 60 967 l 408 967 m 413 503 q 536 642 536 503 q 404 768 536 768 l 346 768 l 346 503 l 413 503 z "},"Ƥ":{"ha":1094,"x_min":0,"x_max":1074,"o":"m 654 967 q 963 884 853 967 q 1074 642 1074 801 q 969 389 1074 476 q 686 301 864 301 l 592 301 l 592 0 l 306 0 l 306 768 l 271 768 q 214 717 214 768 q 219 678 214 697 q 235 632 224 660 l 64 560 q 17 648 35 606 q 0 736 0 690 q 78 906 0 844 q 286 967 157 967 l 654 967 m 658 503 q 782 642 782 503 q 650 768 782 768 l 592 768 l 592 503 l 658 503 z "},"Þ":{"ha":849,"x_min":60,"x_max":828,"o":"m 408 824 q 717 741 607 824 q 828 497 828 658 q 723 236 828 325 q 440 147 618 147 l 346 147 l 346 0 l 60 0 l 60 967 l 346 967 l 346 824 l 408 824 m 413 349 q 505 385 474 349 q 536 497 536 421 q 404 625 536 625 l 346 625 l 346 349 l 413 349 z "},"Q":{"ha":958,"x_min":28,"x_max":1000,"o":"m 700 67 q 869 46 800 67 q 1000 -21 938 25 l 832 -240 q 670 -83 758 -143 q 458 -22 582 -22 q 227 38 324 -22 q 79 211 131 97 q 28 485 28 325 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 813 860 696 994 q 931 485 931 726 q 865 226 931 326 q 700 67 799 125 m 325 485 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 z "},"Ɋ":{"ha":938,"x_min":28,"x_max":1131,"o":"m 1131 -253 q 913 -315 1044 -315 q 678 -240 764 -315 q 592 -22 592 -165 l 592 36 q 410 -28 521 -28 q 207 33 293 -28 q 74 206 121 93 q 28 471 28 318 q 77 750 28 632 q 213 931 126 868 q 413 994 300 994 q 615 915 529 994 l 622 967 l 878 967 l 878 -40 q 896 -95 878 -76 q 947 -114 914 -114 q 992 -108 974 -114 q 1042 -86 1011 -101 l 1131 -253 m 476 168 q 592 208 542 168 l 592 747 q 476 792 544 792 q 362 718 399 792 q 325 471 325 644 q 362 236 325 304 q 476 168 399 168 z "},"R":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 344 l 346 344 l 346 0 l 60 0 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 m 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 l 346 536 z "},"Ŕ":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 344 l 346 344 l 346 0 l 60 0 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 m 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 l 346 536 m 631 1167 l 278 1040 l 208 1178 l 533 1367 l 631 1167 z "},"Ř":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 344 l 346 344 l 346 0 l 60 0 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 m 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 l 346 536 m 703 1233 l 501 1038 l 338 1038 l 136 1233 l 229 1340 l 419 1221 l 610 1340 l 703 1233 z "},"Ŗ":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 344 l 346 344 l 346 0 l 60 0 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 m 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 l 346 536 z "},"Ȑ":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 344 l 346 344 l 346 0 l 60 0 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 m 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 l 346 536 z "},"Ṛ":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 344 l 346 344 l 346 0 l 60 0 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 m 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 l 346 536 m 433 -367 q 323 -324 367 -367 q 279 -219 279 -282 q 323 -115 279 -157 q 433 -72 367 -72 q 544 -115 500 -72 q 588 -219 588 -157 q 544 -324 588 -282 q 433 -367 500 -367 z "},"Ȓ":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 344 l 346 344 l 346 0 l 60 0 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 m 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 l 346 536 m 419 1346 q 602 1268 538 1346 q 676 1074 667 1190 l 533 1050 q 492 1131 521 1101 q 419 1160 464 1160 q 347 1131 375 1160 q 306 1050 318 1101 l 163 1074 q 237 1268 172 1190 q 419 1346 301 1346 z "},"Ɍ":{"ha":889,"x_min":14,"x_max":917,"o":"m 421 344 l 368 344 l 368 0 l 82 0 l 82 344 l 14 344 l 14 536 l 82 536 l 82 967 l 436 967 q 749 892 646 967 q 851 660 851 818 q 811 510 851 569 q 681 397 771 450 l 917 0 l 600 0 l 421 344 m 368 771 l 368 536 l 443 536 q 531 567 501 536 q 560 660 560 597 q 429 771 560 771 l 368 771 z "},"Ɽ":{"ha":867,"x_min":60,"x_max":894,"o":"m 415 -114 q 460 -108 442 -114 q 510 -86 479 -101 l 599 -253 q 381 -315 513 -315 q 146 -240 232 -315 q 60 -22 60 -165 l 60 967 l 414 967 q 726 892 624 967 q 829 660 829 818 q 789 510 829 569 q 658 397 749 450 l 894 0 l 578 0 l 399 344 l 346 344 l 346 -40 q 364 -95 346 -76 q 415 -114 382 -114 m 346 771 l 346 536 l 421 536 q 508 567 479 536 q 538 660 538 597 q 407 771 538 771 l 346 771 z "},"S":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 z "},"Ś":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 m 638 1167 l 285 1040 l 215 1178 l 540 1367 l 638 1167 z "},"Ꞌ":{"ha":368,"x_min":56,"x_max":313,"o":"m 56 967 l 313 967 l 282 453 l 86 453 l 56 967 z "},"Š":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 m 710 1233 l 508 1038 l 344 1038 l 143 1233 l 236 1340 l 426 1221 l 617 1340 l 710 1233 z "},"Ş":{"ha":817,"x_min":0,"x_max":796,"o":"m 796 289 q 711 81 796 165 q 475 -22 626 -3 l 475 -60 q 628 -210 628 -79 q 567 -333 628 -285 q 400 -382 506 -382 q 303 -369 349 -382 q 226 -335 258 -356 l 286 -215 q 375 -240 332 -240 q 438 -207 438 -240 q 407 -176 438 -185 q 307 -167 376 -167 l 325 -25 q 0 118 131 -7 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 z "},"Ŝ":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 m 143 1151 l 344 1347 l 508 1347 l 710 1151 l 617 1044 l 426 1164 l 236 1044 l 143 1151 z "},"Ș":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 z "},"Ṡ":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 z "},"Ṣ":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 m 407 -367 q 297 -324 340 -367 q 253 -219 253 -282 q 297 -115 253 -157 q 407 -72 340 -72 q 517 -115 474 -72 q 561 -219 561 -157 q 517 -324 561 -282 q 407 -367 474 -367 z "},"ẞ":{"ha":940,"x_min":60,"x_max":919,"o":"m 424 994 q 645 970 551 994 q 856 896 739 946 l 856 781 l 671 550 q 852 463 785 526 q 919 275 919 400 q 872 108 919 176 q 744 6 824 39 q 572 -28 665 -28 q 379 13 460 -28 l 460 196 q 532 182 492 182 q 595 206 568 182 q 622 281 622 229 q 578 378 622 343 q 431 428 535 414 l 431 557 l 590 769 q 444 792 519 792 q 369 765 392 792 q 346 679 346 739 l 346 0 l 60 0 l 60 669 q 153 908 60 822 q 424 994 246 994 z "},"Ə":{"ha":881,"x_min":14,"x_max":853,"o":"m 424 994 q 742 865 631 994 q 853 486 853 735 q 742 105 853 238 q 429 -28 631 -28 q 115 106 217 -28 q 14 472 14 239 q 24 578 14 526 l 565 578 q 394 792 557 792 q 286 773 332 792 q 192 719 240 754 l 68 868 q 228 963 143 932 q 424 994 314 994 m 429 175 q 530 224 496 175 q 565 390 564 274 l 288 390 q 324 225 288 275 q 429 175 361 175 z "},"T":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 z "},"Ŧ":{"ha":769,"x_min":7,"x_max":776,"o":"m 528 753 l 528 543 l 679 543 l 679 396 l 528 396 l 528 0 l 242 0 l 242 396 l 89 396 l 89 543 l 242 543 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 l 528 753 z "},"Ť":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 m 668 1233 l 467 1038 l 303 1038 l 101 1233 l 194 1340 l 385 1221 l 575 1340 l 668 1233 z "},"Ţ":{"ha":769,"x_min":7,"x_max":776,"o":"m 528 -60 q 681 -210 681 -79 q 619 -333 681 -285 q 453 -382 558 -382 q 357 -368 403 -382 q 279 -335 311 -354 l 339 -215 q 425 -240 385 -240 q 474 -233 458 -240 q 490 -206 490 -225 q 460 -176 490 -185 q 360 -167 429 -167 l 381 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 l 528 753 l 528 -60 z "},"Ṱ":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 m 101 -293 l 303 -83 l 467 -83 l 668 -293 l 575 -400 l 385 -267 l 194 -400 l 101 -293 z "},"Ț":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 z "},"Ⱦ":{"ha":769,"x_min":7,"x_max":776,"o":"m 633 767 l 507 519 l 507 0 l 263 0 l 263 42 l 186 -107 l 113 -68 l 263 225 l 263 767 l 7 767 l 7 967 l 643 967 l 688 1054 l 761 1015 l 736 967 l 776 967 l 747 767 l 633 767 m 540 767 l 507 767 l 507 701 l 540 767 z "},"Ṫ":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 z "},"Ṭ":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 m 385 -367 q 274 -324 318 -367 q 231 -219 231 -282 q 274 -115 231 -157 q 385 -72 318 -72 q 495 -115 451 -72 q 539 -219 539 -157 q 495 -324 539 -282 q 385 -367 451 -367 z "},"Ƭ":{"ha":860,"x_min":0,"x_max":867,"o":"m 838 753 l 618 753 l 618 0 l 332 0 l 332 753 l 271 753 q 228 740 243 753 q 214 703 214 726 q 218 670 214 685 q 232 632 222 656 l 51 560 q 0 736 0 650 q 81 906 0 844 q 299 967 161 967 l 867 967 l 838 753 z "},"Ṯ":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 z "},"Ƽ":{"ha":781,"x_min":7,"x_max":746,"o":"m 665 775 l 333 775 l 333 617 q 471 646 401 646 q 611 608 549 646 q 710 499 674 571 q 746 325 746 426 q 697 139 746 218 q 558 16 649 60 q 344 -28 467 -28 q 149 15 235 -28 q 7 129 64 57 l 158 267 q 235 199 190 224 q 333 175 281 175 q 431 212 397 175 q 465 322 465 249 q 354 464 465 464 q 249 431 306 464 l 69 431 l 69 967 l 694 967 l 665 775 z "},"Ƅ":{"ha":890,"x_min":0,"x_max":876,"o":"m 483 651 q 775 572 674 651 q 876 336 876 493 q 772 86 876 172 q 494 0 667 0 l 108 0 l 108 656 l 0 733 q 158 967 92 828 l 394 967 l 394 651 l 483 651 m 457 201 q 549 235 519 201 q 579 333 579 269 q 451 460 579 460 l 394 460 l 394 201 l 457 201 z "},"Ƨ":{"ha":803,"x_min":21,"x_max":803,"o":"m 415 994 q 608 958 525 994 q 738 856 692 922 q 783 701 783 789 q 713 522 783 593 q 475 399 642 450 q 351 341 385 371 q 318 268 318 311 q 431 182 318 182 q 663 272 550 182 l 803 118 q 633 13 732 54 q 407 -28 533 -28 q 203 13 290 -28 q 68 124 115 53 q 21 289 21 196 q 88 481 21 410 q 308 600 156 551 q 451 659 413 633 q 489 722 489 685 q 463 773 489 754 q 392 792 438 792 q 278 772 331 792 q 178 714 226 753 l 51 863 q 415 994 199 994 z "},"Ʈ":{"ha":774,"x_min":7,"x_max":781,"o":"m 781 -253 q 563 -315 694 -315 q 328 -240 414 -315 q 242 -22 242 -165 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 l 528 753 l 528 -40 q 546 -95 528 -76 q 597 -114 564 -114 q 642 -108 624 -114 q 692 -86 661 -101 l 781 -253 z "},"U":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"Ú":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 658 1167 l 306 1040 l 236 1178 l 561 1367 l 658 1167 z "},"Ʉ":{"ha":939,"x_min":0,"x_max":939,"o":"m 939 688 l 871 688 l 871 328 q 826 146 871 226 q 692 19 782 65 q 469 -28 601 -28 q 169 68 271 -28 q 68 328 68 164 l 68 688 l 0 688 l 0 835 l 68 835 l 68 967 l 354 967 l 354 835 l 585 835 l 585 967 l 871 967 l 871 835 l 939 835 l 939 688 m 585 688 l 354 688 l 354 336 q 381 216 354 254 q 469 178 408 178 q 558 216 531 178 q 585 336 585 254 l 585 688 z "},"Ŭ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 447 1036 q 265 1112 331 1036 q 190 1294 200 1188 l 333 1318 q 374 1249 346 1276 q 447 1222 403 1222 q 520 1249 492 1222 q 561 1318 549 1276 l 704 1294 q 629 1112 694 1188 q 447 1036 564 1036 z "},"Ǔ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 731 1233 l 529 1038 l 365 1038 l 164 1233 l 257 1340 l 447 1221 l 638 1340 l 731 1233 z "},"Û":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 164 1151 l 365 1347 l 529 1347 l 731 1151 l 638 1044 l 447 1164 l 257 1044 l 164 1151 z "},"Ȕ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"Ü":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"Ǘ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 681 1450 l 443 1243 l 342 1333 l 536 1592 l 681 1450 m 263 1297 q 356 1260 317 1297 q 394 1169 394 1222 q 356 1078 394 1115 q 263 1040 317 1040 q 169 1078 207 1040 q 131 1169 131 1115 q 169 1260 131 1222 q 263 1297 207 1297 m 631 1297 q 724 1260 685 1297 q 763 1169 763 1222 q 724 1078 763 1115 q 631 1040 685 1040 q 537 1078 575 1040 q 499 1169 499 1115 q 537 1260 499 1222 q 631 1297 575 1297 z "},"Ǚ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 728 1486 l 526 1290 l 363 1290 l 161 1486 l 254 1593 l 444 1474 l 635 1593 l 728 1486 m 263 1297 q 356 1260 317 1297 q 394 1169 394 1222 q 356 1078 394 1115 q 263 1040 317 1040 q 169 1078 207 1040 q 131 1169 131 1115 q 169 1260 131 1222 q 263 1297 207 1297 m 631 1297 q 724 1260 685 1297 q 763 1169 763 1222 q 724 1078 763 1115 q 631 1040 685 1040 q 537 1078 575 1040 q 499 1169 499 1115 q 537 1260 499 1222 q 631 1297 575 1297 z "},"Ǜ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 554 1333 l 453 1243 l 215 1450 l 360 1592 l 554 1333 m 263 1297 q 356 1260 318 1297 q 394 1169 394 1222 q 356 1078 394 1115 q 263 1040 318 1040 q 169 1078 208 1040 q 131 1169 131 1115 q 169 1260 131 1222 q 263 1297 208 1297 m 631 1297 q 724 1260 686 1297 q 763 1169 763 1222 q 724 1078 763 1115 q 631 1040 686 1040 q 538 1078 576 1040 q 499 1169 499 1115 q 538 1260 499 1222 q 631 1297 576 1297 z "},"Ǖ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"Ụ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 447 -367 q 337 -324 381 -367 q 293 -219 293 -282 q 337 -115 293 -157 q 447 -72 381 -72 q 558 -115 514 -72 q 601 -219 601 -157 q 558 -324 601 -282 q 447 -367 514 -367 z "},"Ù":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 658 1178 l 589 1040 l 236 1167 l 335 1367 l 658 1178 z "},"Ủ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 371 1190 q 447 1203 424 1192 q 469 1239 469 1214 q 456 1267 469 1257 q 418 1278 442 1278 q 376 1274 394 1278 q 332 1260 357 1269 l 292 1363 q 456 1401 357 1401 q 593 1360 544 1401 q 642 1251 642 1318 q 611 1161 642 1196 q 522 1115 581 1126 l 522 1061 l 371 1061 l 371 1190 z "},"Ư":{"ha":1049,"x_min":46,"x_max":1076,"o":"m 1050 1074 q 1076 946 1076 1018 q 1016 803 1076 851 q 849 754 956 754 l 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 881 q 888 906 876 886 q 900 963 900 925 q 883 1053 900 1006 l 1050 1074 z "},"Ứ":{"ha":1049,"x_min":46,"x_max":1076,"o":"m 306 1040 l 236 1178 l 561 1367 l 658 1167 l 306 1040 m 1050 1074 q 1076 946 1076 1018 q 1016 803 1076 851 q 849 754 956 754 l 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 881 q 888 906 876 886 q 900 963 900 925 q 883 1053 900 1006 l 1050 1074 z "},"Ự":{"ha":1049,"x_min":46,"x_max":1076,"o":"m 1050 1074 q 1076 946 1076 1018 q 1016 803 1076 851 q 849 754 956 754 l 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 881 q 888 906 876 886 q 900 963 900 925 q 883 1053 900 1006 l 1050 1074 m 447 -72 q 558 -115 514 -72 q 601 -219 601 -157 q 558 -324 601 -282 q 447 -367 514 -367 q 337 -324 381 -367 q 293 -219 293 -282 q 337 -115 293 -157 q 447 -72 381 -72 z "},"Ừ":{"ha":1049,"x_min":46,"x_max":1076,"o":"m 589 1040 l 236 1167 l 335 1367 l 658 1178 l 589 1040 m 1050 1074 q 1076 946 1076 1018 q 1016 803 1076 851 q 849 754 956 754 l 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 881 q 888 906 876 886 q 900 963 900 925 q 883 1053 900 1006 l 1050 1074 z "},"Ử":{"ha":1049,"x_min":46,"x_max":1076,"o":"m 418 1278 q 376 1274 394 1278 q 332 1260 357 1269 l 292 1363 q 456 1401 357 1401 q 593 1360 544 1401 q 642 1251 642 1318 q 611 1161 642 1196 q 522 1115 581 1126 l 522 1061 l 371 1061 l 371 1190 q 447 1203 424 1192 q 469 1239 469 1214 q 456 1267 469 1257 q 418 1278 442 1278 m 1050 1074 q 1076 946 1076 1018 q 1016 803 1076 851 q 849 754 956 754 l 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 881 q 888 906 876 886 q 900 963 900 925 q 883 1053 900 1006 l 1050 1074 z "},"Ữ":{"ha":1049,"x_min":46,"x_max":1076,"o":"m 371 1099 q 331 1085 346 1099 q 297 1039 315 1071 l 168 1101 q 248 1237 197 1183 q 364 1290 299 1290 q 416 1283 394 1290 q 461 1260 438 1276 q 498 1237 485 1243 q 525 1231 511 1231 q 564 1244 549 1231 q 597 1290 579 1258 l 726 1228 q 646 1092 697 1144 q 528 1039 594 1039 q 478 1046 499 1039 q 436 1068 458 1053 q 398 1092 410 1086 q 371 1099 386 1099 m 1050 1074 q 1076 946 1076 1018 q 1016 803 1076 851 q 849 754 956 754 l 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 881 q 888 906 876 886 q 900 963 900 925 q 883 1053 900 1006 l 1050 1074 z "},"Ű":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 542 1267 l 364 1035 l 246 1096 l 372 1356 l 542 1267 m 790 1244 l 600 1022 l 486 1090 l 626 1343 l 790 1244 z "},"Ȗ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 m 447 1346 q 630 1268 565 1346 q 704 1074 694 1190 l 561 1050 q 520 1131 549 1101 q 447 1160 492 1160 q 374 1131 403 1160 q 333 1050 346 1101 l 190 1074 q 265 1268 200 1190 q 447 1346 329 1346 z "},"Ū":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"Ų":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 967 l 849 328 q 792 126 849 214 q 625 0 735 39 q 500 -65 535 -31 q 465 -132 465 -100 q 536 -193 465 -193 q 621 -182 572 -193 l 604 -342 q 501 -353 556 -353 q 342 -306 404 -353 q 279 -178 279 -258 q 383 -25 279 -78 q 131 84 217 -10 q 46 328 46 178 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 z "},"Ʊ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 -28 q 237 31 339 -28 q 81 189 135 89 q 28 408 28 289 q 213 769 28 653 l 57 769 l 57 967 l 413 967 l 413 783 q 346 633 367 714 q 325 408 325 553 q 363 234 325 293 q 479 175 400 175 q 596 234 558 175 q 633 408 633 293 q 613 633 633 553 q 546 783 592 714 l 546 967 l 901 967 l 901 769 l 746 769 q 931 408 931 654 q 877 189 931 289 q 722 31 824 89 q 479 -28 619 -28 z "},"Ů":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"Ũ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"Ṹ":{"ha":894,"x_min":46,"x_max":849,"o":"m 849 328 q 804 146 849 226 q 669 19 760 65 q 447 -28 579 -28 q 147 68 249 -28 q 46 328 46 164 l 46 967 l 332 967 l 332 336 q 359 216 332 254 q 447 178 386 178 q 535 216 508 178 q 563 336 563 254 l 563 967 l 849 967 l 849 328 z "},"V":{"ha":804,"x_min":-35,"x_max":839,"o":"m 594 0 l 225 0 l -35 967 l 267 967 l 414 199 l 546 967 l 839 967 l 594 0 z "},"Ɣ":{"ha":804,"x_min":-35,"x_max":839,"o":"m 547 147 q 619 8 596 72 q 643 -124 643 -57 q 587 -264 643 -212 q 407 -315 531 -315 q 228 -264 286 -315 q 171 -124 171 -212 q 193 -2 171 -62 q 268 147 215 58 l -35 967 l 267 967 l 407 329 l 546 967 l 839 967 l 547 147 m 444 -106 q 436 -59 444 -82 q 407 8 428 -36 q 369 -107 369 -69 q 407 -147 369 -147 q 444 -106 444 -147 z "},"Ʋ":{"ha":894,"x_min":46,"x_max":849,"o":"m 608 994 q 849 731 849 994 l 849 397 q 795 168 849 264 q 644 22 742 72 q 417 -28 546 -28 q 219 14 303 -28 q 90 130 135 56 q 46 300 46 204 l 46 967 l 332 967 l 332 297 q 356 210 332 242 q 426 178 381 178 q 526 227 489 178 q 563 388 563 276 l 563 749 q 526 793 563 793 q 497 789 513 793 l 460 971 q 608 994 524 994 z "},"Ʌ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 869 0 l 567 0 l 415 767 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 z "},"W":{"ha":1193,"x_min":0,"x_max":1193,"o":"m 1053 0 l 681 0 l 594 694 l 499 0 l 135 0 l 0 967 l 286 967 l 347 207 l 450 967 l 749 967 l 835 207 l 918 967 l 1193 967 l 1053 0 z "},"Ẃ":{"ha":1193,"x_min":0,"x_max":1193,"o":"m 1053 0 l 681 0 l 594 694 l 499 0 l 135 0 l 0 967 l 286 967 l 347 207 l 450 967 l 749 967 l 835 207 l 918 967 l 1193 967 l 1053 0 m 811 1167 l 458 1040 l 389 1178 l 714 1367 l 811 1167 z "},"Ŵ":{"ha":1193,"x_min":0,"x_max":1193,"o":"m 1053 0 l 681 0 l 594 694 l 499 0 l 135 0 l 0 967 l 286 967 l 347 207 l 450 967 l 749 967 l 835 207 l 918 967 l 1193 967 l 1053 0 m 317 1151 l 518 1347 l 682 1347 l 883 1151 l 790 1044 l 600 1164 l 410 1044 l 317 1151 z "},"Ẅ":{"ha":1193,"x_min":0,"x_max":1193,"o":"m 1053 0 l 681 0 l 594 694 l 499 0 l 135 0 l 0 967 l 286 967 l 347 207 l 450 967 l 749 967 l 835 207 l 918 967 l 1193 967 l 1053 0 z "},"Ẁ":{"ha":1193,"x_min":0,"x_max":1193,"o":"m 1053 0 l 681 0 l 594 694 l 499 0 l 135 0 l 0 967 l 286 967 l 347 207 l 450 967 l 749 967 l 835 207 l 918 967 l 1193 967 l 1053 0 m 811 1178 l 742 1040 l 389 1167 l 488 1367 l 811 1178 z "},"Ⱳ":{"ha":1299,"x_min":0,"x_max":1340,"o":"m 135 0 l 499 0 l 594 694 l 681 0 l 1043 0 l 1133 726 q 1153 781 1138 764 q 1200 797 1169 797 q 1235 794 1222 797 q 1268 781 1249 790 l 1340 943 q 1257 981 1300 968 q 1153 994 1214 994 q 967 930 1035 994 q 885 718 899 865 l 835 207 l 749 967 l 450 967 l 347 207 l 286 967 l 0 967 l 135 0 z "},"Ƿ":{"ha":849,"x_min":60,"x_max":828,"o":"m 564 994 q 697 960 636 994 q 792 865 757 926 q 828 724 828 803 q 778 533 828 610 q 647 408 729 457 q 440 315 565 360 l 346 282 l 346 0 l 60 0 l 60 967 l 346 967 l 346 914 q 441 974 385 953 q 564 994 497 994 m 368 482 q 498 578 460 525 q 536 703 536 632 q 513 772 536 747 q 450 796 489 796 q 346 758 394 796 l 346 472 l 368 482 z "},"X":{"ha":842,"x_min":-14,"x_max":856,"o":"m 856 0 l 547 0 l 414 332 l 289 0 l -14 0 l 244 513 l 4 967 l 311 967 l 417 689 l 535 967 l 836 967 l 586 521 l 856 0 z "},"Y":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Ý":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 m 642 1167 l 289 1040 l 219 1178 l 544 1367 l 642 1167 z "},"Ŷ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 m 147 1151 l 349 1347 l 513 1347 l 714 1151 l 621 1044 l 431 1164 l 240 1044 l 147 1151 z "},"Ÿ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Ỵ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 m 431 -367 q 320 -324 364 -367 q 276 -219 276 -282 q 320 -115 276 -157 q 431 -72 364 -72 q 541 -115 497 -72 q 585 -219 585 -157 q 541 -324 585 -282 q 431 -367 497 -367 z "},"Ỳ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 m 642 1178 l 572 1040 l 219 1167 l 318 1367 l 642 1178 z "},"Ƴ":{"ha":918,"x_min":-21,"x_max":960,"o":"m 288 356 l -21 967 l 292 967 l 435 572 l 499 768 q 602 942 538 890 q 779 994 667 994 q 960 946 878 994 l 889 781 q 821 797 853 797 q 772 783 790 797 q 738 732 753 768 l 574 357 l 574 0 l 288 0 l 288 356 z "},"Ỷ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 m 354 1190 q 430 1203 407 1192 q 453 1239 453 1214 q 439 1267 453 1257 q 401 1278 425 1278 q 359 1274 378 1278 q 315 1260 340 1269 l 275 1363 q 439 1401 340 1401 q 576 1360 528 1401 q 625 1251 625 1318 q 594 1161 625 1196 q 506 1115 564 1126 l 506 1061 l 354 1061 l 354 1190 z "},"Ȳ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Ʀ":{"ha":867,"x_min":60,"x_max":894,"o":"m 399 192 l 346 192 l 346 0 l 60 0 l 60 967 l 346 967 l 346 814 l 414 814 q 726 740 624 814 q 829 507 829 665 q 789 357 829 417 q 658 244 749 297 l 894 -153 l 578 -153 l 399 192 m 346 383 l 421 383 q 508 414 479 383 q 538 507 538 444 q 407 618 538 618 l 346 618 l 346 383 z "},"Ɏ":{"ha":863,"x_min":-21,"x_max":883,"o":"m 883 863 l 883 715 l 756 715 l 575 357 l 575 0 l 289 0 l 289 356 l 107 715 l -21 715 l -21 863 l 33 863 l -19 967 l 279 967 l 318 863 l 556 863 l 594 967 l 883 967 l 831 863 l 883 863 m 500 715 l 372 715 l 436 544 l 500 715 z "},"Ỹ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Z":{"ha":774,"x_min":14,"x_max":753,"o":"m 740 754 l 356 224 l 753 224 l 725 0 l 14 0 l 14 210 l 411 750 l 53 750 l 53 967 l 740 967 l 740 754 z "},"Ź":{"ha":774,"x_min":14,"x_max":753,"o":"m 740 754 l 356 224 l 753 224 l 725 0 l 14 0 l 14 210 l 411 750 l 53 750 l 53 967 l 740 967 l 740 754 m 599 1167 l 246 1040 l 176 1178 l 501 1367 l 599 1167 z "},"Ž":{"ha":774,"x_min":14,"x_max":753,"o":"m 740 754 l 356 224 l 753 224 l 725 0 l 14 0 l 14 210 l 411 750 l 53 750 l 53 967 l 740 967 l 740 754 m 671 1233 l 469 1038 l 306 1038 l 104 1233 l 197 1340 l 388 1221 l 578 1340 l 671 1233 z "},"Ż":{"ha":774,"x_min":14,"x_max":753,"o":"m 740 754 l 356 224 l 753 224 l 725 0 l 14 0 l 14 210 l 411 750 l 53 750 l 53 967 l 740 967 l 740 754 z "},"Ẓ":{"ha":774,"x_min":14,"x_max":753,"o":"m 740 754 l 356 224 l 753 224 l 725 0 l 14 0 l 14 210 l 411 750 l 53 750 l 53 967 l 740 967 l 740 754 m 372 -367 q 262 -324 306 -367 q 218 -219 218 -282 q 262 -115 218 -157 q 372 -72 306 -72 q 483 -115 439 -72 q 526 -219 526 -157 q 483 -324 526 -282 q 372 -367 439 -367 z "},"Ȥ":{"ha":761,"x_min":14,"x_max":740,"o":"m 740 754 l 356 224 l 740 224 l 740 -22 q 654 -240 740 -165 q 419 -315 568 -315 q 201 -253 288 -315 l 290 -86 q 341 -108 321 -101 q 392 -114 361 -114 q 468 -40 468 -114 l 468 0 l 14 0 l 14 210 l 411 750 l 53 750 l 53 967 l 740 967 l 740 754 z "},"Ƶ":{"ha":774,"x_min":14,"x_max":753,"o":"m 753 224 l 725 0 l 14 0 l 14 196 l 169 399 l 64 399 l 64 565 l 297 565 l 439 750 l 53 750 l 53 967 l 740 967 l 740 768 l 586 565 l 678 565 l 678 399 l 460 399 l 328 224 l 753 224 z "},"ʙ":{"ha":767,"x_min":58,"x_max":743,"o":"m 553 410 q 743 224 743 386 q 651 56 743 113 q 400 0 558 0 l 58 0 l 58 735 q 381 769 251 769 q 626 719 539 769 q 713 568 713 668 q 672 465 713 506 q 553 410 632 424 m 374 604 q 333 603 351 604 l 333 457 l 375 457 q 426 476 407 457 q 444 531 444 496 q 426 585 444 565 q 374 604 408 604 m 389 171 q 463 251 463 171 q 444 309 463 289 q 389 329 425 329 l 333 329 l 333 171 l 389 171 z "},"ɢ":{"ha":778,"x_min":24,"x_max":747,"o":"m 428 769 q 602 741 528 769 q 736 661 676 713 l 610 525 q 530 568 568 554 q 447 582 492 582 q 306 374 306 582 q 333 209 306 254 q 417 164 360 164 q 493 176 458 164 l 493 272 l 421 272 l 396 444 l 747 444 l 747 72 q 592 2 678 29 q 413 -25 507 -25 q 119 74 214 -25 q 24 375 24 172 q 75 584 24 494 q 219 722 126 674 q 428 769 311 769 z "},"ʛ":{"ha":778,"x_min":24,"x_max":957,"o":"m 754 1061 q 957 1010 869 1061 l 886 840 q 797 864 836 864 q 751 846 765 864 q 736 789 736 828 l 736 661 l 624 539 q 538 572 574 563 q 451 582 501 582 q 306 374 306 582 q 333 209 306 254 q 417 164 360 164 q 493 176 458 164 l 493 272 l 421 272 l 396 444 l 747 444 l 747 72 q 600 1 685 26 q 417 -25 515 -25 q 119 75 215 -25 q 24 375 24 175 q 74 583 24 493 q 209 721 124 672 q 396 769 294 769 q 503 754 453 769 l 503 813 q 565 996 503 931 q 754 1061 626 1061 z "},"ʜ":{"ha":808,"x_min":58,"x_max":750,"o":"m 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 l 750 0 l 475 0 l 475 276 z "},"ɪ":{"ha":472,"x_min":14,"x_max":458,"o":"m 374 550 l 374 194 l 458 194 l 458 0 l 14 0 l 14 194 l 99 194 l 99 550 l 14 550 l 14 742 l 458 742 l 458 550 l 374 550 z "},"ʟ":{"ha":638,"x_min":58,"x_max":631,"o":"m 333 206 l 631 206 l 603 0 l 58 0 l 58 742 l 333 742 l 333 206 z "},"ɴ":{"ha":810,"x_min":58,"x_max":751,"o":"m 751 0 l 428 0 l 256 513 q 288 335 276 414 q 299 160 299 257 l 299 0 l 58 0 l 58 742 l 378 742 l 554 231 l 546 274 q 519 435 528 369 q 511 593 511 500 l 511 742 l 751 742 l 751 0 z "},"ɶ":{"ha":1079,"x_min":24,"x_max":1058,"o":"m 765 286 q 719 185 751 233 l 1049 185 l 1049 0 l 556 0 q 406 -28 485 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 558 742 475 769 l 1058 742 l 1031 558 l 721 558 q 764 464 751 510 l 999 464 l 999 286 l 765 286 m 406 169 q 481 217 458 169 q 503 372 503 264 q 480 526 503 481 q 406 572 457 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 z "},"ʀ":{"ha":739,"x_min":58,"x_max":760,"o":"m 354 239 l 319 239 l 319 0 l 58 0 l 58 742 l 364 742 q 700 486 700 742 q 673 363 700 417 q 590 278 646 310 l 760 0 l 476 0 l 354 239 m 319 393 l 354 393 q 418 413 399 393 q 438 488 438 433 q 419 557 438 539 q 357 575 400 575 l 319 575 l 319 393 z "},"ʁ":{"ha":739,"x_min":58,"x_max":760,"o":"m 590 464 q 673 379 646 432 q 700 260 700 326 q 364 0 700 0 l 58 0 l 58 742 l 319 742 l 319 503 l 354 503 l 476 742 l 760 742 l 590 464 m 357 167 q 419 185 400 167 q 438 258 438 204 q 418 328 438 308 q 354 349 399 349 l 319 349 l 319 167 l 357 167 z "},"ʏ":{"ha":725,"x_min":-28,"x_max":753,"o":"m 500 263 l 500 0 l 225 0 l 225 261 l -28 742 l 265 742 l 367 432 l 468 742 l 753 742 l 500 263 z "},"a":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"á":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 582 989 l 233 851 l 160 989 l 479 1189 l 582 989 z "},"ă":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 385 869 q 202 947 267 869 q 128 1142 138 1025 l 271 1165 q 312 1085 283 1114 q 385 1056 340 1056 q 458 1085 429 1056 q 499 1165 486 1114 l 642 1142 q 567 947 632 1025 q 385 869 503 869 z "},"ắ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ặ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 385 869 q 202 947 267 869 q 128 1142 138 1025 l 271 1165 q 312 1085 283 1114 q 385 1056 340 1056 q 458 1085 429 1056 q 499 1165 486 1114 l 642 1142 q 567 947 632 1025 q 385 869 503 869 m 385 -367 q 274 -324 318 -367 q 231 -219 231 -282 q 274 -115 231 -157 q 385 -72 318 -72 q 495 -115 451 -72 q 539 -219 539 -157 q 495 -324 539 -282 q 385 -367 451 -367 z "},"ằ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ẳ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ẵ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ǎ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 668 1046 l 467 836 l 303 836 l 101 1046 l 194 1153 l 385 1019 l 575 1153 l 668 1046 z "},"â":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 101 957 l 303 1167 l 467 1167 l 668 957 l 575 850 l 385 983 l 194 850 l 101 957 z "},"ấ":{"ha":765,"x_min":21,"x_max":875,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ậ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 101 957 l 303 1167 l 467 1167 l 668 957 l 575 850 l 385 983 l 194 850 l 101 957 m 385 -367 q 274 -324 318 -367 q 231 -219 231 -282 q 274 -115 231 -157 q 385 -72 318 -72 q 495 -115 451 -72 q 539 -219 539 -157 q 495 -324 539 -282 q 385 -367 451 -367 z "},"ầ":{"ha":765,"x_min":-103,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ẩ":{"ha":765,"x_min":21,"x_max":794,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ẫ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ȁ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 360 925 l 226 861 l 44 1133 l 215 1218 l 360 925 m 613 921 l 476 867 l 306 1140 l 479 1218 l 613 921 z "},"ä":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 214 1136 q 308 1099 269 1136 q 346 1008 346 1061 q 308 917 346 954 q 214 879 269 879 q 121 917 160 879 q 82 1008 82 954 q 121 1099 82 1061 q 214 1136 160 1136 m 554 1136 q 648 1099 610 1136 q 686 1008 686 1061 q 648 917 686 954 q 554 879 610 879 q 461 917 500 879 q 422 1008 422 954 q 461 1099 422 1061 q 554 1136 500 1136 z "},"ǟ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ȧ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 385 1151 q 495 1109 451 1151 q 539 1004 539 1067 q 495 899 539 942 q 385 857 451 857 q 274 899 318 857 q 231 1004 231 942 q 274 1109 231 1067 q 385 1151 318 1151 z "},"ạ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 385 -367 q 274 -324 318 -367 q 231 -219 231 -282 q 274 -115 231 -157 q 385 -72 318 -72 q 495 -115 451 -72 q 539 -219 539 -157 q 495 -324 539 -282 q 385 -367 451 -367 z "},"ǡ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"à":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 610 989 l 536 851 l 188 989 l 290 1189 l 610 989 z "},"ả":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 308 978 q 384 990 361 979 q 407 1026 407 1001 q 393 1055 407 1044 q 356 1065 379 1065 q 313 1061 332 1065 q 269 1047 294 1057 l 229 1150 q 393 1189 294 1189 q 531 1147 482 1189 q 579 1039 579 1106 q 549 949 579 983 q 460 903 518 914 l 460 835 l 308 835 l 308 978 z "},"ȃ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 385 1121 q 567 1043 503 1121 q 642 849 632 965 l 499 825 q 458 906 486 876 q 385 935 429 935 q 312 906 340 935 q 271 825 283 876 l 128 849 q 202 1043 138 965 q 385 1121 267 1121 z "},"ɑ":{"ha":828,"x_min":24,"x_max":821,"o":"m 764 281 q 776 209 764 233 q 821 168 789 185 l 743 -28 q 610 10 661 -17 q 529 85 558 38 q 432 3 488 33 q 310 -28 376 -28 q 97 80 169 -28 q 24 375 24 188 q 62 580 24 490 q 171 719 100 669 q 338 769 242 769 q 511 690 444 769 l 524 742 l 764 742 l 764 281 m 394 169 q 489 235 451 169 l 489 531 q 449 563 469 553 q 404 574 429 574 q 306 372 306 574 q 329 210 306 251 q 394 169 353 169 z "},"ɒ":{"ha":828,"x_min":7,"x_max":804,"o":"m 518 769 q 731 662 658 769 q 804 367 804 554 q 766 162 804 251 q 657 22 728 72 q 490 -28 586 -28 q 317 51 383 -28 l 304 0 l 64 0 l 64 461 q 51 533 64 508 q 7 574 39 557 l 85 769 q 218 731 167 758 q 299 657 269 704 q 396 739 340 708 q 518 769 451 769 m 424 168 q 522 369 522 168 q 499 531 522 490 q 433 572 475 572 q 339 507 376 572 l 339 211 q 378 178 358 189 q 424 168 399 168 z "},"ā":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 158 900 l 158 1086 l 610 1086 l 610 900 l 158 900 z "},"ą":{"ha":765,"x_min":21,"x_max":744,"o":"m 689 -22 q 565 -87 600 -51 q 529 -154 529 -122 q 600 -215 529 -215 q 685 -204 636 -215 l 668 -364 q 565 -375 619 -375 q 406 -328 468 -375 q 343 -200 343 -281 q 535 26 343 -51 q 489 81 506 50 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"å":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 385 1231 q 499 1203 450 1231 q 573 1129 547 1175 q 599 1028 599 1083 q 573 926 599 972 q 499 851 547 879 q 385 824 450 824 q 271 851 319 824 q 197 926 222 879 q 171 1028 171 972 q 197 1129 171 1083 q 271 1203 222 1175 q 385 1231 319 1231 m 385 1092 q 344 1076 360 1092 q 329 1028 329 1060 q 344 980 329 996 q 385 964 360 964 q 425 980 410 964 q 440 1028 440 996 q 425 1076 440 1060 q 385 1092 410 1092 z "},"ǻ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"ⱥ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 329 -22 433 -4 l 310 -107 l 228 -89 l 242 -26 q 81 45 142 -19 q 21 208 21 110 q 106 381 21 318 q 353 449 192 443 l 388 596 l 367 596 q 253 585 321 596 q 133 557 186 575 l 74 711 q 222 754 142 739 q 367 769 301 769 q 428 767 389 769 l 444 839 l 525 821 l 510 754 q 654 667 608 731 q 700 496 700 603 l 700 240 m 474 501 q 464 558 474 539 l 439 449 l 474 449 l 474 501 m 371 156 q 474 206 418 164 l 474 319 l 408 319 l 371 156 m 261 228 q 288 165 261 183 l 321 313 q 276 283 290 303 q 261 228 261 263 z "},"ã":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 465 864 q 416 871 436 864 q 374 893 396 878 q 335 917 347 911 q 308 924 324 924 q 268 910 283 924 q 235 864 253 896 l 106 926 q 185 1062 135 1008 q 301 1115 236 1115 q 353 1108 332 1115 q 399 1085 375 1101 q 435 1062 422 1068 q 463 1056 449 1056 q 501 1069 486 1056 q 535 1115 517 1083 l 664 1053 q 583 917 635 969 q 465 864 532 864 z "},"ɐ":{"ha":765,"x_min":21,"x_max":744,"o":"m 440 167 q 526 177 474 167 q 632 206 578 188 l 692 31 q 544 -12 624 3 q 399 -28 464 -28 q 144 40 224 -28 q 65 246 65 107 l 65 501 q 56 559 65 540 q 21 588 46 578 l 76 764 q 199 735 151 758 q 276 661 246 713 q 500 769 349 769 q 677 703 610 769 q 744 533 744 638 q 653 344 744 410 q 386 279 561 279 l 333 279 l 333 261 q 356 186 333 206 q 440 167 378 167 m 415 576 q 369 564 390 576 q 333 532 347 551 l 333 422 l 363 422 q 449 443 421 422 q 476 507 476 464 q 460 558 476 539 q 415 576 443 576 z "},"æ":{"ha":1197,"x_min":21,"x_max":1176,"o":"m 1176 381 q 1171 293 1176 346 l 721 293 q 767 192 732 218 q 869 167 803 167 q 949 183 908 167 q 1038 232 989 199 l 1149 82 q 843 -28 1014 -28 q 663 5 740 -28 q 533 94 585 38 q 271 -28 447 -28 q 88 38 156 -28 q 21 208 21 104 q 115 397 21 332 q 390 463 208 463 l 443 463 l 443 478 q 421 553 443 533 q 336 572 399 572 q 251 562 303 572 q 144 533 199 551 l 85 711 q 233 754 153 739 q 378 769 313 769 q 607 685 531 769 q 835 769 699 769 q 1011 724 933 769 q 1133 590 1089 678 q 1176 381 1176 501 m 906 458 q 885 560 904 524 q 818 596 867 596 q 749 564 772 596 q 719 449 726 532 l 906 449 l 906 458 m 365 165 q 416 182 394 165 q 460 231 438 199 q 449 306 450 272 l 449 313 l 417 313 q 333 293 360 313 q 307 229 307 274 q 322 183 307 200 q 365 165 338 165 z "},"ǽ":{"ha":1197,"x_min":21,"x_max":1176,"o":"m 1176 381 q 1171 293 1176 346 l 721 293 q 767 192 732 218 q 869 167 803 167 q 949 183 908 167 q 1038 232 989 199 l 1149 82 q 843 -28 1014 -28 q 663 5 740 -28 q 533 94 585 38 q 271 -28 447 -28 q 88 38 156 -28 q 21 208 21 104 q 115 397 21 332 q 390 463 208 463 l 443 463 l 443 478 q 421 553 443 533 q 336 572 399 572 q 251 562 303 572 q 144 533 199 551 l 85 711 q 233 754 153 739 q 378 769 313 769 q 607 685 531 769 q 835 769 699 769 q 1011 724 933 769 q 1133 590 1089 678 q 1176 381 1176 501 m 906 458 q 885 560 904 524 q 818 596 867 596 q 749 564 772 596 q 719 449 726 532 l 906 449 l 906 458 m 365 165 q 416 182 394 165 q 460 231 438 199 q 449 306 450 272 l 449 313 l 417 313 q 333 293 360 313 q 307 229 307 274 q 322 183 307 200 q 365 165 338 165 m 794 989 l 446 851 l 372 989 l 692 1189 l 794 989 z "},"ǣ":{"ha":1197,"x_min":21,"x_max":1176,"o":"m 1176 381 q 1171 293 1176 346 l 721 293 q 767 192 732 218 q 869 167 803 167 q 949 183 908 167 q 1038 232 989 199 l 1149 82 q 843 -28 1014 -28 q 663 5 740 -28 q 533 94 585 38 q 271 -28 447 -28 q 88 38 156 -28 q 21 208 21 104 q 115 397 21 332 q 390 463 208 463 l 443 463 l 443 478 q 421 553 443 533 q 336 572 399 572 q 251 562 303 572 q 144 533 199 551 l 85 711 q 233 754 153 739 q 378 769 313 769 q 607 685 531 769 q 835 769 699 769 q 1011 724 933 769 q 1133 590 1089 678 q 1176 381 1176 501 m 906 458 q 885 560 904 524 q 818 596 867 596 q 749 564 772 596 q 719 449 726 532 l 906 449 l 906 458 m 365 165 q 416 182 394 165 q 460 231 438 199 q 449 306 450 272 l 449 313 l 417 313 q 333 293 360 313 q 307 229 307 274 q 322 183 307 200 q 365 165 338 165 m 371 900 l 371 1086 l 822 1086 l 822 900 l 371 900 z "},"b":{"ha":825,"x_min":58,"x_max":801,"o":"m 528 769 q 732 665 663 769 q 801 369 801 560 q 766 165 801 256 q 663 24 731 75 q 504 -28 596 -28 q 395 -3 444 -28 q 313 64 346 21 l 303 0 l 58 0 l 58 1033 l 333 1061 l 333 676 q 417 744 364 718 q 528 769 469 769 m 421 168 q 494 214 468 168 q 519 369 519 260 q 497 531 519 489 q 431 572 474 572 q 333 503 374 572 l 333 222 q 421 168 365 168 z "},"ḃ":{"ha":825,"x_min":58,"x_max":801,"o":"m 528 769 q 732 665 663 769 q 801 369 801 560 q 766 165 801 256 q 663 24 731 75 q 504 -28 596 -28 q 395 -3 444 -28 q 313 64 346 21 l 303 0 l 58 0 l 58 1033 l 333 1061 l 333 676 q 417 744 364 718 q 528 769 469 769 m 421 168 q 494 214 468 168 q 519 369 519 260 q 497 531 519 489 q 431 572 474 572 q 333 503 374 572 l 333 222 q 421 168 365 168 z "},"ḅ":{"ha":825,"x_min":58,"x_max":801,"o":"m 528 769 q 732 665 663 769 q 801 369 801 560 q 766 165 801 256 q 663 24 731 75 q 504 -28 596 -28 q 395 -3 444 -28 q 313 64 346 21 l 303 0 l 58 0 l 58 1033 l 333 1061 l 333 676 q 417 744 364 718 q 528 769 469 769 m 421 168 q 494 214 468 168 q 519 369 519 260 q 497 531 519 489 q 431 572 474 572 q 333 503 374 572 l 333 222 q 421 168 365 168 m 428 -367 q 317 -324 361 -367 q 274 -219 274 -282 q 317 -115 274 -157 q 428 -72 361 -72 q 538 -115 494 -72 q 582 -219 582 -157 q 538 -324 582 -282 q 428 -367 494 -367 z "},"ꞵ":{"ha":847,"x_min":58,"x_max":828,"o":"m 564 564 q 750 493 672 553 q 828 292 828 433 q 788 126 828 199 q 676 13 747 54 q 511 -28 604 -28 q 321 26 404 -28 l 321 -278 l 58 -315 l 58 763 q 103 923 58 856 q 228 1026 149 990 q 408 1061 308 1061 q 592 1026 515 1061 q 708 931 668 992 q 747 794 747 871 q 702 647 747 707 q 564 564 657 588 m 426 179 q 518 213 485 179 q 551 319 551 247 q 513 432 551 401 q 413 463 475 463 l 368 463 l 382 642 l 394 642 q 459 674 438 642 q 481 767 481 706 q 403 874 481 874 q 342 847 364 874 q 321 765 321 819 l 321 199 q 426 179 363 179 z "},"ɓ":{"ha":825,"x_min":58,"x_max":801,"o":"m 521 769 q 731 665 661 769 q 801 369 801 561 q 766 165 801 256 q 663 24 731 75 q 504 -28 596 -28 q 395 -3 444 -28 q 313 64 346 21 l 303 0 l 58 0 l 58 785 q 139 983 58 906 q 372 1061 219 1061 q 490 1047 431 1061 q 590 1010 550 1032 l 518 839 q 410 864 464 864 q 351 843 369 864 q 333 771 333 822 l 333 676 q 416 744 364 718 q 521 769 468 769 m 424 168 q 494 214 469 168 q 519 369 519 260 q 497 531 519 489 q 432 572 474 572 q 333 503 372 572 l 333 222 q 424 168 365 168 z "},"ʭ":{"ha":528,"x_min":42,"x_max":486,"o":"m 42 797 l 486 797 l 486 556 l 329 556 l 329 667 l 199 667 l 199 556 l 42 556 l 42 797 m 42 242 l 486 242 l 486 0 l 329 0 l 329 111 l 199 111 l 199 0 l 42 0 l 42 242 z "},"ʘ":{"ha":1113,"x_min":28,"x_max":1085,"o":"m 557 994 q 834 931 714 994 q 1019 752 954 868 q 1085 485 1085 636 q 1019 222 1085 339 q 833 39 953 106 q 557 -28 713 -28 q 280 36 400 -28 q 94 217 160 100 q 28 485 28 333 q 94 747 28 631 q 281 928 160 863 q 557 994 401 994 m 557 811 q 297 485 297 811 q 557 156 297 156 q 750 235 685 156 q 815 485 815 315 q 745 731 815 650 q 557 811 675 811 m 557 600 q 646 566 611 600 q 681 482 681 532 q 646 399 681 432 q 557 365 611 365 q 468 399 503 365 q 433 482 433 432 q 468 566 433 532 q 557 600 503 600 z "},"ʬ":{"ha":653,"x_min":43,"x_max":611,"o":"m 532 556 l 374 556 l 333 825 l 286 556 l 132 556 l 43 929 l 156 929 l 214 636 l 263 929 l 407 929 l 454 635 l 504 929 l 611 929 l 532 556 m 532 0 l 374 0 l 333 269 l 286 0 l 132 0 l 43 374 l 156 374 l 214 81 l 263 374 l 407 374 l 454 79 l 504 374 l 611 374 l 532 0 z "},"ƀ":{"ha":839,"x_min":0,"x_max":815,"o":"m 542 769 q 746 665 676 769 q 815 369 815 560 q 780 165 815 256 q 677 24 744 75 q 518 -28 610 -28 q 409 -3 458 -28 q 326 64 360 21 l 317 0 l 72 0 l 72 819 l 0 819 l 0 967 l 72 967 l 72 1033 l 347 1061 l 347 967 l 517 967 l 517 819 l 347 819 l 347 676 q 431 744 378 718 q 542 769 483 769 m 435 168 q 508 214 482 168 q 533 369 533 260 q 510 531 533 489 q 444 572 488 572 q 347 503 388 572 l 347 222 q 435 168 379 168 z "},"ƃ":{"ha":825,"x_min":58,"x_max":801,"o":"m 521 742 q 731 640 661 742 q 801 356 801 538 q 766 161 801 249 q 663 23 731 74 q 504 -28 596 -28 q 395 -3 444 -28 q 313 64 346 21 l 303 0 l 58 0 l 58 1033 l 631 1033 l 603 840 l 333 840 l 333 649 q 416 716 364 690 q 521 742 468 742 m 424 168 q 519 356 519 168 q 497 505 519 465 q 432 544 474 544 q 333 475 372 544 l 333 222 q 424 168 365 168 z "},"c":{"ha":665,"x_min":24,"x_max":679,"o":"m 410 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 207 22 296 -28 q 71 160 118 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 z "},"ć":{"ha":665,"x_min":24,"x_max":679,"o":"m 410 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 207 22 296 -28 q 71 160 118 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 m 603 989 l 254 851 l 181 989 l 500 1189 l 603 989 z "},"č":{"ha":665,"x_min":24,"x_max":689,"o":"m 410 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 207 22 296 -28 q 71 160 118 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 m 689 1046 l 488 836 l 324 836 l 122 1046 l 215 1153 l 406 1019 l 596 1153 l 689 1046 z "},"ç":{"ha":665,"x_min":24,"x_max":679,"o":"m 679 64 q 463 -25 583 -14 l 463 -60 q 615 -210 615 -79 q 554 -333 615 -285 q 388 -382 493 -382 q 291 -369 336 -382 q 214 -335 246 -356 l 274 -215 q 363 -240 319 -240 q 425 -207 425 -240 q 394 -176 425 -185 q 294 -167 364 -167 l 313 -17 q 100 115 176 13 q 24 365 24 217 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 z "},"ĉ":{"ha":665,"x_min":24,"x_max":689,"o":"m 410 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 207 22 296 -28 q 71 160 118 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 m 122 957 l 324 1167 l 488 1167 l 689 957 l 596 850 l 406 983 l 215 850 l 122 957 z "},"ɕ":{"ha":707,"x_min":24,"x_max":714,"o":"m 529 371 q 661 324 608 371 q 714 194 714 278 q 635 28 714 83 q 438 -28 557 -28 q 340 -19 381 -28 l 293 -125 l 169 -78 l 217 22 q 74 156 124 67 q 24 365 24 246 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 325 244 310 296 q 408 342 358 313 q 529 371 458 371 m 472 160 q 536 204 536 160 q 501 238 536 238 q 419 167 454 238 q 472 160 447 160 z "},"ċ":{"ha":665,"x_min":24,"x_max":679,"o":"m 410 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 207 22 296 -28 q 71 160 118 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 m 406 1151 q 516 1109 472 1151 q 560 1004 560 1067 q 516 899 560 942 q 406 857 472 857 q 295 899 339 857 q 251 1004 251 942 q 295 1109 251 1067 q 406 1151 339 1151 z "},"ꭓ":{"ha":724,"x_min":-28,"x_max":751,"o":"m 751 -299 l 476 -299 l 364 39 l 253 -299 l -28 -287 l 222 250 l 21 742 l 289 742 l 367 431 l 443 742 l 718 742 l 501 257 l 751 -299 z "},"ƈ":{"ha":665,"x_min":24,"x_max":901,"o":"m 697 1061 q 901 1010 811 1061 l 829 840 q 740 864 779 864 q 694 846 708 864 q 679 789 679 828 l 679 671 l 581 532 q 440 563 515 563 q 342 518 374 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 207 22 296 -28 q 71 160 118 71 q 24 365 24 250 q 69 573 24 481 q 194 717 115 665 q 368 769 274 769 q 446 760 404 769 l 446 813 q 508 996 446 931 q 697 1061 569 1061 z "},"ʗ":{"ha":672,"x_min":31,"x_max":686,"o":"m 438 769 q 686 671 585 769 l 576 518 q 456 563 513 563 q 351 484 385 563 q 317 222 317 406 q 349 -29 317 44 q 444 -103 382 -103 q 503 -92 476 -103 q 568 -57 531 -82 l 686 -224 q 436 -315 574 -315 q 135 -174 240 -315 q 31 222 31 -32 q 79 513 31 390 q 219 703 128 636 q 438 769 311 769 z "},"ȼ":{"ha":665,"x_min":24,"x_max":679,"o":"m 432 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 363 -25 396 -28 l 340 -107 l 253 -86 l 274 -7 q 90 130 156 32 q 24 365 24 228 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 q 478 765 444 769 l 497 839 l 583 818 l 564 743 q 679 671 628 717 l 565 511 q 511 546 540 532 l 417 185 l 432 185 m 310 365 q 336 231 310 275 l 424 563 q 338 515 367 560 q 310 365 310 469 z "},"d":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ð":{"ha":811,"x_min":24,"x_max":781,"o":"m 508 936 q 717 703 654 836 q 781 394 781 571 q 737 183 781 279 q 606 29 693 86 q 397 -28 519 -28 q 206 15 290 -28 q 72 136 121 57 q 24 324 24 215 q 65 503 24 424 q 173 626 106 582 q 318 669 240 669 q 410 657 369 669 q 489 621 450 644 q 440 711 469 672 q 363 788 411 750 l 300 724 l 131 800 l 193 867 q 88 888 133 881 l 140 1060 q 339 1015 243 1046 l 444 1126 l 579 1008 l 508 936 m 403 168 q 479 210 458 168 q 500 347 500 251 l 500 453 q 401 483 457 483 q 303 326 303 483 q 328 204 303 240 q 403 168 353 168 z "},"ȸ":{"ha":1206,"x_min":24,"x_max":1182,"o":"m 929 769 q 1117 664 1051 769 q 1182 369 1182 558 q 1147 166 1182 257 q 1047 24 1111 75 q 899 -28 983 -28 q 799 -2 846 -28 q 722 72 753 24 l 711 0 l 497 0 l 486 76 q 292 -28 410 -28 q 92 80 161 -28 q 24 375 24 188 q 60 578 24 489 q 163 719 97 668 q 313 769 229 769 q 397 750 357 769 q 467 690 436 731 l 467 1033 l 742 1061 l 742 675 q 823 744 774 718 q 929 769 872 769 m 388 169 q 427 186 406 169 q 467 235 449 203 l 467 526 q 393 574 432 574 q 330 526 354 574 q 306 372 306 478 q 328 211 306 253 q 388 169 351 169 m 818 168 q 877 215 854 168 q 900 369 900 261 q 879 530 900 488 q 825 572 858 572 q 742 513 781 572 l 742 228 q 778 184 758 200 q 818 168 799 168 z "},"ď":{"ha":1026,"x_min":24,"x_max":1054,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 m 1054 1032 l 858 1061 l 824 729 l 974 707 l 1054 1032 z "},"ḓ":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 m 138 -293 l 339 -83 l 503 -83 l 704 -293 l 611 -400 l 421 -267 l 231 -400 l 138 -293 z "},"đ":{"ha":849,"x_min":24,"x_max":849,"o":"m 849 967 l 849 819 l 769 819 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 819 l 329 819 l 329 967 l 494 967 l 494 1061 l 769 1033 l 769 967 l 849 967 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ȡ":{"ha":1131,"x_min":24,"x_max":1131,"o":"m 953 358 q 1080 313 1029 358 q 1131 190 1131 268 q 1051 26 1131 81 q 847 -28 972 -28 q 790 -25 826 -28 l 744 -125 l 621 -78 l 663 8 q 542 113 586 43 q 440 8 497 44 q 306 -28 383 -28 q 94 79 165 -28 q 24 375 24 186 q 62 580 24 490 q 172 719 100 669 q 340 769 243 769 q 423 754 382 769 q 494 711 464 739 l 494 1061 l 769 1033 l 769 306 q 775 239 769 263 q 848 331 807 303 q 953 358 889 358 m 401 169 q 499 242 458 169 q 494 306 494 271 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 318 243 306 288 q 351 184 331 199 q 401 169 371 169 m 899 160 q 938 169 922 160 q 953 196 953 178 q 945 217 953 210 q 924 225 938 225 q 895 212 907 225 q 868 161 883 199 q 899 160 878 160 z "},"ḋ":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ḍ":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 m 421 -367 q 310 -324 354 -367 q 267 -219 267 -282 q 310 -115 267 -157 q 421 -72 354 -72 q 531 -115 488 -72 q 575 -219 575 -157 q 531 -324 575 -282 q 421 -367 488 -367 z "},"ƍ":{"ha":800,"x_min":24,"x_max":776,"o":"m 563 111 q 675 17 647 63 q 703 -90 703 -28 q 622 -252 703 -189 q 372 -315 540 -315 q 215 -290 286 -315 q 96 -225 143 -265 l 217 -86 q 357 -131 288 -131 q 444 -82 444 -131 q 437 -51 444 -64 q 403 -25 429 -39 q 322 11 378 -11 q 93 160 163 74 q 24 393 24 247 q 70 596 24 511 q 201 725 117 681 q 400 769 286 769 q 676 673 576 769 q 776 406 776 576 q 724 235 776 310 q 563 111 671 160 m 306 392 q 314 293 306 328 q 349 233 322 258 q 431 179 375 208 q 485 271 472 222 q 497 392 497 319 q 474 530 497 488 q 401 572 451 572 q 329 530 353 572 q 306 392 306 488 z "},"ʤ":{"ha":1465,"x_min":24,"x_max":1458,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 m 1176 299 q 1385 215 1313 285 q 1458 15 1458 144 q 1411 -153 1458 -78 q 1274 -272 1364 -228 q 1061 -315 1185 -315 q 713 -162 838 -315 l 854 -25 q 947 -90 904 -69 q 1042 -110 990 -110 q 1140 -74 1101 -110 q 1178 35 1178 -37 q 1140 124 1178 97 q 1029 151 1101 151 l 889 151 l 889 300 l 1097 542 l 775 542 l 775 742 l 1407 742 l 1407 558 l 1176 299 z "},"ɗ":{"ha":828,"x_min":24,"x_max":992,"o":"m 788 1061 q 992 1010 901 1061 l 919 840 q 831 864 869 864 q 784 846 799 864 q 769 789 769 828 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 62 580 24 490 q 172 719 100 669 q 340 769 243 769 q 423 754 382 769 q 494 711 464 739 l 494 785 q 569 983 494 906 q 788 1061 644 1061 m 401 169 q 494 235 457 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 318 243 306 288 q 351 184 331 199 q 401 169 371 169 z "},"ḏ":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ɖ":{"ha":828,"x_min":24,"x_max":1025,"o":"m 1025 -253 q 806 -315 939 -315 q 578 -240 663 -315 q 494 -22 494 -165 l 494 53 q 306 -28 419 -28 q 94 79 165 -28 q 24 375 24 186 q 62 580 24 490 q 172 719 100 669 q 340 769 243 769 q 423 754 382 769 q 494 711 464 739 l 494 1061 l 769 1033 l 769 -47 q 788 -102 769 -83 q 842 -121 807 -121 q 888 -115 868 -121 q 936 -96 907 -110 l 1025 -253 m 401 169 q 494 235 457 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 318 243 306 288 q 351 184 331 199 q 401 169 371 169 z "},"ƌ":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 77 165 -28 q 24 361 24 182 q 62 556 24 469 q 172 692 100 643 q 340 742 244 742 q 423 726 382 742 q 494 683 464 711 l 494 840 l 211 840 l 211 1033 l 769 1033 l 769 0 m 401 169 q 494 235 457 169 l 494 504 q 456 535 474 525 q 414 546 438 546 q 335 501 365 546 q 306 358 306 456 q 331 208 306 246 q 401 169 356 169 z "},"ǳ":{"ha":1476,"x_min":24,"x_max":1469,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 m 1460 551 l 1156 203 l 1469 203 l 1446 0 l 835 0 l 835 192 l 1143 542 l 863 542 l 863 742 l 1460 742 l 1460 551 z "},"ʣ":{"ha":1413,"x_min":24,"x_max":1406,"o":"m 1406 203 l 1382 0 l 771 0 l 771 185 l 1093 542 l 769 542 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 l 769 742 l 1396 742 l 1396 551 l 1078 203 l 1406 203 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ǆ":{"ha":1476,"x_min":24,"x_max":1469,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ʥ":{"ha":1596,"x_min":24,"x_max":1617,"o":"m 1426 413 q 1563 363 1510 413 q 1617 229 1617 314 q 1540 59 1617 119 q 1303 0 1464 -1 q 1294 -137 1294 -42 l 1294 -183 l 1149 -183 q 1157 0 1149 -75 l 771 0 l 771 192 l 1093 542 l 769 542 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 l 769 742 l 1396 742 l 1396 565 l 1064 203 l 1185 203 q 1279 364 1218 315 q 1426 413 1340 413 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 m 1367 203 q 1439 247 1439 203 q 1430 270 1439 261 q 1404 279 1421 279 q 1329 203 1351 279 l 1367 203 z "},"e":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"é":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 593 989 l 244 851 l 171 989 l 490 1189 l 593 989 z "},"ĕ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 396 869 q 213 947 278 869 q 139 1142 149 1025 l 282 1165 q 323 1085 294 1114 q 396 1056 351 1056 q 469 1085 440 1056 q 510 1165 497 1114 l 653 1142 q 578 947 643 1025 q 396 869 514 869 z "},"ě":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 679 1046 l 478 836 l 314 836 l 113 1046 l 206 1153 l 396 1019 l 586 1153 l 679 1046 z "},"ȩ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 486 -24 621 -7 l 486 -60 q 639 -210 639 -79 q 578 -333 639 -285 q 411 -382 517 -382 q 315 -369 360 -382 q 238 -335 269 -356 l 297 -215 q 386 -240 343 -240 q 449 -207 449 -240 q 418 -176 449 -185 q 318 -167 388 -167 l 336 -21 q 103 107 182 3 q 24 369 24 211 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"ê":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 113 957 l 314 1167 l 478 1167 l 679 957 l 586 850 l 396 983 l 206 850 l 113 957 z "},"ế":{"ha":778,"x_min":24,"x_max":886,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"ệ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 113 957 l 314 1167 l 478 1167 l 679 957 l 586 850 l 396 983 l 206 850 l 113 957 m 408 -367 q 298 -324 342 -367 q 254 -219 254 -282 q 298 -115 254 -157 q 408 -72 342 -72 q 519 -115 475 -72 q 563 -219 563 -157 q 519 -324 563 -282 q 408 -367 475 -367 z "},"ề":{"ha":778,"x_min":-92,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"ể":{"ha":778,"x_min":24,"x_max":806,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"ễ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"ȅ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 371 925 l 238 861 l 56 1133 l 226 1218 l 371 925 m 624 921 l 488 867 l 317 1140 l 490 1218 l 624 921 z "},"ë":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 225 1136 q 319 1099 281 1136 q 357 1008 357 1061 q 319 917 357 954 q 225 879 281 879 q 132 917 171 879 q 93 1008 93 954 q 132 1099 93 1061 q 225 1136 171 1136 m 565 1136 q 659 1099 621 1136 q 697 1008 697 1061 q 659 917 697 954 q 565 879 621 879 q 472 917 511 879 q 433 1008 433 954 q 472 1099 433 1061 q 565 1136 511 1136 z "},"ė":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 396 1151 q 506 1109 463 1151 q 550 1004 550 1067 q 506 899 550 942 q 396 857 463 857 q 285 899 329 857 q 242 1004 242 942 q 285 1109 242 1067 q 396 1151 329 1151 z "},"ẹ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 408 -367 q 298 -324 342 -367 q 254 -219 254 -282 q 298 -115 254 -157 q 408 -72 342 -72 q 519 -115 475 -72 q 563 -219 563 -157 q 519 -324 563 -282 q 408 -367 475 -367 z "},"è":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 621 989 l 547 851 l 199 989 l 301 1189 l 621 989 z "},"ẻ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 319 978 q 395 990 372 979 q 418 1026 418 1001 q 404 1055 418 1044 q 367 1065 390 1065 q 324 1061 343 1065 q 281 1047 306 1057 l 240 1150 q 404 1189 306 1189 q 542 1147 493 1189 q 590 1039 590 1106 q 560 949 590 983 q 471 903 529 914 l 471 835 l 319 835 l 319 978 z "},"ȇ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 396 1121 q 578 1043 514 1121 q 653 849 643 965 l 510 825 q 469 906 497 876 q 396 935 440 935 q 323 906 351 935 q 282 825 294 876 l 139 849 q 213 1043 149 965 q 396 1121 278 1121 z "},"ē":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 169 900 l 169 1086 l 621 1086 l 621 900 l 169 900 z "},"ę":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 557 -8 651 19 q 481 -63 503 -35 q 458 -117 458 -92 q 529 -178 458 -178 q 614 -167 565 -178 l 597 -326 q 494 -337 549 -337 q 335 -290 397 -337 q 272 -162 272 -243 q 353 -24 272 -76 q 107 102 190 -3 q 24 369 24 207 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"ɛ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 z "},"ʚ":{"ha":797,"x_min":21,"x_max":774,"o":"m 383 -28 q 118 33 215 -28 q 21 211 21 94 q 72 336 21 292 q 226 394 124 381 q 56 561 56 435 q 145 713 56 657 q 383 769 235 769 q 593 721 506 769 q 727 583 681 672 q 774 372 774 493 q 672 76 774 179 q 383 -28 571 -28 m 382 161 q 458 181 432 161 q 493 246 483 201 q 503 372 503 290 q 477 537 503 488 q 392 586 451 586 q 342 570 360 586 q 325 525 325 554 q 401 461 325 461 l 411 461 l 426 294 l 383 294 q 316 280 336 294 q 296 232 296 265 q 382 161 296 161 z "},"ɜ":{"ha":686,"x_min":-7,"x_max":665,"o":"m 326 769 q 483 744 414 769 q 591 671 551 718 q 631 561 631 624 q 460 394 631 435 q 614 336 563 381 q 665 211 665 292 q 569 33 665 94 q 306 -28 472 -28 q -7 60 117 -28 l 119 208 q 208 171 168 181 q 296 161 247 161 q 383 229 383 161 q 296 294 383 294 l 169 294 l 185 461 l 278 461 q 354 528 354 461 q 336 571 354 556 q 285 586 318 586 q 210 575 244 586 q 139 542 175 564 l 14 682 q 326 769 143 769 z "},"ɞ":{"ha":797,"x_min":24,"x_max":776,"o":"m 414 -28 q 125 76 226 -28 q 24 372 24 179 q 70 583 24 493 q 204 721 117 672 q 414 769 292 769 q 652 713 563 769 q 742 561 742 657 q 571 394 742 435 q 725 336 674 381 q 776 211 776 292 q 679 33 776 94 q 414 -28 582 -28 m 415 161 q 501 232 501 161 q 481 280 501 265 q 414 294 461 294 l 371 294 l 386 461 l 396 461 q 472 525 472 461 q 455 570 472 554 q 406 586 438 586 q 320 537 346 586 q 294 372 294 488 q 304 246 294 290 q 340 181 314 201 q 415 161 365 161 z "},"ɝ":{"ha":1093,"x_min":-7,"x_max":1107,"o":"m 1107 472 q 926 421 1031 421 q 770 463 828 421 q 694 581 713 506 l 693 586 l 631 549 q 460 394 622 433 q 614 336 563 381 q 665 211 665 292 q 569 33 665 94 q 306 -28 472 -28 q -7 60 117 -28 l 119 208 q 208 171 168 181 q 296 161 247 161 q 383 229 383 161 q 296 294 383 294 l 169 294 l 185 461 l 278 461 q 354 528 354 461 q 336 571 354 556 q 285 586 318 586 q 210 575 244 586 q 139 542 175 564 l 14 682 q 326 769 143 769 q 471 748 406 769 q 576 688 536 726 l 679 742 l 899 742 l 899 668 q 915 620 899 636 q 960 604 932 604 q 1011 612 989 604 q 1038 621 1033 619 l 1107 472 z "},"ɘ":{"ha":778,"x_min":21,"x_max":754,"o":"m 385 769 q 662 660 569 769 q 754 369 754 551 q 653 81 754 190 q 354 -28 551 -28 q 49 82 183 -28 l 160 232 q 249 183 208 199 q 328 167 289 167 q 430 192 394 167 q 476 293 465 218 l 26 293 q 21 381 21 346 q 66 590 21 503 q 194 724 111 678 q 385 769 276 769 m 292 449 l 478 449 q 451 566 472 536 q 383 596 431 596 q 313 560 332 596 q 292 458 293 524 l 292 449 z "},"ʃ":{"ha":392,"x_min":-197,"x_max":556,"o":"m 351 1061 q 556 1010 465 1061 l 483 840 q 394 864 433 864 q 348 846 363 864 q 333 789 333 828 l 333 -22 q 249 -240 333 -165 q 22 -315 165 -315 q -197 -253 -111 -315 l -108 -96 q -60 -115 -79 -110 q -14 -121 -40 -121 q 40 -102 21 -121 q 58 -47 58 -83 l 58 785 q 133 983 58 906 q 351 1061 208 1061 z "},"ʆ":{"ha":500,"x_min":-104,"x_max":664,"o":"m 442 79 q 439 0 442 50 q 571 -57 506 -22 l 525 -162 q 417 -121 485 -144 q 311 -267 385 -219 q 117 -315 238 -315 q -47 -270 10 -315 q -104 -143 -104 -225 q -44 -4 -104 -53 q 121 44 17 44 q 167 43 151 44 l 167 785 q 242 983 167 906 q 460 1061 317 1061 q 664 1010 574 1061 l 592 840 q 503 864 542 864 q 456 846 471 864 q 442 789 442 828 l 442 79 m 94 -185 q 146 -160 129 -185 q 165 -78 163 -136 q 119 -76 151 -76 q 43 -135 43 -76 q 56 -172 43 -158 q 94 -185 69 -185 z "},"ƪ":{"ha":639,"x_min":-28,"x_max":836,"o":"m 836 -253 q 617 -315 750 -315 q 390 -240 474 -315 q 306 -22 306 -165 l 306 549 q 215 532 263 532 q 40 604 107 532 q -28 794 -28 676 q 7 931 -28 871 q 108 1026 42 992 q 268 1061 175 1061 q 438 1024 367 1061 q 544 921 508 986 q 581 771 581 856 l 581 -47 q 599 -102 581 -83 q 653 -121 618 -121 q 699 -115 679 -121 q 747 -96 718 -110 l 836 -253 m 267 715 q 306 719 288 715 l 306 814 q 256 878 306 878 q 200 799 200 878 q 217 735 200 756 q 267 715 233 715 z "},"ʅ":{"ha":711,"x_min":-21,"x_max":732,"o":"m 732 35 q 513 -28 646 -28 q 285 47 369 -28 q 201 265 201 122 l 201 497 q 187 554 201 536 q 140 572 172 572 q 51 549 101 572 l -21 718 q 183 769 69 769 q 401 692 326 769 q 476 493 476 614 l 476 240 q 495 185 476 204 q 549 167 514 167 q 594 172 575 167 q 643 192 614 178 l 732 35 z "},"ɇ":{"ha":778,"x_min":24,"x_max":757,"o":"m 417 300 l 383 171 q 450 167 413 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 332 -21 381 -28 l 310 -107 l 228 -86 l 250 0 q 81 139 138 42 q 24 369 24 236 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 453 765 424 769 l 472 839 l 553 818 l 535 747 q 699 615 640 708 q 757 381 757 521 q 751 300 757 353 l 417 300 m 399 603 q 307 567 336 603 q 272 442 278 532 l 367 442 l 410 603 l 399 603 m 521 451 q 513 524 519 494 q 488 572 506 553 l 454 442 l 521 442 l 521 451 m 329 300 l 274 300 q 306 210 279 240 l 329 300 z "},"ẽ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 476 864 q 427 871 447 864 q 385 893 407 878 q 347 917 358 911 q 319 924 335 924 q 279 910 294 924 q 246 864 264 896 l 117 926 q 197 1062 146 1008 q 313 1115 247 1115 q 365 1108 343 1115 q 410 1085 386 1101 q 447 1062 433 1068 q 474 1056 460 1056 q 513 1069 497 1056 q 546 1115 528 1083 l 675 1053 q 594 917 646 969 q 476 864 543 864 z "},"ǝ":{"ha":778,"x_min":21,"x_max":754,"o":"z "},"ə":{"ha":778,"x_min":21,"x_max":754,"o":"m 378 769 q 660 661 565 769 q 754 372 754 553 q 712 170 754 261 q 586 26 669 79 q 385 -28 503 -28 q 193 18 275 -28 q 66 151 111 64 q 21 361 21 239 q 26 449 21 396 l 496 449 q 458 549 490 517 q 367 582 426 582 q 273 569 317 582 q 181 525 229 556 l 69 671 q 205 744 131 718 q 378 769 279 769 m 385 160 q 462 191 435 160 q 496 293 489 222 l 278 293 l 278 283 q 307 193 281 226 q 385 160 333 160 z "},"ɚ":{"ha":1190,"x_min":21,"x_max":1204,"o":"m 1204 472 q 1024 421 1128 421 q 867 463 925 421 q 792 581 810 506 l 790 586 l 726 549 q 754 372 754 468 q 712 170 754 261 q 586 26 669 79 q 385 -28 503 -28 q 193 18 275 -28 q 66 151 111 64 q 21 361 21 239 q 26 449 21 396 l 496 449 q 458 549 490 517 q 367 582 426 582 q 273 569 317 582 q 181 525 229 556 l 69 671 q 205 744 131 718 q 378 769 279 769 q 647 674 551 769 l 776 742 l 996 742 l 996 668 q 1013 620 996 636 q 1057 604 1029 604 q 1108 612 1086 604 q 1135 621 1131 619 l 1204 472 m 385 160 q 462 191 435 160 q 496 293 489 222 l 278 293 l 278 283 q 307 193 281 226 q 385 160 333 160 z "},"ʒ":{"ha":725,"x_min":-28,"x_max":718,"o":"m 436 299 q 645 215 572 285 q 718 15 718 144 q 671 -153 718 -78 q 534 -272 624 -228 q 321 -315 444 -315 q -28 -162 97 -315 l 114 -25 q 207 -90 164 -69 q 301 -110 250 -110 q 399 -74 361 -110 q 438 35 438 -37 q 399 124 438 97 q 289 151 361 151 l 149 151 l 149 300 l 357 542 l 35 542 l 35 742 l 667 742 l 667 558 l 436 299 z "},"ǯ":{"ha":725,"x_min":-28,"x_max":718,"o":"m 436 299 q 645 215 572 285 q 718 15 718 144 q 671 -153 718 -78 q 534 -272 624 -228 q 321 -315 444 -315 q -28 -162 97 -315 l 114 -25 q 207 -90 164 -69 q 301 -110 250 -110 q 399 -74 361 -110 q 438 35 438 -37 q 399 124 438 97 q 289 151 361 151 l 149 151 l 149 300 l 357 542 l 35 542 l 35 742 l 667 742 l 667 558 l 436 299 m 635 1046 l 433 836 l 269 836 l 68 1046 l 161 1153 l 351 1019 l 542 1153 l 635 1046 z "},"ʓ":{"ha":725,"x_min":-28,"x_max":718,"o":"m 718 22 q 658 -169 718 -87 q 479 -287 597 -250 l 517 -365 l 393 -412 l 347 -312 q 279 -315 306 -315 q 56 -254 140 -315 q -28 -82 -28 -193 q 24 53 -28 6 q 157 100 76 100 q 278 63 231 100 q 369 -62 326 26 l 381 -86 q 438 42 438 -54 q 400 138 438 110 q 289 165 363 165 l 149 165 l 149 314 l 361 542 l 35 542 l 35 742 l 667 742 l 667 558 l 436 313 q 718 22 718 282 m 150 -68 q 173 -101 150 -92 q 261 -110 196 -110 q 224 -51 240 -68 q 185 -33 207 -33 q 150 -68 150 -33 z "},"ƹ":{"ha":725,"x_min":7,"x_max":753,"o":"m 753 -162 q 403 -315 628 -315 q 191 -272 281 -315 q 54 -155 101 -229 q 7 11 7 -81 q 81 211 7 139 q 289 299 154 283 l 58 558 l 58 742 l 690 742 l 690 542 l 363 542 l 576 293 l 576 151 l 436 151 q 288 29 288 151 q 325 -74 288 -39 q 422 -110 363 -110 q 519 -91 475 -110 q 615 -28 563 -72 l 753 -162 z "},"ƺ":{"ha":739,"x_min":28,"x_max":711,"o":"m 282 -315 q 104 -231 171 -287 q 38 -93 38 -174 q 97 35 38 -12 q 281 110 156 82 q 398 147 365 129 q 431 196 431 165 q 406 236 431 224 q 324 249 382 249 l 156 249 l 156 383 l 343 556 l 28 556 l 28 742 l 660 742 l 660 572 l 449 396 l 461 396 q 645 339 579 396 q 711 186 711 282 q 638 20 711 75 q 436 -60 564 -35 q 315 -92 344 -78 q 285 -126 285 -107 q 338 -171 285 -151 l 282 -315 z "},"f":{"ha":513,"x_min":-3,"x_max":629,"o":"m 449 864 q 390 843 408 864 q 372 771 372 822 l 372 742 l 544 742 l 514 556 l 372 556 l 372 0 l 97 0 l 97 556 l -3 556 l -3 742 l 97 742 l 97 785 q 178 983 97 906 q 411 1061 258 1061 q 529 1047 469 1061 q 629 1010 589 1032 l 557 836 q 449 864 506 864 z "},"ḟ":{"ha":513,"x_min":-3,"x_max":629,"o":"m 449 864 q 390 843 408 864 q 372 771 372 822 l 372 742 l 544 742 l 514 556 l 372 556 l 372 0 l 97 0 l 97 556 l -3 556 l -3 742 l 97 742 l 97 785 q 178 983 97 906 q 411 1061 258 1061 q 529 1047 469 1061 q 629 1010 589 1032 l 557 836 q 449 864 506 864 z "},"ʩ":{"ha":1229,"x_min":-3,"x_max":1181,"o":"m 981 769 q 1127 711 1074 769 q 1181 547 1181 653 l 1181 -22 q 1097 -240 1181 -165 q 869 -315 1013 -315 q 650 -253 736 -315 l 739 -96 q 788 -115 768 -110 q 833 -121 807 -121 q 887 -102 868 -121 q 906 -47 906 -83 l 906 497 q 895 554 906 539 q 864 569 885 569 q 771 496 818 569 l 771 0 l 496 0 l 496 556 l 372 556 l 372 0 l 97 0 l 97 556 l -3 556 l -3 742 l 97 742 l 97 785 q 178 983 97 906 q 411 1061 258 1061 q 529 1047 469 1061 q 629 1010 589 1032 l 557 836 q 449 864 506 864 q 390 843 408 864 q 372 771 372 822 l 372 742 l 736 742 l 756 665 q 860 744 807 719 q 981 769 914 769 z "},"g":{"ha":792,"x_min":-7,"x_max":792,"o":"m 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 314 172 300 182 q 372 163 328 163 l 479 163 q 639 135 571 163 q 744 56 707 107 q 781 -58 781 6 q 674 -247 781 -178 q 369 -315 568 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 250 -112 239 -97 q 290 -135 261 -128 q 378 -142 319 -142 q 478 -124 453 -142 q 504 -78 504 -107 q 485 -39 504 -54 q 425 -24 467 -24 l 322 -24 q 133 17 194 -24 q 72 125 72 58 q 99 208 72 168 q 167 274 125 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 z "},"ǵ":{"ha":792,"x_min":-7,"x_max":792,"o":"m 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 314 172 300 182 q 372 163 328 163 l 479 163 q 639 135 571 163 q 744 56 707 107 q 781 -58 781 6 q 674 -247 781 -178 q 369 -315 568 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 250 -112 239 -97 q 290 -135 261 -128 q 378 -142 319 -142 q 478 -124 453 -142 q 504 -78 504 -107 q 485 -39 504 -54 q 425 -24 467 -24 l 322 -24 q 133 17 194 -24 q 72 125 72 58 q 99 208 72 168 q 167 274 125 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 m 593 989 l 244 851 l 171 989 l 490 1189 l 593 989 z "},"ɣ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 504 129 q 582 -10 558 47 q 606 -128 606 -67 q 550 -265 606 -215 q 375 -315 494 -315 q 201 -265 257 -315 q 144 -128 144 -215 q 167 -15 144 -71 q 246 129 189 42 l -21 742 l 271 742 l 375 303 l 479 742 l 763 742 l 504 129 m 413 -115 q 403 -72 413 -94 q 375 -11 394 -50 q 338 -117 338 -82 q 347 -145 338 -135 q 375 -156 357 -156 q 413 -115 413 -156 z "},"ğ":{"ha":792,"x_min":-7,"x_max":792,"o":"m 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 314 172 300 182 q 372 163 328 163 l 479 163 q 639 135 571 163 q 744 56 707 107 q 781 -58 781 6 q 674 -247 781 -178 q 369 -315 568 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 250 -112 239 -97 q 290 -135 261 -128 q 378 -142 319 -142 q 478 -124 453 -142 q 504 -78 504 -107 q 485 -39 504 -54 q 425 -24 467 -24 l 322 -24 q 133 17 194 -24 q 72 125 72 58 q 99 208 72 168 q 167 274 125 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 m 396 869 q 213 947 278 869 q 139 1142 149 1025 l 282 1165 q 323 1085 294 1114 q 396 1056 351 1056 q 469 1085 440 1056 q 510 1165 497 1114 l 653 1142 q 578 947 643 1025 q 396 869 514 869 z "},"ǧ":{"ha":792,"x_min":-7,"x_max":792,"o":"m 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 314 172 300 182 q 372 163 328 163 l 479 163 q 639 135 571 163 q 744 56 707 107 q 781 -58 781 6 q 674 -247 781 -178 q 369 -315 568 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 250 -112 239 -97 q 290 -135 261 -128 q 378 -142 319 -142 q 478 -124 453 -142 q 504 -78 504 -107 q 485 -39 504 -54 q 425 -24 467 -24 l 322 -24 q 133 17 194 -24 q 72 125 72 58 q 99 208 72 168 q 167 274 125 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 m 679 1046 l 478 836 l 314 836 l 113 1046 l 206 1153 l 396 1019 l 586 1153 l 679 1046 z "},"ĝ":{"ha":792,"x_min":-7,"x_max":792,"o":"m 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 314 172 300 182 q 372 163 328 163 l 479 163 q 639 135 571 163 q 744 56 707 107 q 781 -58 781 6 q 674 -247 781 -178 q 369 -315 568 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 250 -112 239 -97 q 290 -135 261 -128 q 378 -142 319 -142 q 478 -124 453 -142 q 504 -78 504 -107 q 485 -39 504 -54 q 425 -24 467 -24 l 322 -24 q 133 17 194 -24 q 72 125 72 58 q 99 208 72 168 q 167 274 125 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 m 113 957 l 314 1167 l 478 1167 l 679 957 l 586 850 l 396 983 l 206 850 l 113 957 z "},"ģ":{"ha":792,"x_min":-7,"x_max":792,"o":"m 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 314 172 300 182 q 372 163 328 163 l 479 163 q 639 135 571 163 q 744 56 707 107 q 781 -58 781 6 q 674 -247 781 -178 q 369 -315 568 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 250 -112 239 -97 q 290 -135 261 -128 q 378 -142 319 -142 q 478 -124 453 -142 q 504 -78 504 -107 q 485 -39 504 -54 q 425 -24 467 -24 l 322 -24 q 133 17 194 -24 q 72 125 72 58 q 99 208 72 168 q 167 274 125 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 m 388 796 q 296 832 332 796 q 260 922 260 868 q 268 976 260 951 q 297 1044 276 1001 l 367 1185 l 497 1185 l 463 1026 q 515 922 515 986 q 479 833 515 869 q 388 796 443 796 z "},"ġ":{"ha":792,"x_min":-7,"x_max":792,"o":"m 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 314 172 300 182 q 372 163 328 163 l 479 163 q 639 135 571 163 q 744 56 707 107 q 781 -58 781 6 q 674 -247 781 -178 q 369 -315 568 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 250 -112 239 -97 q 290 -135 261 -128 q 378 -142 319 -142 q 478 -124 453 -142 q 504 -78 504 -107 q 485 -39 504 -54 q 425 -24 467 -24 l 322 -24 q 133 17 194 -24 q 72 125 72 58 q 99 208 72 168 q 167 274 125 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 m 396 1151 q 506 1109 463 1151 q 550 1004 550 1067 q 506 899 550 942 q 396 857 463 857 q 285 899 329 857 q 242 1004 242 942 q 285 1109 242 1067 q 396 1151 329 1151 z "},"ɠ":{"ha":825,"x_min":21,"x_max":989,"o":"m 785 1061 q 989 1010 899 1061 l 917 840 q 828 864 867 864 q 781 846 796 864 q 767 789 767 828 l 767 33 q 667 -231 767 -146 q 382 -315 568 -315 q 90 -242 207 -315 l 171 -76 q 357 -121 260 -121 q 459 -92 426 -121 q 492 -6 492 -64 l 492 81 q 303 0 417 0 q 92 105 163 0 q 21 389 21 210 q 59 584 21 497 q 169 720 97 671 q 338 769 242 769 q 492 710 422 769 l 492 785 q 567 983 492 906 q 785 1061 642 1061 m 399 197 q 492 263 454 197 l 492 532 q 453 563 471 553 q 411 574 435 574 q 333 528 363 574 q 303 386 303 483 q 328 235 303 274 q 399 197 353 197 z "},"ƾ":{"ha":711,"x_min":-14,"x_max":688,"o":"m 504 601 q 642 499 597 568 q 688 317 688 431 q 642 133 688 211 q 514 14 596 56 q 325 -28 432 -28 q -14 106 126 -28 l 118 240 q 197 186 160 203 q 279 169 235 169 q 372 207 338 169 q 407 317 407 244 q 368 453 407 401 q 243 525 329 504 l 179 538 l 179 722 l 88 722 l 88 869 l 179 869 l 179 1033 l 454 1061 l 454 869 l 579 869 l 579 722 l 454 722 l 454 614 l 504 601 z "},"ʔ":{"ha":694,"x_min":-28,"x_max":674,"o":"m 179 496 l 224 510 q 352 587 311 538 q 393 717 393 636 q 358 826 393 789 q 265 864 324 864 q 183 847 221 864 q 104 793 146 831 l -28 928 q 311 1061 113 1061 q 500 1020 418 1061 q 628 902 582 979 q 674 721 674 825 q 627 542 674 608 q 485 433 581 476 l 454 419 l 454 0 l 179 0 l 179 496 z "},"ʖ":{"ha":711,"x_min":-14,"x_max":688,"o":"m 454 1061 l 454 614 l 504 601 q 642 499 597 568 q 688 317 688 431 q 642 133 688 211 q 514 14 596 56 q 325 -28 432 -28 q -14 106 126 -28 l 118 240 q 197 186 160 203 q 279 169 235 169 q 372 207 338 169 q 407 317 407 244 q 368 453 407 401 q 243 525 329 504 l 179 538 l 179 1033 l 454 1061 z "},"ʕ":{"ha":694,"x_min":21,"x_max":722,"o":"m 240 0 l 240 419 l 210 433 q 67 542 114 476 q 21 722 21 608 q 69 902 21 825 q 201 1020 117 979 q 390 1061 285 1061 q 572 1028 492 1061 q 722 928 651 994 l 590 793 q 514 847 551 829 q 432 864 476 864 q 338 825 374 864 q 301 713 301 786 q 342 586 301 635 q 471 510 383 538 l 515 496 l 515 0 l 240 0 z "},"ɂ":{"ha":661,"x_min":-14,"x_max":633,"o":"m 147 286 l 203 303 q 314 360 276 325 q 351 457 351 396 q 323 542 351 511 q 249 572 294 572 q 179 558 210 572 q 113 513 149 543 l -14 644 q 283 769 111 769 q 467 731 388 769 q 590 622 546 692 q 633 460 633 551 q 592 311 633 367 q 464 224 551 256 l 422 208 l 422 0 l 147 0 l 147 286 z "},"ʡ":{"ha":694,"x_min":-28,"x_max":674,"o":"m 454 419 l 454 314 l 579 314 l 579 167 l 454 167 l 454 0 l 179 0 l 179 167 l 88 167 l 88 314 l 179 314 l 179 496 l 224 510 q 352 587 311 538 q 393 717 393 636 q 358 826 393 789 q 265 864 324 864 q 183 847 221 864 q 104 793 146 831 l -28 928 q 311 1061 113 1061 q 500 1020 418 1061 q 628 902 582 979 q 674 721 674 825 q 627 542 674 608 q 485 433 581 476 l 454 419 z "},"ʢ":{"ha":694,"x_min":21,"x_max":722,"o":"m 515 314 l 607 314 l 607 167 l 515 167 l 515 0 l 240 0 l 240 167 l 115 167 l 115 314 l 240 314 l 240 419 l 210 433 q 67 542 114 476 q 21 722 21 608 q 69 902 21 825 q 201 1020 117 979 q 390 1061 285 1061 q 572 1028 492 1061 q 722 928 651 994 l 590 793 q 514 847 551 829 q 432 864 476 864 q 338 825 374 864 q 301 713 301 786 q 342 586 301 635 q 471 510 383 538 l 515 496 l 515 314 z "},"ɡ":{"ha":822,"x_min":21,"x_max":767,"o":"m 767 742 l 767 44 q 660 -225 767 -135 q 365 -315 554 -315 q 65 -242 190 -315 l 146 -76 q 235 -108 185 -96 q 338 -121 285 -121 q 453 -90 414 -121 q 492 6 492 -60 l 492 79 q 310 0 421 0 q 94 105 167 0 q 21 389 21 210 q 60 583 21 496 q 168 719 99 669 q 324 769 238 769 q 514 690 436 769 l 526 742 l 767 742 m 399 197 q 492 263 454 197 l 492 531 q 449 563 469 553 q 403 574 428 574 q 303 386 303 574 q 328 235 303 274 q 399 197 353 197 z "},"ǥ":{"ha":792,"x_min":-7,"x_max":847,"o":"m 847 -115 l 774 -115 q 645 -262 749 -210 q 369 -315 542 -315 q 141 -285 224 -315 q 26 -200 58 -254 q -7 -68 -7 -146 l 239 -68 q 249 -122 239 -104 q 289 -148 260 -140 q 378 -156 318 -156 q 479 -146 442 -156 q 532 -115 517 -136 l 375 -115 l 375 -32 l 535 -32 q 425 4 511 4 l 322 4 q 133 42 194 4 q 72 138 72 79 q 98 214 72 179 q 167 274 124 249 q 60 365 92 314 q 28 490 28 417 q 122 696 28 622 q 376 769 217 769 q 566 797 482 765 q 732 883 650 828 l 792 692 q 581 658 718 658 q 690 583 656 626 q 725 464 725 539 q 685 338 725 394 q 570 251 644 282 q 396 219 496 219 q 317 224 342 219 q 300 197 300 215 q 313 176 300 183 q 372 169 326 169 l 479 169 q 688 115 608 169 q 779 -32 768 60 l 847 -32 l 847 -115 m 385 592 q 324 567 347 592 q 300 496 300 542 q 324 420 300 446 q 385 394 347 394 q 469 500 469 394 q 449 570 469 549 q 385 592 428 592 z "},"ȝ":{"ha":665,"x_min":-7,"x_max":644,"o":"m 306 769 q 524 712 439 769 q 610 554 610 654 q 439 381 610 421 q 644 213 644 364 q 497 -6 644 90 q 76 -153 350 -101 l 53 22 q 291 119 221 74 q 363 224 361 164 q 344 265 363 250 q 289 281 325 281 l 163 281 l 178 447 l 243 447 q 313 465 293 447 q 333 521 333 483 q 264 586 333 586 q 190 576 224 586 q 118 544 156 565 l -7 682 q 306 769 122 769 z "},"h":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 1033 l 333 1061 l 333 675 q 431 747 381 725 q 543 769 481 769 z "},"ħ":{"ha":806,"x_min":0,"x_max":757,"o":"m 557 769 q 703 711 650 769 q 757 547 757 653 l 757 0 l 482 0 l 482 497 q 472 554 482 539 q 440 569 461 569 q 347 496 394 569 l 347 0 l 72 0 l 72 819 l 0 819 l 0 967 l 72 967 l 72 1033 l 347 1061 l 347 967 l 517 967 l 517 819 l 347 819 l 347 675 q 444 747 394 725 q 557 769 494 769 z "},"ȟ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 1033 l 333 1061 l 333 675 q 431 747 381 725 q 543 769 481 769 m 681 1300 l 479 1104 l 315 1104 l 114 1300 l 207 1407 l 397 1288 l 588 1407 l 681 1300 z "},"ĥ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 1033 l 333 1061 l 333 675 q 431 747 381 725 q 543 769 481 769 m 114 1218 l 315 1414 l 479 1414 l 681 1218 l 588 1111 l 397 1231 l 207 1111 l 114 1218 z "},"ḥ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 1033 l 333 1061 l 333 675 q 431 747 381 725 q 543 769 481 769 m 401 -367 q 291 -324 335 -367 q 247 -219 247 -282 q 291 -115 247 -157 q 401 -72 335 -72 q 512 -115 468 -72 q 556 -219 556 -157 q 512 -324 556 -282 q 401 -367 468 -367 z "},"ɧ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 -22 q 659 -240 743 -165 q 432 -315 575 -315 q 213 -253 299 -315 l 301 -96 q 350 -115 331 -110 q 396 -121 369 -121 q 449 -102 431 -121 q 468 -47 468 -83 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 785 q 139 983 58 906 q 372 1061 219 1061 q 490 1047 431 1061 q 590 1010 550 1032 l 518 839 q 410 864 464 864 q 351 843 369 864 q 333 771 333 822 l 333 675 q 431 747 381 725 q 543 769 481 769 z "},"ɦ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 785 q 139 983 58 906 q 372 1061 219 1061 q 490 1047 431 1061 q 590 1010 550 1032 l 518 839 q 410 864 464 864 q 351 843 369 864 q 333 771 333 822 l 333 675 q 431 747 381 725 q 543 769 481 769 z "},"ɥ":{"ha":792,"x_min":49,"x_max":733,"o":"m 733 742 l 733 -315 l 458 -287 l 458 67 q 361 -6 411 17 q 249 -28 311 -28 q 102 31 156 -28 q 49 194 49 89 l 49 742 l 324 742 l 324 244 q 334 188 324 203 q 365 172 344 172 q 458 246 411 172 l 458 742 l 733 742 z "},"ʮ":{"ha":982,"x_min":-17,"x_max":924,"o":"m 924 742 l 924 -315 l 649 -287 l 649 67 q 551 -6 601 17 q 439 -28 501 -28 q 292 31 346 -28 q 239 194 239 89 l 239 503 q 220 558 239 539 q 167 576 201 576 q 121 571 140 576 q 72 551 101 565 l -17 708 q 203 771 69 771 q 430 696 346 771 q 514 478 514 621 l 514 244 q 524 188 514 203 q 556 172 535 172 q 649 246 601 172 l 649 742 l 924 742 z "},"ʯ":{"ha":982,"x_min":-17,"x_max":1179,"o":"m 1179 -253 q 960 -315 1093 -315 q 733 -240 817 -315 q 649 -22 649 -165 l 649 67 q 551 -6 601 17 q 439 -28 501 -28 q 292 31 346 -28 q 239 194 239 89 l 239 503 q 220 558 239 539 q 167 576 201 576 q 121 571 140 576 q 72 551 101 565 l -17 708 q 203 771 69 771 q 430 696 346 771 q 514 478 514 621 l 514 244 q 524 188 514 203 q 556 172 535 172 q 649 246 601 172 l 649 742 l 924 742 l 924 -47 q 942 -102 924 -83 q 996 -121 961 -121 q 1042 -115 1022 -121 q 1090 -96 1061 -110 l 1179 -253 z "},"ƕ":{"ha":1196,"x_min":58,"x_max":1161,"o":"m 1118 742 q 1149 544 1138 640 q 1161 339 1161 447 q 1107 131 1161 214 q 966 10 1053 49 q 778 -28 879 -28 q 556 44 643 -28 q 468 265 468 117 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 1033 l 333 1061 l 333 675 q 431 747 381 725 q 543 769 481 769 q 690 711 636 769 q 743 547 743 653 l 743 264 q 758 190 743 211 q 800 169 772 169 q 863 215 839 169 q 886 360 886 261 q 849 742 886 517 l 1118 742 z "},"i":{"ha":392,"x_min":42,"x_max":350,"o":"m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 z "},"ı":{"ha":392,"x_min":58,"x_max":333,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 z "},"í":{"ha":392,"x_min":-29,"x_max":393,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 393 989 l 44 851 l -29 989 l 290 1189 l 393 989 z "},"ĭ":{"ha":392,"x_min":-61,"x_max":453,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 196 869 q 13 947 78 869 q -61 1142 -51 1025 l 82 1165 q 123 1085 94 1114 q 196 1056 151 1056 q 269 1085 240 1056 q 310 1165 297 1114 l 453 1142 q 378 947 443 1025 q 196 869 314 869 z "},"ǐ":{"ha":392,"x_min":-87,"x_max":479,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 479 1046 l 278 836 l 114 836 l -87 1046 l 6 1153 l 196 1019 l 386 1153 l 479 1046 z "},"î":{"ha":392,"x_min":-87,"x_max":479,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m -87 957 l 114 1167 l 278 1167 l 479 957 l 386 850 l 196 983 l 6 850 l -87 957 z "},"ȉ":{"ha":392,"x_min":-144,"x_max":424,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 171 925 l 38 861 l -144 1133 l 26 1218 l 171 925 m 424 921 l 288 867 l 117 1140 l 290 1218 l 424 921 z "},"ï":{"ha":392,"x_min":-107,"x_max":497,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 25 1136 q 119 1099 81 1136 q 157 1008 157 1061 q 119 917 157 954 q 25 879 81 879 q -68 917 -29 879 q -107 1008 -107 954 q -68 1099 -107 1061 q 25 1136 -29 1136 m 365 1136 q 459 1099 421 1136 q 497 1008 497 1061 q 459 917 497 954 q 365 879 421 879 q 272 917 311 879 q 233 1008 233 954 q 272 1099 233 1061 q 365 1136 311 1136 z "},"ḯ":{"ha":392,"x_min":-121,"x_max":511,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 429 1225 l 192 1018 l 90 1108 l 285 1367 l 429 1225 m 11 1072 q 104 1035 65 1072 q 143 944 143 997 q 104 853 143 890 q 11 815 65 815 q -83 853 -44 815 q -121 944 -121 890 q -83 1035 -121 997 q 11 1072 -44 1072 m 379 1072 q 472 1035 433 1072 q 511 944 511 997 q 472 853 511 890 q 379 815 433 815 q 285 853 324 815 q 247 944 247 890 q 285 1035 247 997 q 379 1072 324 1072 z "},"ị":{"ha":392,"x_min":42,"x_max":350,"o":"m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 196 -367 q 85 -324 129 -367 q 42 -219 42 -282 q 85 -115 42 -157 q 196 -72 129 -72 q 306 -115 263 -72 q 350 -219 350 -157 q 306 -324 350 -282 q 196 -367 263 -367 z "},"ᵻ":{"ha":392,"x_min":-39,"x_max":433,"o":"m 433 293 l 333 293 l 333 0 l 58 0 l 58 293 l -39 293 l -39 501 l 58 501 l 58 742 l 333 742 l 333 501 l 433 501 l 433 293 z "},"ì":{"ha":392,"x_min":-1,"x_max":421,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 421 989 l 347 851 l -1 989 l 101 1189 l 421 989 z "},"ỉ":{"ha":392,"x_min":40,"x_max":390,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 119 978 q 195 990 172 979 q 218 1026 218 1001 q 204 1055 218 1044 q 167 1065 190 1065 q 124 1061 143 1065 q 81 1047 106 1057 l 40 1150 q 204 1189 106 1189 q 342 1147 293 1189 q 390 1039 390 1106 q 360 949 390 983 q 271 903 329 914 l 271 835 l 119 835 l 119 978 z "},"ȋ":{"ha":392,"x_min":-61,"x_max":453,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 196 1121 q 378 1043 314 1121 q 453 849 443 965 l 310 825 q 269 906 297 876 q 196 935 240 935 q 123 906 151 935 q 82 825 94 876 l -61 849 q 13 1043 -51 965 q 196 1121 78 1121 z "},"ĳ":{"ha":783,"x_min":42,"x_max":742,"o":"m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 z "},"ī":{"ha":392,"x_min":-31,"x_max":421,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m -31 900 l -31 1086 l 421 1086 l 421 900 l -31 900 z "},"į":{"ha":392,"x_min":-68,"x_max":350,"o":"m 196 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 m 58 742 l 333 742 l 333 0 l 278 0 q 153 -65 189 -29 q 118 -132 118 -100 q 189 -193 118 -193 q 274 -182 225 -193 l 257 -342 q 154 -353 208 -353 q -6 -306 57 -353 q -68 -178 -68 -258 q 58 17 -68 -57 l 58 742 z "},"ɩ":{"ha":421,"x_min":49,"x_max":435,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 742 l 324 742 l 324 225 q 357 188 324 188 q 386 192 369 188 l 435 -3 q 282 -28 369 -28 z "},"ɨ":{"ha":472,"x_min":0,"x_max":472,"o":"m 235 857 q 124 899 168 857 q 81 1004 81 942 q 124 1109 81 1067 q 235 1151 168 1151 q 345 1109 301 1151 q 389 1004 389 1067 q 345 899 389 942 q 235 857 301 857 m 472 293 l 372 293 l 372 0 l 97 0 l 97 293 l 0 293 l 0 501 l 97 501 l 97 742 l 372 742 l 372 501 l 472 501 l 472 293 z "},"ĩ":{"ha":392,"x_min":-83,"x_max":475,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 276 864 q 227 871 247 864 q 185 893 207 878 q 147 917 158 911 q 119 924 135 924 q 79 910 94 924 q 46 864 64 896 l -83 926 q -3 1062 -54 1008 q 113 1115 47 1115 q 165 1108 143 1115 q 210 1085 186 1101 q 247 1062 233 1068 q 274 1056 260 1056 q 313 1069 297 1056 q 346 1115 328 1083 l 475 1053 q 394 917 446 969 q 276 864 343 864 z "},"j":{"ha":392,"x_min":-97,"x_max":350,"o":"m 333 107 q 244 -169 333 -74 q -3 -315 156 -264 l -97 -115 q -11 -67 -43 -90 q 40 -6 21 -43 q 58 90 58 32 l 58 742 l 333 742 l 333 107 m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 z "},"ȷ":{"ha":392,"x_min":-97,"x_max":333,"o":"m 333 107 q 244 -169 333 -74 q -3 -315 156 -264 l -97 -115 q -11 -67 -43 -90 q 40 -6 21 -43 q 58 90 58 32 l 58 742 l 333 742 l 333 107 z "},"ǰ":{"ha":392,"x_min":-97,"x_max":479,"o":"m 333 107 q 244 -169 333 -74 q -3 -315 156 -264 l -97 -115 q -11 -67 -43 -90 q 40 -6 21 -43 q 58 90 58 32 l 58 742 l 333 742 l 333 107 m 479 1046 l 278 836 l 114 836 l -87 1046 l 6 1153 l 196 1019 l 386 1153 l 479 1046 z "},"ĵ":{"ha":392,"x_min":-97,"x_max":479,"o":"m 333 107 q 244 -169 333 -74 q -3 -315 156 -264 l -97 -115 q -11 -67 -43 -90 q 40 -6 21 -43 q 58 90 58 32 l 58 742 l 333 742 l 333 107 m -87 957 l 114 1167 l 278 1167 l 479 957 l 386 850 l 196 983 l 6 850 l -87 957 z "},"ʝ":{"ha":501,"x_min":-104,"x_max":571,"o":"m 525 -162 q 417 -121 485 -144 q 311 -267 385 -219 q 117 -315 238 -315 q -47 -270 10 -315 q -104 -143 -104 -225 q -44 -4 -104 -53 q 121 44 17 44 q 167 43 151 44 l 167 742 l 442 742 l 442 79 q 439 0 442 50 q 571 -57 506 -22 l 525 -162 m 94 -185 q 146 -160 129 -185 q 165 -78 163 -136 q 119 -76 151 -76 q 43 -135 43 -76 q 56 -172 43 -158 q 94 -185 69 -185 m 304 1151 q 415 1109 371 1151 q 458 1004 458 1067 q 415 899 458 942 q 304 857 371 857 q 194 899 238 857 q 150 1004 150 942 q 194 1109 150 1067 q 304 1151 238 1151 z "},"ɟ":{"ha":472,"x_min":-57,"x_max":472,"o":"m 472 238 l 374 238 l 374 107 q 285 -169 374 -74 q 38 -315 196 -264 l -57 -115 q 29 -67 -3 -90 q 80 -6 61 -43 q 99 90 99 32 l 99 238 l 0 238 l 0 446 l 99 446 l 99 742 l 374 742 l 374 446 l 472 446 l 472 238 z "},"ʄ":{"ha":475,"x_min":-47,"x_max":601,"o":"m 469 188 l 469 0 l 369 0 q 260 -199 344 -126 q 43 -315 176 -271 l -47 -133 q 51 -77 15 -108 q 99 0 88 -46 l -3 0 l -3 188 l 104 188 l 104 785 q 179 983 104 906 q 397 1061 254 1061 q 601 1010 511 1061 l 529 840 q 440 864 479 864 q 394 846 408 864 q 379 789 379 828 l 379 188 l 469 188 z "},"ɉ":{"ha":472,"x_min":-57,"x_max":472,"o":"m 472 238 l 374 238 l 374 107 q 285 -169 374 -74 q 38 -315 196 -264 l -57 -115 q 29 -67 -3 -90 q 80 -6 61 -43 q 99 90 99 32 l 99 238 l 0 238 l 0 446 l 99 446 l 99 742 l 374 742 l 374 446 l 472 446 l 472 238 m 236 1151 q 347 1109 303 1151 q 390 1004 390 1067 q 347 899 390 942 q 236 857 303 857 q 126 899 169 857 q 82 1004 82 942 q 126 1109 82 1067 q 236 1151 169 1151 z "},"k":{"ha":800,"x_min":58,"x_max":821,"o":"m 333 0 l 58 0 l 58 1033 l 333 1061 l 333 0 m 614 417 l 821 0 l 517 0 l 339 406 l 538 742 l 810 742 l 614 417 z "},"ǩ":{"ha":800,"x_min":58,"x_max":821,"o":"m 333 0 l 58 0 l 58 1033 l 333 1061 l 333 0 m 614 417 l 821 0 l 517 0 l 339 406 l 538 742 l 810 742 l 614 417 m 710 1300 l 508 1104 l 344 1104 l 143 1300 l 236 1407 l 426 1288 l 617 1407 l 710 1300 z "},"ķ":{"ha":800,"x_min":58,"x_max":821,"o":"m 333 0 l 58 0 l 58 1033 l 333 1061 l 333 0 m 614 417 l 821 0 l 517 0 l 339 406 l 538 742 l 810 742 l 614 417 m 400 -86 q 492 -122 456 -86 q 528 -212 528 -158 q 519 -267 528 -242 q 490 -335 511 -292 l 421 -475 l 290 -475 l 325 -317 q 272 -212 272 -276 q 308 -123 272 -160 q 400 -86 344 -86 z "},"ĸ":{"ha":800,"x_min":58,"x_max":821,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 614 403 l 821 0 l 517 0 l 339 392 l 538 742 l 810 742 l 614 403 z "},"ƙ":{"ha":800,"x_min":58,"x_max":821,"o":"m 410 864 q 351 843 369 864 q 333 771 333 822 l 333 0 l 58 0 l 58 785 q 139 983 58 906 q 372 1061 219 1061 q 490 1047 431 1061 q 590 1010 550 1032 l 518 839 q 410 864 464 864 m 821 0 l 517 0 l 339 406 l 538 742 l 810 742 l 614 417 l 821 0 z "},"ʞ":{"ha":800,"x_min":-21,"x_max":742,"o":"m 186 325 l -21 742 l 283 742 l 461 336 l 263 0 l -10 0 l 186 325 m 467 742 l 742 742 l 742 -315 l 467 -287 l 467 742 z "},"l":{"ha":421,"x_min":49,"x_max":435,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 z "},"ĺ":{"ha":421,"x_min":-25,"x_max":435,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 m 397 1233 l 44 1107 l -25 1244 l 300 1433 l 397 1233 z "},"ƛ":{"ha":768,"x_min":0,"x_max":796,"o":"m 593 621 q 688 272 647 390 q 796 56 728 154 l 528 -28 q 436 191 468 79 q 374 486 404 303 l 274 -28 l 0 33 l 214 672 l 347 672 q 319 760 338 714 l 246 707 l 107 797 l 197 865 l 201 868 q 81 890 156 882 l 111 1058 q 260 1031 199 1047 q 369 989 321 1015 l 472 1065 l 571 939 l 489 881 q 593 621 556 786 z "},"ƚ":{"ha":483,"x_min":0,"x_max":483,"o":"m 483 -3 q 331 -28 418 -28 q 158 35 218 -28 q 97 214 97 99 l 97 422 l 0 422 l 0 610 l 97 610 l 97 1033 l 372 1061 l 372 610 l 472 610 l 472 422 l 372 422 l 372 225 q 406 188 372 188 q 435 193 421 188 l 483 -3 z "},"ɬ":{"ha":646,"x_min":-14,"x_max":618,"o":"m 536 188 q 565 193 551 188 l 614 -3 q 461 -28 549 -28 q 288 35 349 -28 q 228 214 228 99 l 228 324 q 46 377 106 328 q -14 511 -14 426 q 38 638 -14 593 q 175 683 89 683 q 228 678 197 683 l 228 1033 l 503 1061 l 503 468 l 506 468 q 600 482 550 472 l 618 349 q 506 329 563 333 l 503 329 l 503 225 q 536 188 503 188 m 157 514 q 228 463 157 465 l 228 549 q 196 551 206 551 q 167 541 178 551 q 157 514 157 531 z "},"ľ":{"ha":576,"x_min":49,"x_max":604,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 m 604 1032 l 408 1061 l 374 729 l 524 707 l 604 1032 z "},"ḽ":{"ha":421,"x_min":-28,"x_max":539,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 m -28 -293 l 174 -83 l 338 -83 l 539 -293 l 446 -400 l 256 -267 l 65 -400 l -28 -293 z "},"ļ":{"ha":421,"x_min":49,"x_max":435,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 m 256 -86 q 347 -122 311 -86 q 383 -212 383 -158 q 375 -267 383 -242 q 346 -335 367 -292 l 276 -475 l 146 -475 l 181 -317 q 128 -212 128 -276 q 164 -123 128 -160 q 256 -86 200 -86 z "},"ȴ":{"ha":688,"x_min":51,"x_max":688,"o":"m 510 358 q 637 313 586 358 q 688 190 688 268 q 608 26 688 81 q 404 -28 529 -28 q 347 -25 383 -28 l 301 -125 l 178 -78 l 219 8 q 97 117 142 44 q 51 306 51 190 l 51 1033 l 326 1061 l 326 306 q 332 239 326 263 q 405 331 364 303 q 510 358 446 358 m 456 160 q 494 169 479 160 q 510 196 510 178 q 502 217 510 210 q 481 225 494 225 q 452 212 464 225 q 425 161 440 199 q 456 160 435 160 z "},"ŀ":{"ha":706,"x_min":49,"x_max":697,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 m 543 669 q 653 627 610 669 q 697 522 697 585 q 653 417 697 460 q 543 375 610 375 q 433 417 476 375 q 389 522 389 460 q 433 627 389 585 q 543 669 476 669 z "},"ḷ":{"ha":421,"x_min":49,"x_max":435,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 m 256 -367 q 145 -324 189 -367 q 101 -219 101 -282 q 145 -115 101 -157 q 256 -72 189 -72 q 366 -115 322 -72 q 410 -219 410 -157 q 366 -324 410 -282 q 256 -367 322 -367 z "},"ɮ":{"ha":1014,"x_min":49,"x_max":1007,"o":"m 725 299 q 933 215 860 285 q 1007 15 1007 144 q 960 -153 1007 -78 q 823 -272 913 -228 q 610 -315 733 -315 q 317 -218 432 -315 l 439 -56 q 513 -97 476 -83 q 590 -110 549 -110 q 688 -74 650 -110 q 726 35 726 -37 q 688 124 726 97 q 578 151 650 151 l 438 151 l 438 300 l 646 542 l 324 542 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 742 l 956 742 l 956 558 l 725 299 z "},"ɭ":{"ha":392,"x_min":58,"x_max":589,"o":"m 589 -253 q 369 -315 503 -315 q 142 -240 226 -315 q 58 -22 58 -165 l 58 1033 l 333 1061 l 333 -47 q 352 -102 333 -83 q 406 -121 371 -121 q 451 -115 432 -121 q 500 -96 471 -110 l 589 -253 z "},"ǉ":{"ha":813,"x_min":49,"x_max":771,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 m 754 107 q 665 -169 754 -74 q 418 -315 576 -264 l 324 -115 q 410 -67 378 -90 q 460 -6 442 -43 q 479 90 479 32 l 479 742 l 754 742 l 754 107 m 617 1151 q 727 1109 683 1151 q 771 1004 771 1067 q 727 899 771 942 q 617 857 683 857 q 506 899 550 857 q 463 1004 463 942 q 506 1109 463 1067 q 617 1151 550 1151 z "},"ɫ":{"ha":694,"x_min":-14,"x_max":708,"o":"m 708 565 q 611 422 664 476 q 479 364 558 368 l 479 225 q 513 188 479 188 q 542 193 528 188 l 590 -3 q 438 -28 525 -28 q 265 35 325 -28 q 204 214 204 99 l 204 446 q 167 430 181 443 q 142 401 153 417 q 125 378 131 385 l -14 447 q 79 586 29 533 q 204 647 129 639 l 204 1033 l 479 1061 l 479 565 q 523 578 507 567 q 552 608 539 590 q 571 632 565 625 l 708 565 z "},"ʪ":{"ha":972,"x_min":49,"x_max":965,"o":"m 506 -28 q 226 15 326 -28 q 87 131 125 57 q 49 311 49 204 l 49 1033 l 324 1061 l 324 300 q 366 192 324 224 q 506 161 408 161 q 663 174 614 161 q 711 218 711 188 q 703 244 711 233 q 667 265 694 254 q 581 296 640 276 q 433 381 479 329 q 386 525 386 432 q 420 650 386 594 q 521 738 454 706 q 679 769 588 769 q 821 746 754 769 q 938 679 888 722 l 850 536 q 773 568 814 557 q 696 579 732 579 q 633 543 633 579 q 659 509 633 525 q 768 467 685 493 q 918 379 871 433 q 965 239 965 325 q 848 41 965 110 q 506 -28 731 -28 z "},"ł":{"ha":536,"x_min":-28,"x_max":544,"o":"m 415 188 q 444 193 431 188 l 493 -3 q 340 -28 428 -28 q 167 35 228 -28 q 107 214 107 99 l 107 344 l 60 315 l -28 457 l 107 542 l 107 1033 l 382 1061 l 382 707 l 457 753 l 544 611 l 382 513 l 382 225 q 415 188 382 188 z "},"ʫ":{"ha":1026,"x_min":49,"x_max":1019,"o":"m 996 0 l 436 0 q 282 -28 369 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 693 542 l 413 542 l 413 742 l 1010 742 l 1010 551 l 706 203 l 1019 203 l 996 0 z "},"m":{"ha":1160,"x_min":58,"x_max":1111,"o":"m 922 769 q 1059 710 1007 769 q 1111 547 1111 651 l 1111 0 l 836 0 l 836 497 q 826 553 836 538 q 799 569 817 569 q 758 551 778 569 q 722 496 739 532 l 722 0 l 447 0 l 447 497 q 438 553 447 538 q 410 569 428 569 q 369 551 389 569 q 333 496 350 532 l 333 0 l 58 0 l 58 742 l 299 742 l 318 667 q 415 745 363 721 q 533 769 467 769 q 635 742 592 769 q 700 663 678 714 q 800 744 747 718 q 922 769 853 769 z "},"ḿ":{"ha":1160,"x_min":58,"x_max":1111,"o":"m 922 769 q 1059 710 1007 769 q 1111 547 1111 651 l 1111 0 l 836 0 l 836 497 q 826 553 836 538 q 799 569 817 569 q 758 551 778 569 q 722 496 739 532 l 722 0 l 447 0 l 447 497 q 438 553 447 538 q 410 569 428 569 q 369 551 389 569 q 333 496 350 532 l 333 0 l 58 0 l 58 742 l 299 742 l 318 667 q 415 745 363 721 q 533 769 467 769 q 635 742 592 769 q 700 663 678 714 q 800 744 747 718 q 922 769 853 769 m 779 989 l 431 851 l 357 989 l 676 1189 l 779 989 z "},"ṁ":{"ha":1160,"x_min":58,"x_max":1111,"o":"m 922 769 q 1059 710 1007 769 q 1111 547 1111 651 l 1111 0 l 836 0 l 836 497 q 826 553 836 538 q 799 569 817 569 q 758 551 778 569 q 722 496 739 532 l 722 0 l 447 0 l 447 497 q 438 553 447 538 q 410 569 428 569 q 369 551 389 569 q 333 496 350 532 l 333 0 l 58 0 l 58 742 l 299 742 l 318 667 q 415 745 363 721 q 533 769 467 769 q 635 742 592 769 q 700 663 678 714 q 800 744 747 718 q 922 769 853 769 m 582 1151 q 692 1109 649 1151 q 736 1004 736 1067 q 692 899 736 942 q 582 857 649 857 q 472 899 515 857 q 428 1004 428 942 q 472 1109 428 1067 q 582 1151 515 1151 z "},"ɱ":{"ha":1160,"x_min":58,"x_max":1111,"o":"m 922 769 q 1059 710 1007 769 q 1111 547 1111 651 l 1111 -22 q 1026 -240 1111 -165 q 797 -315 942 -315 q 581 -253 667 -315 l 669 -93 q 719 -115 700 -108 q 764 -121 738 -121 q 817 -102 799 -121 q 836 -47 836 -83 l 836 497 q 826 553 836 538 q 799 569 817 569 q 758 551 778 569 q 722 496 739 532 l 722 0 l 447 0 l 447 497 q 438 553 447 538 q 410 569 428 569 q 369 551 389 569 q 333 496 350 532 l 333 0 l 58 0 l 58 742 l 299 742 l 318 667 q 415 745 363 721 q 533 769 467 769 q 635 742 592 769 q 700 663 678 714 q 800 744 747 718 q 922 769 853 769 z "},"ɰ":{"ha":1163,"x_min":49,"x_max":1104,"o":"m 1104 136 l 1104 -315 l 829 -287 l 829 60 q 738 -7 786 14 q 626 -28 689 -28 q 525 0 568 -28 q 460 79 482 28 q 360 -2 413 24 q 238 -28 307 -28 q 101 31 153 -28 q 49 194 49 90 l 49 742 l 324 742 l 324 244 q 333 188 324 204 q 361 172 343 172 q 401 191 382 172 q 438 246 421 210 l 438 742 l 713 742 l 713 244 q 722 188 713 204 q 750 172 732 172 q 790 191 771 172 q 826 246 810 210 l 826 742 l 1101 742 l 1101 136 l 1104 136 z "},"ɯ":{"ha":1160,"x_min":49,"x_max":1101,"o":"m 1101 742 l 1101 0 l 861 0 l 842 75 q 745 -3 797 21 q 626 -28 693 -28 q 525 0 568 -28 q 460 79 482 28 q 360 -2 413 24 q 238 -28 307 -28 q 101 31 153 -28 q 49 194 49 90 l 49 742 l 324 742 l 324 244 q 333 188 324 204 q 361 172 343 172 q 401 191 382 172 q 438 246 421 210 l 438 742 l 713 742 l 713 244 q 722 188 713 204 q 750 172 732 172 q 790 191 771 172 q 826 246 810 210 l 826 742 l 1101 742 z "},"n":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 z "},"ń":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 601 989 l 253 851 l 179 989 l 499 1189 l 601 989 z "},"ŉ":{"ha":978,"x_min":35,"x_max":929,"o":"m 142 1061 q 218 1031 188 1061 q 249 957 249 1001 q 241 910 249 932 q 217 854 233 888 l 160 743 l 50 743 l 79 869 q 35 957 35 904 q 66 1031 35 1000 q 142 1061 97 1061 m 729 769 q 876 711 822 769 q 929 547 929 653 l 929 0 l 654 0 l 654 497 q 644 554 654 539 q 613 569 633 569 q 519 496 567 569 l 519 0 l 244 0 l 244 742 l 485 742 l 504 665 q 609 744 556 719 q 729 769 663 769 z "},"ň":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 688 1046 l 486 836 l 322 836 l 121 1046 l 214 1153 l 404 1019 l 594 1153 l 688 1046 z "},"ṋ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 114 -293 l 315 -83 l 479 -83 l 681 -293 l 588 -400 l 397 -267 l 207 -400 l 114 -293 z "},"ņ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 397 -86 q 489 -122 453 -86 q 525 -212 525 -158 q 517 -267 525 -242 q 488 -335 508 -292 l 418 -475 l 288 -475 l 322 -317 q 269 -212 269 -276 q 306 -123 269 -160 q 397 -86 342 -86 z "},"ȵ":{"ha":1104,"x_min":58,"x_max":1104,"o":"m 926 358 q 1053 313 1003 358 q 1104 190 1104 268 q 1025 26 1104 81 q 821 -28 946 -28 q 764 -25 800 -28 l 718 -125 l 594 -78 l 636 8 q 513 117 558 44 q 468 306 468 190 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 q 690 711 636 769 q 743 547 743 653 l 743 306 q 749 239 743 263 q 822 331 781 303 q 926 358 863 358 m 872 160 q 911 169 896 160 q 926 196 926 178 q 919 217 926 210 q 897 225 911 225 q 869 212 881 225 q 842 161 857 199 q 872 160 851 160 z "},"ṅ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 404 1151 q 515 1109 471 1151 q 558 1004 558 1067 q 515 899 558 942 q 404 857 471 857 q 294 899 338 857 q 250 1004 250 942 q 294 1109 250 1067 q 404 1151 338 1151 z "},"ṇ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 397 -367 q 287 -324 331 -367 q 243 -219 243 -282 q 287 -115 243 -157 q 397 -72 331 -72 q 508 -115 464 -72 q 551 -219 551 -157 q 508 -324 551 -282 q 397 -367 464 -367 z "},"ǹ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 629 989 l 556 851 l 207 989 l 310 1189 l 629 989 z "},"ŋ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 -22 q 659 -240 743 -165 q 432 -315 575 -315 q 213 -253 299 -315 l 301 -96 q 350 -115 331 -110 q 396 -121 369 -121 q 449 -102 431 -121 q 468 -47 468 -83 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 z "},"ɲ":{"ha":792,"x_min":-197,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 -22 q 249 -240 333 -165 q 22 -315 165 -315 q -197 -253 -111 -315 l -108 -96 q -60 -115 -79 -110 q -14 -121 -40 -121 q 40 -102 21 -121 q 58 -47 58 -83 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 z "},"ɳ":{"ha":794,"x_min":58,"x_max":999,"o":"m 999 -253 q 779 -315 913 -315 q 552 -240 636 -315 q 468 -22 468 -165 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 q 690 711 636 769 q 743 547 743 653 l 743 -47 q 762 -102 743 -83 q 815 -121 781 -121 q 861 -115 842 -121 q 910 -96 881 -110 l 999 -253 z "},"ǌ":{"ha":1183,"x_min":58,"x_max":1142,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 1125 107 q 1036 -169 1125 -74 q 789 -315 947 -264 l 694 -115 q 781 -67 749 -90 q 831 -6 813 -43 q 850 90 850 32 l 850 742 l 1125 742 l 1125 107 m 988 1151 q 1098 1109 1054 1151 q 1142 1004 1142 1067 q 1098 899 1142 942 q 988 857 1054 857 q 877 899 921 857 q 833 1004 833 942 q 877 1109 833 1067 q 988 1151 921 1151 z "},"ƞ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 z "},"ñ":{"ha":792,"x_min":58,"x_max":743,"o":"m 543 769 q 690 711 636 769 q 743 547 743 653 l 743 0 l 468 0 l 468 497 q 458 554 468 539 q 426 569 447 569 q 333 496 381 569 l 333 0 l 58 0 l 58 742 l 299 742 l 318 665 q 423 744 369 719 q 543 769 476 769 m 485 864 q 435 871 456 864 q 393 893 415 878 q 355 917 367 911 q 328 924 343 924 q 288 910 303 924 q 254 864 272 896 l 125 926 q 205 1062 154 1008 q 321 1115 256 1115 q 373 1108 351 1115 q 418 1085 394 1101 q 455 1062 442 1068 q 482 1056 468 1056 q 521 1069 506 1056 q 554 1115 536 1083 l 683 1053 q 603 917 654 969 q 485 864 551 864 z "},"o":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ó":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 603 989 l 254 851 l 181 989 l 500 1189 l 603 989 z "},"ɵ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 576 q 333 545 358 576 q 301 446 308 514 l 510 446 q 478 546 503 515 q 406 576 453 576 m 406 165 q 479 199 454 165 q 511 307 504 233 l 300 307 q 331 199 306 232 q 406 165 356 165 z "},"ŏ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 406 869 q 223 947 288 869 q 149 1142 158 1025 l 292 1165 q 333 1085 304 1114 q 406 1056 361 1056 q 478 1085 450 1056 q 519 1165 507 1114 l 663 1142 q 588 947 653 1025 q 406 869 524 869 z "},"ǒ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 689 1046 l 488 836 l 324 836 l 122 1046 l 215 1153 l 406 1019 l 596 1153 l 689 1046 z "},"ô":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 122 957 l 324 1167 l 488 1167 l 689 957 l 596 850 l 406 983 l 215 850 l 122 957 z "},"ố":{"ha":811,"x_min":24,"x_max":896,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ộ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 122 957 l 324 1167 l 488 1167 l 689 957 l 596 850 l 406 983 l 215 850 l 122 957 m 406 -367 q 295 -324 339 -367 q 251 -219 251 -282 q 295 -115 251 -157 q 406 -72 339 -72 q 516 -115 472 -72 q 560 -219 560 -157 q 516 -324 560 -282 q 406 -367 472 -367 z "},"ồ":{"ha":811,"x_min":-82,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ổ":{"ha":811,"x_min":24,"x_max":815,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ỗ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ȍ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 381 925 l 247 861 l 65 1133 l 236 1218 l 381 925 m 633 921 l 497 867 l 326 1140 l 500 1218 l 633 921 z "},"ö":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 235 1136 q 328 1099 290 1136 q 367 1008 367 1061 q 328 917 367 954 q 235 879 290 879 q 142 917 181 879 q 103 1008 103 954 q 142 1099 103 1061 q 235 1136 181 1136 m 575 1136 q 669 1099 631 1136 q 707 1008 707 1061 q 669 917 707 954 q 575 879 631 879 q 482 917 521 879 q 443 1008 443 954 q 482 1099 443 1061 q 575 1136 521 1136 z "},"ȫ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ȯ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 406 1151 q 516 1109 472 1151 q 560 1004 560 1067 q 516 899 560 942 q 406 857 472 857 q 295 899 339 857 q 251 1004 251 942 q 295 1109 251 1067 q 406 1151 339 1151 z "},"ȱ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ọ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 406 -367 q 295 -324 339 -367 q 251 -219 251 -282 q 295 -115 251 -157 q 406 -72 339 -72 q 516 -115 472 -72 q 560 -219 560 -157 q 516 -324 560 -282 q 406 -367 472 -367 z "},"ò":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 631 989 l 557 851 l 208 989 l 311 1189 l 631 989 z "},"ỏ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 329 978 q 405 990 382 979 q 428 1026 428 1001 q 414 1055 428 1044 q 376 1065 400 1065 q 334 1061 353 1065 q 290 1047 315 1057 l 250 1150 q 414 1189 315 1189 q 551 1147 503 1189 q 600 1039 600 1106 q 569 949 600 983 q 481 903 539 914 l 481 835 l 329 835 l 329 978 z "},"ơ":{"ha":893,"x_min":24,"x_max":921,"o":"m 921 721 q 880 597 921 643 q 763 535 839 550 q 788 369 788 464 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 693 656 592 769 q 733 681 721 661 q 744 738 744 700 q 728 828 744 781 l 894 849 q 921 721 921 793 m 406 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 z "},"ớ":{"ha":893,"x_min":24,"x_max":921,"o":"m 254 851 l 181 989 l 500 1189 l 603 989 l 254 851 m 921 721 q 880 597 921 643 q 763 535 839 550 q 788 369 788 464 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 693 656 592 769 q 733 681 721 661 q 744 738 744 700 q 728 828 744 781 l 894 849 q 921 721 921 793 m 406 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 z "},"ợ":{"ha":893,"x_min":24,"x_max":921,"o":"m 921 721 q 880 597 921 643 q 763 535 839 550 q 788 369 788 464 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 693 656 592 769 q 733 681 721 661 q 744 738 744 700 q 728 828 744 781 l 894 849 q 921 721 921 793 m 406 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 m 406 -72 q 516 -115 472 -72 q 560 -219 560 -157 q 516 -324 560 -282 q 406 -367 472 -367 q 295 -324 339 -367 q 251 -219 251 -282 q 295 -115 251 -157 q 406 -72 339 -72 z "},"ờ":{"ha":893,"x_min":24,"x_max":921,"o":"m 557 851 l 208 989 l 311 1189 l 631 989 l 557 851 m 921 721 q 880 597 921 643 q 763 535 839 550 q 788 369 788 464 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 693 656 592 769 q 733 681 721 661 q 744 738 744 700 q 728 828 744 781 l 894 849 q 921 721 921 793 m 406 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 z "},"ở":{"ha":893,"x_min":24,"x_max":921,"o":"m 376 1065 q 334 1061 353 1065 q 290 1047 315 1057 l 250 1150 q 414 1189 315 1189 q 551 1147 503 1189 q 600 1039 600 1106 q 569 949 600 983 q 481 903 539 914 l 481 835 l 329 835 l 329 978 q 405 990 382 979 q 428 1026 428 1001 q 414 1055 428 1044 q 376 1065 400 1065 m 921 721 q 880 597 921 643 q 763 535 839 550 q 788 369 788 464 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 693 656 592 769 q 733 681 721 661 q 744 738 744 700 q 728 828 744 781 l 894 849 q 921 721 921 793 m 406 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 z "},"ỡ":{"ha":893,"x_min":24,"x_max":921,"o":"m 329 924 q 289 910 304 924 q 256 864 274 896 l 126 926 q 206 1062 156 1008 q 322 1115 257 1115 q 374 1108 353 1115 q 419 1085 396 1101 q 456 1062 443 1068 q 483 1056 469 1056 q 522 1069 507 1056 q 556 1115 538 1083 l 685 1053 q 604 917 656 969 q 486 864 553 864 q 437 871 457 864 q 394 893 417 878 q 356 917 368 911 q 329 924 344 924 m 921 721 q 880 597 921 643 q 763 535 839 550 q 788 369 788 464 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 693 656 592 769 q 733 681 721 661 q 744 738 744 700 q 728 828 744 781 l 894 849 q 921 721 921 793 m 406 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 z "},"ő":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 522 1085 l 344 839 l 226 900 l 353 1174 l 522 1085 m 771 1063 l 581 826 l 467 894 l 607 1161 l 771 1063 z "},"ƣ":{"ha":1183,"x_min":24,"x_max":1125,"o":"m 826 769 q 1044 694 963 769 q 1125 476 1125 619 l 1125 -315 l 850 -287 l 850 501 q 833 558 850 540 q 783 575 817 575 q 746 571 767 575 q 788 369 788 483 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 613 718 522 769 q 712 758 663 746 q 826 769 761 769 m 406 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 z "},"ȏ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 406 1121 q 588 1043 524 1121 q 663 849 653 965 l 519 825 q 478 906 507 876 q 406 935 450 935 q 333 906 361 935 q 292 825 304 876 l 149 849 q 223 1043 158 965 q 406 1121 288 1121 z "},"ō":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 179 900 l 179 1086 l 631 1086 l 631 900 l 179 900 z "},"ṓ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ṑ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ꞷ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 z "},"ɷ":{"ha":1064,"x_min":24,"x_max":1040,"o":"m 533 769 q 906 664 771 769 q 1040 339 1040 558 q 963 65 1040 157 q 756 -28 886 -28 q 607 10 661 -28 q 531 138 553 49 q 454 10 506 49 q 311 -28 403 -28 q 99 64 175 -28 q 24 339 24 156 q 160 664 24 558 q 533 769 296 769 m 711 169 q 758 213 743 169 q 774 356 774 256 q 717 526 774 467 q 533 586 661 586 q 347 526 403 586 q 290 356 290 467 q 307 213 290 257 q 357 169 324 169 q 394 188 382 169 q 406 264 406 207 l 406 410 l 658 443 l 658 264 q 672 188 658 207 q 711 169 685 169 z "},"ǫ":{"ha":811,"x_min":24,"x_max":788,"o":"m 535 -10 q 432 -71 461 -39 q 403 -132 403 -103 q 474 -193 403 -193 q 558 -182 510 -193 l 542 -342 q 439 -353 493 -353 q 279 -306 342 -353 q 217 -178 217 -258 q 296 -17 217 -82 q 95 113 167 13 q 24 372 24 213 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 685 665 583 769 q 788 369 788 561 q 721 126 788 225 q 535 -10 654 26 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ǭ":{"ha":811,"x_min":24,"x_max":788,"o":"m 631 900 l 179 900 l 179 1086 l 631 1086 l 631 900 m 535 -10 q 432 -71 461 -39 q 403 -132 403 -103 q 474 -193 403 -193 q 558 -182 510 -193 l 542 -342 q 439 -353 493 -353 q 279 -306 342 -353 q 217 -178 217 -258 q 296 -17 217 -82 q 95 113 167 13 q 24 372 24 213 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 685 665 583 769 q 788 369 788 561 q 721 126 788 225 q 535 -10 654 26 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ɔ":{"ha":654,"x_min":-14,"x_max":631,"o":"m 249 -28 q 103 -6 167 -28 q -14 57 40 15 l 108 214 q 169 180 142 190 q 232 169 197 169 q 320 217 292 169 q 349 369 349 265 q 322 525 349 478 q 240 572 296 572 q 107 528 172 572 l -7 678 q 261 769 100 769 q 531 666 432 769 q 631 369 631 563 q 585 159 631 249 q 453 21 539 69 q 249 -28 367 -28 z "},"ø":{"ha":811,"x_min":24,"x_max":788,"o":"m 629 711 q 747 576 706 663 q 788 369 788 489 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 375 -26 385 -28 l 324 -192 l 129 -135 l 182 31 q 65 167 106 81 q 24 372 24 253 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 436 768 426 769 l 490 935 l 685 878 l 629 711 m 406 572 q 310 524 342 572 q 278 372 278 475 q 296 225 278 269 l 411 572 l 406 572 m 406 169 q 501 218 469 169 q 533 369 533 267 q 515 517 533 472 l 400 169 l 406 169 z "},"ǿ":{"ha":811,"x_min":24,"x_max":788,"o":"m 629 711 q 747 576 706 663 q 788 369 788 489 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 375 -26 385 -28 l 324 -192 l 129 -135 l 182 31 q 65 167 106 81 q 24 372 24 253 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 436 768 426 769 l 490 935 l 685 878 l 629 711 m 406 572 q 310 524 342 572 q 278 372 278 475 q 296 225 278 269 l 411 572 l 406 572 m 406 169 q 501 218 469 169 q 533 369 533 267 q 515 517 533 472 l 400 169 l 406 169 m 603 989 l 254 851 l 181 989 l 500 1189 l 603 989 z "},"õ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 486 864 q 437 871 457 864 q 394 893 417 878 q 356 917 368 911 q 329 924 344 924 q 289 910 304 924 q 256 864 274 896 l 126 926 q 206 1062 156 1008 q 322 1115 257 1115 q 374 1108 353 1115 q 419 1085 396 1101 q 456 1062 443 1068 q 483 1056 469 1056 q 522 1069 507 1056 q 556 1115 538 1083 l 685 1053 q 604 917 656 969 q 486 864 553 864 z "},"ṍ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ȭ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ȣ":{"ha":803,"x_min":24,"x_max":779,"o":"m 621 588 q 779 321 779 519 q 735 143 779 222 q 606 18 692 64 q 401 -28 521 -28 q 197 17 282 -28 q 67 140 111 61 q 24 321 24 219 q 176 583 24 511 q 76 778 76 638 l 76 1033 l 346 1033 l 346 722 q 358 673 346 690 q 401 656 371 656 q 446 670 435 656 q 457 722 457 685 l 457 1033 l 726 1033 l 726 778 q 621 588 726 649 m 401 168 q 477 207 454 168 q 500 325 500 246 q 476 444 500 404 q 401 485 453 485 q 326 444 350 485 q 303 325 303 404 q 326 208 303 247 q 401 168 350 168 z "},"œ":{"ha":1257,"x_min":24,"x_max":1236,"o":"m 1236 381 q 1231 293 1236 346 l 781 293 q 827 192 792 218 q 929 167 863 167 q 1008 183 968 167 q 1097 232 1049 199 l 1208 82 q 903 -28 1074 -28 q 646 69 743 -28 q 404 -28 553 -28 q 125 76 226 -28 q 24 372 24 181 q 70 581 24 492 q 203 720 117 671 q 404 769 289 769 q 643 675 544 769 q 872 769 735 769 q 1064 724 982 769 q 1191 590 1146 678 q 1236 381 1236 503 m 965 458 q 945 560 964 524 q 878 596 926 596 q 809 564 832 596 q 779 449 786 532 l 965 449 l 965 458 m 404 169 q 479 217 456 169 q 503 372 503 264 q 479 524 503 476 q 404 572 456 572 q 329 524 353 572 q 306 372 306 476 q 329 217 306 264 q 404 169 353 169 z "},"p":{"ha":825,"x_min":58,"x_max":801,"o":"m 524 769 q 731 665 661 769 q 801 374 801 561 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 742 l 303 742 l 314 669 q 413 746 358 722 q 524 769 468 769 m 415 168 q 519 369 519 168 q 508 499 519 454 q 478 558 497 543 q 431 572 460 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 z "},"ṕ":{"ha":825,"x_min":58,"x_max":801,"o":"m 524 769 q 731 665 661 769 q 801 374 801 561 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 742 l 303 742 l 314 669 q 413 746 358 722 q 524 769 468 769 m 415 168 q 519 369 519 168 q 508 499 519 454 q 478 558 497 543 q 431 572 460 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 m 614 989 l 265 851 l 192 989 l 511 1189 l 614 989 z "},"ṗ":{"ha":825,"x_min":58,"x_max":801,"o":"m 524 769 q 731 665 661 769 q 801 374 801 561 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 742 l 303 742 l 314 669 q 413 746 358 722 q 524 769 468 769 m 415 168 q 519 369 519 168 q 508 499 519 454 q 478 558 497 543 q 431 572 460 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 m 417 1151 q 527 1109 483 1151 q 571 1004 571 1067 q 527 899 571 942 q 417 857 483 857 q 306 899 350 857 q 263 1004 263 942 q 306 1109 263 1067 q 417 1151 350 1151 z "},"ɸ":{"ha":950,"x_min":19,"x_max":931,"o":"m 931 375 q 841 115 931 204 q 611 8 751 25 l 610 -287 l 335 -315 l 336 8 q 109 110 199 25 q 19 367 19 196 q 108 626 19 536 q 335 732 196 715 l 335 1033 l 610 1061 l 610 733 q 840 633 750 718 q 931 375 931 547 m 582 174 q 648 228 626 181 q 669 375 669 275 q 647 519 669 476 q 582 569 625 561 l 582 174 m 281 367 q 364 174 281 197 l 364 567 q 301 513 322 560 q 281 367 281 467 z "},"ƥ":{"ha":825,"x_min":58,"x_max":801,"o":"m 518 769 q 731 666 660 769 q 801 374 801 563 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 785 q 139 983 58 906 q 372 1061 219 1061 q 490 1047 431 1061 q 590 1010 550 1032 l 518 839 q 410 864 464 864 q 351 843 369 864 q 333 771 333 822 l 333 683 q 424 749 375 729 q 518 769 472 769 m 415 168 q 519 369 519 168 q 508 499 519 456 q 476 558 496 543 q 425 572 457 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 z "},"þ":{"ha":825,"x_min":58,"x_max":801,"o":"m 518 769 q 731 666 660 769 q 801 374 801 563 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 1033 l 333 1061 l 333 683 q 424 749 375 729 q 518 769 472 769 m 415 168 q 519 369 519 168 q 508 499 519 456 q 476 558 496 543 q 425 572 457 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 z "},"q":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 742 l 769 -315 l 494 -287 l 494 57 q 306 -28 422 -28 q 94 79 165 -28 q 24 375 24 186 q 63 579 24 489 q 172 719 101 669 q 335 769 243 769 q 517 690 442 769 l 529 742 l 769 742 m 399 169 q 494 235 457 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ʠ":{"ha":828,"x_min":24,"x_max":992,"o":"m 788 1061 q 992 1010 901 1061 l 919 840 q 831 864 869 864 q 784 846 799 864 q 769 789 769 828 l 769 -315 l 494 -287 l 494 56 q 306 -28 421 -28 q 94 79 165 -28 q 24 375 24 186 q 61 580 24 490 q 167 719 99 669 q 326 769 236 769 q 494 697 435 769 l 494 785 q 569 983 494 906 q 788 1061 644 1061 m 401 169 q 494 235 457 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 318 243 306 288 q 351 184 331 199 q 401 169 371 169 z "},"ɋ":{"ha":828,"x_min":24,"x_max":881,"o":"m 881 -290 q 815 -308 856 -301 q 728 -315 774 -315 q 555 -253 615 -315 q 494 -74 494 -190 l 494 56 q 306 -28 421 -28 q 94 79 165 -28 q 24 375 24 186 q 62 580 24 490 q 172 719 100 669 q 340 769 243 769 q 433 750 388 769 q 517 690 478 731 l 529 742 l 769 742 l 769 -62 q 803 -100 769 -100 q 832 -94 818 -100 l 881 -290 m 401 169 q 494 235 457 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 318 243 306 288 q 351 184 331 199 q 401 169 371 169 z "},"ȹ":{"ha":1206,"x_min":24,"x_max":1182,"o":"m 919 769 q 1115 665 1047 769 q 1182 374 1182 560 q 1146 168 1182 260 q 1047 24 1110 76 q 908 -28 985 -28 q 815 -6 860 -28 q 742 58 769 17 l 742 -287 l 467 -315 l 467 50 q 288 -28 399 -28 q 91 80 158 -28 q 24 375 24 188 q 60 578 24 489 q 164 719 97 668 q 315 769 231 769 q 488 667 417 769 l 499 742 l 711 742 l 724 661 q 812 746 767 722 q 919 769 857 769 m 383 169 q 426 185 404 169 q 467 235 447 201 l 467 517 q 431 560 449 547 q 392 574 414 574 q 329 526 353 574 q 306 372 306 478 q 328 211 306 253 q 383 169 350 169 m 819 168 q 876 217 851 168 q 900 369 900 267 q 891 499 900 454 q 867 558 882 543 q 828 572 851 572 q 785 557 808 572 q 742 511 761 542 l 742 228 q 778 182 760 196 q 819 168 797 168 z "},"r":{"ha":569,"x_min":58,"x_max":583,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 0 l 58 0 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 z "},"ŕ":{"ha":569,"x_min":58,"x_max":583,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 0 l 58 0 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 m 518 989 l 169 851 l 96 989 l 415 1189 l 518 989 z "},"ɤ":{"ha":808,"x_min":-21,"x_max":829,"o":"m 667 769 q 753 758 715 769 q 829 725 790 747 l 754 567 q 728 576 742 572 q 696 579 714 579 q 658 568 674 579 q 628 531 642 557 l 532 349 q 594 240 575 285 q 614 143 614 194 q 562 19 614 67 q 404 -28 510 -28 q 249 20 303 -28 q 194 143 194 68 q 213 234 194 189 q 275 350 232 279 l 181 531 q 151 569 167 558 q 113 579 136 579 q 81 576 94 579 q 54 567 67 572 l -21 725 q 56 758 18 747 q 142 769 93 769 q 282 724 232 769 q 374 575 332 679 l 404 499 l 435 575 q 526 724 476 679 q 667 769 576 769 m 435 156 q 428 187 435 172 q 404 232 421 201 q 391 208 400 224 q 378 179 382 192 q 374 156 374 167 q 404 125 374 125 q 435 156 435 125 z "},"ř":{"ha":569,"x_min":38,"x_max":604,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 0 l 58 0 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 m 604 1046 l 403 836 l 239 836 l 38 1046 l 131 1153 l 321 1019 l 511 1153 l 604 1046 z "},"ŗ":{"ha":569,"x_min":58,"x_max":583,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 0 l 58 0 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 m 196 -86 q 288 -122 251 -86 q 324 -212 324 -158 q 315 -267 324 -242 q 286 -335 307 -292 l 217 -475 l 86 -475 l 121 -317 q 68 -212 68 -276 q 104 -123 68 -160 q 196 -86 140 -86 z "},"ȑ":{"ha":569,"x_min":-19,"x_max":583,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 0 l 58 0 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 m 296 925 l 163 861 l -19 1133 l 151 1218 l 296 925 m 549 921 l 413 867 l 242 1140 l 415 1218 l 549 921 z "},"ṛ":{"ha":569,"x_min":42,"x_max":583,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 0 l 58 0 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 m 196 -367 q 85 -324 129 -367 q 42 -219 42 -282 q 85 -115 42 -157 q 196 -72 129 -72 q 306 -115 263 -72 q 350 -219 350 -157 q 306 -324 350 -282 q 196 -367 263 -367 z "},"ɾ":{"ha":563,"x_min":49,"x_max":579,"o":"m 360 769 q 579 707 493 769 l 490 550 q 442 569 461 564 q 396 575 422 575 q 342 556 361 575 q 324 501 324 538 l 324 0 l 49 0 l 49 476 q 133 694 49 619 q 360 769 217 769 z "},"ɿ":{"ha":563,"x_min":-17,"x_max":514,"o":"m 203 769 q 430 694 346 769 q 514 476 514 619 l 514 0 l 239 0 l 239 501 q 220 556 239 538 q 167 575 201 575 q 121 569 140 575 q 72 550 101 564 l -17 707 q 203 769 69 769 z "},"ɽ":{"ha":569,"x_min":58,"x_max":589,"o":"m 589 -253 q 369 -315 503 -315 q 142 -240 226 -315 q 58 -22 58 -165 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 -47 q 352 -102 333 -83 q 406 -121 371 -121 q 451 -115 432 -121 q 500 -96 471 -110 l 589 -253 z "},"ɻ":{"ha":569,"x_min":-14,"x_max":767,"o":"m 767 -253 q 547 -315 681 -315 q 320 -240 404 -315 q 236 -22 236 -165 l 236 107 q 163 12 210 47 q 61 -24 115 -24 q -14 -11 25 -24 l 29 254 q 97 243 67 243 q 188 283 158 243 q 236 404 218 324 l 236 742 l 511 742 l 511 -47 q 530 -102 511 -83 q 583 -121 549 -121 q 629 -115 610 -121 q 678 -96 649 -110 l 767 -253 z "},"ȓ":{"ha":569,"x_min":58,"x_max":583,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 0 l 58 0 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 m 321 1121 q 503 1043 439 1121 q 578 849 568 965 l 435 825 q 394 906 422 876 q 321 935 365 935 q 248 906 276 935 q 207 825 219 876 l 64 849 q 138 1043 74 965 q 321 1121 203 1121 z "},"ɼ":{"ha":569,"x_min":58,"x_max":583,"o":"m 508 765 q 583 753 544 765 l 540 488 q 472 499 503 499 q 381 458 411 499 q 333 338 351 418 l 333 -287 l 58 -315 l 58 742 l 299 742 l 321 603 q 396 721 344 676 q 508 765 447 765 z "},"ɺ":{"ha":569,"x_min":-14,"x_max":511,"o":"m 511 1033 l 511 0 l 271 0 l 249 139 q 174 21 225 65 q 61 -24 122 -24 q -14 -11 25 -24 l 29 254 q 97 243 67 243 q 188 283 158 243 q 236 404 218 324 l 236 1061 l 511 1033 z "},"ɍ":{"ha":608,"x_min":0,"x_max":622,"o":"m 547 765 q 622 753 582 765 l 579 488 q 511 499 542 499 q 422 460 451 499 q 374 346 392 422 l 472 346 l 472 158 l 372 158 l 372 0 l 97 0 l 97 158 l 0 158 l 0 346 l 97 346 l 97 742 l 338 742 l 360 603 q 435 721 383 676 q 547 765 486 765 z "},"ɹ":{"ha":569,"x_min":-14,"x_max":511,"o":"m 511 742 l 511 0 l 271 0 l 249 139 q 174 21 225 65 q 61 -24 122 -24 q -14 -11 25 -24 l 29 254 q 97 243 67 243 q 188 283 158 243 q 236 404 218 324 l 236 742 l 511 742 z "},"s":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 z "},"ś":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 m 546 989 l 197 851 l 124 989 l 443 1189 l 546 989 z "},"ꞌ":{"ha":347,"x_min":56,"x_max":292,"o":"m 56 967 l 292 967 l 261 508 l 86 508 l 56 967 z "},"š":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 m 632 1046 l 431 836 l 267 836 l 65 1046 l 158 1153 l 349 1019 l 539 1153 l 632 1046 z "},"ş":{"ha":678,"x_min":-7,"x_max":671,"o":"m 671 228 q 603 67 671 133 q 419 -19 535 1 l 419 -60 q 572 -210 572 -79 q 511 -333 572 -285 q 344 -382 450 -382 q 248 -369 293 -382 q 171 -335 203 -356 l 231 -215 q 319 -240 276 -240 q 382 -207 382 -240 q 351 -176 382 -185 q 251 -167 321 -167 l 269 -25 q 115 13 188 -18 q -7 90 43 43 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 z "},"ŝ":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 m 65 957 l 267 1167 l 431 1167 l 632 957 l 539 850 l 349 983 l 158 850 l 65 957 z "},"ș":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 m 342 -86 q 433 -122 397 -86 q 469 -212 469 -158 q 461 -267 469 -242 q 432 -335 453 -292 l 363 -475 l 232 -475 l 267 -317 q 214 -212 214 -276 q 250 -123 214 -160 q 342 -86 286 -86 z "},"ṡ":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 m 349 1151 q 459 1109 415 1151 q 503 1004 503 1067 q 459 899 503 942 q 349 857 415 857 q 238 899 282 857 q 194 1004 194 942 q 238 1109 194 1067 q 349 1151 282 1151 z "},"ṣ":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 m 342 -367 q 231 -324 275 -367 q 188 -219 188 -282 q 231 -115 188 -157 q 342 -72 275 -72 q 452 -115 408 -72 q 496 -219 496 -157 q 452 -324 496 -282 q 342 -367 408 -367 z "},"ß":{"ha":853,"x_min":58,"x_max":846,"o":"m 415 1061 q 584 1032 514 1061 q 690 954 654 1003 q 725 849 725 906 q 705 765 725 799 q 647 692 685 731 q 608 644 621 664 q 594 603 594 625 q 614 558 594 578 q 678 506 633 538 q 763 438 729 469 q 821 354 796 406 q 846 233 846 303 q 763 42 846 113 q 546 -28 679 -28 q 451 -17 499 -28 q 367 13 403 -6 l 449 197 q 508 182 478 182 q 561 239 561 182 q 540 306 561 279 q 475 364 518 332 q 392 443 421 404 q 363 550 363 482 q 377 637 363 606 q 421 703 392 668 q 456 752 444 731 q 467 808 467 774 q 451 856 467 838 q 408 874 436 874 q 351 842 369 874 q 333 746 333 810 l 333 0 l 58 0 l 58 736 q 151 975 58 889 q 415 1061 243 1061 z "},"ʂ":{"ha":678,"x_min":-7,"x_max":671,"o":"m 353 -28 q 226 -10 279 -28 l 226 -46 q 315 -119 226 -119 q 378 -112 351 -119 q 435 -92 404 -106 l 524 -251 q 426 -297 485 -281 q 297 -314 367 -314 q 72 -240 151 -314 q -7 -21 -7 -165 l -7 90 l 101 211 q 310 161 199 161 q 390 207 390 161 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 459 565 504 550 q 378 579 414 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 628 94 671 153 q 514 4 586 36 q 353 -28 442 -28 z "},"ȿ":{"ha":678,"x_min":-7,"x_max":671,"o":"m 550 -119 q 617 -108 581 -119 l 663 -272 q 511 -314 603 -314 q 381 -288 435 -314 q 288 -224 326 -262 q 196 -114 250 -185 q 122 -22 150 -56 q 54 44 93 11 q -7 90 18 67 l 110 235 q 313 161 217 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 587 53 671 122 q 365 -26 503 -15 q 446 -78 404 -44 q 497 -110 475 -100 q 550 -119 518 -119 z "},"ſ":{"ha":513,"x_min":-3,"x_max":629,"o":"m 411 1061 q 529 1047 469 1061 q 629 1010 589 1032 l 557 836 q 449 864 506 864 q 390 843 408 864 q 372 771 372 822 l 372 0 l 97 0 l 97 556 l -3 556 l -3 742 l 97 742 l 97 785 q 178 983 97 906 q 411 1061 258 1061 z "},"t":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 z "},"ŧ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 333 l 7 333 l 7 506 l 86 506 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 506 l 500 506 l 500 333 l 361 333 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 z "},"ť":{"ha":557,"x_min":-3,"x_max":615,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 m 615 1108 l 419 1138 l 385 806 l 535 783 l 615 1108 z "},"ʨ":{"ha":1182,"x_min":-3,"x_max":1189,"o":"m 1004 371 q 1136 324 1083 371 q 1189 194 1189 278 q 1110 28 1189 83 q 913 -28 1032 -28 q 636 58 749 -28 q 356 -28 475 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 378 207 361 226 q 433 188 396 188 q 529 200 478 188 q 499 365 499 276 q 547 574 499 482 q 682 717 594 665 q 885 769 769 769 q 1154 671 1043 769 l 1040 511 q 910 563 976 563 q 815 518 846 563 q 785 365 785 474 q 789 300 785 329 q 892 356 840 340 q 1004 371 943 371 m 947 160 q 1011 204 1011 160 q 976 238 1011 238 q 850 182 926 238 q 947 160 885 160 z "},"ţ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 403 -60 q 556 -210 556 -79 q 494 -333 556 -285 q 328 -382 433 -382 q 231 -369 276 -382 q 154 -335 186 -356 l 214 -215 q 303 -240 260 -240 q 365 -207 365 -240 q 335 -176 365 -185 q 235 -167 304 -167 l 254 -14 q 86 274 86 36 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 q 497 -3 543 13 q 403 -25 450 -19 l 403 -60 z "},"ṱ":{"ha":557,"x_min":-3,"x_max":608,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 m 42 -293 l 243 -83 l 407 -83 l 608 -293 l 515 -400 l 325 -267 l 135 -400 l 42 -293 z "},"ț":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 m 325 -86 q 417 -122 381 -86 q 453 -212 453 -158 q 444 -267 453 -242 q 415 -335 436 -292 l 346 -475 l 215 -475 l 250 -317 q 197 -212 197 -276 q 233 -123 197 -160 q 325 -86 269 -86 z "},"ȶ":{"ha":722,"x_min":-3,"x_max":722,"o":"m 544 358 q 672 313 621 358 q 722 190 722 268 q 643 26 722 81 q 439 -28 564 -28 q 382 -25 418 -28 l 336 -125 l 213 -78 l 254 8 q 131 117 176 44 q 86 306 86 190 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 306 q 367 239 361 263 q 440 331 399 303 q 544 358 481 358 m 490 160 q 529 169 514 160 q 544 196 544 178 q 537 217 544 210 q 515 225 529 225 q 487 212 499 225 q 460 161 475 199 q 490 160 469 160 z "},"ⱦ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 183 19 250 -28 l 143 -107 l 65 -82 l 122 93 q 86 274 86 161 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 333 926 l 333 744 l 406 967 l 482 942 l 417 742 l 528 742 l 500 556 l 357 556 l 333 482 l 333 276 q 351 208 333 228 q 403 188 369 188 q 489 207 446 188 l 578 36 z "},"ṫ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 z "},"ṭ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 m 325 -367 q 215 -324 258 -367 q 171 -219 171 -282 q 215 -115 171 -157 q 325 -72 258 -72 q 435 -115 392 -72 q 479 -219 479 -157 q 435 -324 479 -282 q 325 -367 392 -367 z "},"ʧ":{"ha":836,"x_min":-3,"x_max":1000,"o":"m 796 1061 q 1000 1010 910 1061 l 928 840 q 839 864 878 864 q 792 846 807 864 q 778 789 778 828 l 778 -22 q 694 -240 778 -165 q 467 -315 610 -315 q 247 -253 333 -315 l 336 -96 q 385 -115 365 -110 q 431 -121 404 -121 q 484 -102 465 -121 q 503 -47 503 -83 l 503 -4 q 369 -28 436 -28 q 157 50 228 -26 q 86 274 86 126 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 503 742 l 503 785 q 578 983 503 906 q 796 1061 653 1061 m 361 271 q 382 206 361 225 q 446 188 403 188 q 503 192 476 188 l 503 556 l 361 556 l 361 271 z "},"ƭ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 785 q 160 983 86 906 q 375 1061 235 1061 q 575 1010 485 1061 l 503 854 q 418 878 453 878 q 375 860 389 878 q 361 803 361 842 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 z "},"ṯ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 q 473 -11 535 6 q 356 -28 411 -28 q 152 49 218 -26 q 86 274 86 125 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 276 q 376 208 361 228 q 419 188 392 188 q 489 207 454 188 l 578 36 z "},"ƽ":{"ha":689,"x_min":14,"x_max":661,"o":"m 578 549 l 314 549 l 314 469 q 419 485 357 485 q 540 457 485 485 q 628 374 596 429 q 661 243 661 319 q 617 101 661 163 q 496 6 574 39 q 317 -28 418 -28 q 145 3 217 -28 q 14 93 74 35 l 150 236 q 233 184 200 199 q 307 169 265 169 q 370 189 349 169 q 392 244 392 208 q 374 296 392 279 q 328 313 357 313 q 254 297 297 313 l 78 297 l 78 742 l 614 742 l 578 549 z "},"ƅ":{"ha":768,"x_min":-14,"x_max":761,"o":"m 396 515 q 672 451 583 515 q 761 256 761 388 q 673 67 761 133 q 433 0 585 0 l 96 0 l 96 443 l -14 522 q 144 742 82 619 l 371 742 l 371 515 l 396 515 m 403 171 q 465 195 444 171 q 485 261 485 219 q 463 327 485 306 q 392 349 442 349 l 371 349 l 371 171 l 403 171 z "},"ƨ":{"ha":665,"x_min":7,"x_max":672,"o":"m 342 769 q 505 738 436 769 q 610 650 574 706 q 646 526 646 594 q 591 383 646 435 q 424 297 536 332 q 335 266 364 279 q 297 240 306 253 q 288 210 288 228 q 307 174 288 186 q 358 161 326 161 q 451 181 403 161 q 542 235 500 201 l 672 90 q 528 3 614 35 q 346 -28 443 -28 q 169 4 246 -28 q 49 92 92 36 q 7 222 7 149 q 62 371 7 318 q 231 458 117 424 q 326 491 296 478 q 365 515 356 504 q 374 543 374 526 q 313 579 374 579 q 222 565 268 579 q 135 525 175 550 l 38 674 q 342 769 169 769 z "},"ƫ":{"ha":557,"x_min":-3,"x_max":578,"o":"m 578 36 l 578 -21 q 499 -240 578 -165 q 274 -314 419 -314 q 145 -297 204 -314 q 47 -251 86 -281 l 136 -92 q 193 -112 167 -106 q 256 -119 219 -119 q 344 -46 344 -119 l 344 -28 q 149 52 213 -24 q 86 274 86 128 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 254 q 378 192 361 210 q 431 174 396 174 q 501 183 461 174 l 578 36 z "},"ʈ":{"ha":557,"x_min":-3,"x_max":617,"o":"m 617 -253 q 397 -315 531 -315 q 170 -240 254 -315 q 86 -22 86 -165 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 528 742 l 500 556 l 361 556 l 361 -47 q 380 -102 361 -83 q 433 -121 399 -121 q 479 -115 460 -121 q 528 -96 499 -110 l 617 -253 z "},"ʦ":{"ha":1072,"x_min":-3,"x_max":1065,"o":"m 868 467 q 1018 379 971 433 q 1065 239 1065 325 q 945 40 1065 108 q 592 -28 825 -28 q 205 62 324 -28 q 86 343 86 151 l 86 556 l -3 556 l -3 742 l 86 742 l 86 897 l 361 929 l 361 742 l 486 742 l 458 556 l 361 556 l 361 346 q 417 203 361 244 q 592 161 472 161 q 741 174 699 161 q 783 218 783 188 q 764 259 783 243 q 681 296 744 275 q 533 381 579 329 q 486 525 486 432 q 520 650 486 594 q 621 738 554 706 q 779 769 688 769 q 921 746 854 769 q 1038 679 988 722 l 950 536 q 873 568 914 557 q 796 579 832 579 q 733 543 733 579 q 759 509 733 525 q 868 467 785 493 z "},"ʇ":{"ha":557,"x_min":-21,"x_max":560,"o":"m 560 0 l 471 0 l 471 -156 l 196 -187 l 196 0 l 29 0 l 57 186 l 196 186 l 196 465 q 181 534 196 514 q 138 554 165 554 q 68 535 103 554 l -21 706 q 84 753 22 736 q 201 769 146 769 q 405 692 339 768 q 471 468 471 617 l 471 186 l 560 186 l 560 0 z "},"u":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 z "},"ú":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 585 989 l 236 851 l 163 989 l 482 1189 l 585 989 z "},"ʉ":{"ha":864,"x_min":-7,"x_max":864,"o":"m 864 394 l 764 394 l 764 0 l 524 0 l 514 81 q 294 -28 438 -28 q 139 35 190 -28 q 88 208 88 97 l 88 394 l -7 394 l -7 554 l 88 554 l 88 742 l 363 742 l 363 554 l 489 554 l 489 742 l 764 742 l 764 554 l 864 554 l 864 394 m 489 394 l 363 394 l 363 244 q 374 188 363 204 q 408 172 386 172 q 449 188 428 172 q 489 233 471 203 l 489 394 z "},"ŭ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 388 869 q 205 947 269 869 q 131 1142 140 1025 l 274 1165 q 315 1085 286 1114 q 388 1056 343 1056 q 460 1085 432 1056 q 501 1165 489 1114 l 644 1142 q 570 947 635 1025 q 388 869 506 869 z "},"ǔ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 671 1046 l 469 836 l 306 836 l 104 1046 l 197 1153 l 388 1019 l 578 1153 l 671 1046 z "},"û":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 104 957 l 306 1167 l 469 1167 l 671 957 l 578 850 l 388 983 l 197 850 l 104 957 z "},"ȕ":{"ha":783,"x_min":47,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 363 925 l 229 861 l 47 1133 l 218 1218 l 363 925 m 615 921 l 479 867 l 308 1140 l 482 1218 l 615 921 z "},"ü":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 217 1136 q 310 1099 272 1136 q 349 1008 349 1061 q 310 917 349 954 q 217 879 272 879 q 124 917 163 879 q 85 1008 85 954 q 124 1099 85 1061 q 217 1136 163 1136 m 557 1136 q 651 1099 613 1136 q 689 1008 689 1061 q 651 917 689 954 q 557 879 613 879 q 464 917 503 879 q 425 1008 425 954 q 464 1099 425 1061 q 557 1136 503 1136 z "},"ǘ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 621 1225 l 383 1018 l 282 1108 l 476 1367 l 621 1225 m 203 1072 q 296 1035 257 1072 q 335 944 335 997 q 296 853 335 890 q 203 815 257 815 q 109 853 147 815 q 71 944 71 890 q 109 1035 71 997 q 203 1072 147 1072 m 571 1072 q 664 1035 625 1072 q 703 944 703 997 q 664 853 703 890 q 571 815 625 815 q 477 853 515 815 q 439 944 439 890 q 477 1035 439 997 q 571 1072 515 1072 z "},"ǚ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 671 1261 l 469 1065 l 306 1065 l 104 1261 l 197 1368 l 388 1249 l 578 1368 l 671 1261 m 203 1072 q 297 1035 258 1072 q 335 944 335 997 q 297 853 335 890 q 203 815 258 815 q 110 853 149 815 q 71 944 71 890 q 110 1035 71 997 q 203 1072 149 1072 m 571 1072 q 665 1035 626 1072 q 703 944 703 997 q 665 853 703 890 q 571 815 626 815 q 478 853 517 815 q 439 944 439 890 q 478 1035 439 997 q 571 1072 517 1072 z "},"ǜ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 494 1108 l 393 1018 l 156 1225 l 300 1367 l 494 1108 m 203 1072 q 297 1035 258 1072 q 335 944 335 997 q 297 853 335 890 q 203 815 258 815 q 110 853 149 815 q 71 944 71 890 q 110 1035 71 997 q 203 1072 149 1072 m 571 1072 q 665 1035 626 1072 q 703 944 703 997 q 665 853 703 890 q 571 815 626 815 q 478 853 517 815 q 439 944 439 890 q 478 1035 439 997 q 571 1072 517 1072 z "},"ǖ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 z "},"ụ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 388 -367 q 277 -324 321 -367 q 233 -219 233 -282 q 277 -115 233 -157 q 388 -72 321 -72 q 498 -115 454 -72 q 542 -219 542 -157 q 498 -324 542 -282 q 388 -367 454 -367 z "},"ù":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 613 989 l 539 851 l 190 989 l 293 1189 l 613 989 z "},"ủ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 311 978 q 387 990 364 979 q 410 1026 410 1001 q 396 1055 410 1044 q 358 1065 382 1065 q 316 1061 335 1065 q 272 1047 297 1057 l 232 1150 q 396 1189 297 1189 q 533 1147 485 1189 q 582 1039 582 1106 q 551 949 582 983 q 463 903 521 914 l 463 835 l 311 835 l 311 978 z "},"ư":{"ha":928,"x_min":49,"x_max":956,"o":"m 929 849 q 956 721 956 793 q 895 578 956 626 q 728 529 835 529 l 725 554 l 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 656 q 767 680 754 661 q 779 738 779 699 q 763 828 779 781 l 929 849 z "},"ứ":{"ha":928,"x_min":49,"x_max":956,"o":"m 239 851 l 165 989 l 485 1189 l 588 989 l 239 851 m 929 849 q 956 721 956 793 q 895 578 956 626 q 728 529 835 529 l 725 554 l 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 656 q 767 680 754 661 q 779 738 779 699 q 763 828 779 781 l 929 849 z "},"ự":{"ha":928,"x_min":49,"x_max":956,"o":"m 929 849 q 956 721 956 793 q 895 578 956 626 q 728 529 835 529 l 725 554 l 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 656 q 767 680 754 661 q 779 738 779 699 q 763 828 779 781 l 929 849 m 390 -72 q 501 -115 457 -72 q 544 -219 544 -157 q 501 -324 544 -282 q 390 -367 457 -367 q 280 -324 324 -367 q 236 -219 236 -282 q 280 -115 236 -157 q 390 -72 324 -72 z "},"ừ":{"ha":928,"x_min":49,"x_max":956,"o":"m 542 851 l 193 989 l 296 1189 l 615 989 l 542 851 m 929 849 q 956 721 956 793 q 895 578 956 626 q 728 529 835 529 l 725 554 l 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 656 q 767 680 754 661 q 779 738 779 699 q 763 828 779 781 l 929 849 z "},"ử":{"ha":928,"x_min":49,"x_max":956,"o":"m 361 1065 q 319 1061 338 1065 q 275 1047 300 1057 l 235 1150 q 399 1189 300 1189 q 536 1147 488 1189 q 585 1039 585 1106 q 554 949 585 983 q 465 903 524 914 l 465 835 l 314 835 l 314 978 q 390 990 367 979 q 413 1026 413 1001 q 399 1055 413 1044 q 361 1065 385 1065 m 929 849 q 956 721 956 793 q 895 578 956 626 q 728 529 835 529 l 725 554 l 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 656 q 767 680 754 661 q 779 738 779 699 q 763 828 779 781 l 929 849 z "},"ữ":{"ha":928,"x_min":49,"x_max":956,"o":"m 314 924 q 274 910 289 924 q 240 864 258 896 l 111 926 q 191 1062 140 1008 q 307 1115 242 1115 q 359 1108 338 1115 q 404 1085 381 1101 q 441 1062 428 1068 q 468 1056 454 1056 q 507 1069 492 1056 q 540 1115 522 1083 l 669 1053 q 589 917 640 969 q 471 864 538 864 q 422 871 442 864 q 379 893 401 878 q 341 917 353 911 q 314 924 329 924 m 929 849 q 956 721 956 793 q 895 578 956 626 q 728 529 835 529 l 725 554 l 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 656 q 767 680 754 661 q 779 738 779 699 q 763 828 779 781 l 929 849 z "},"ű":{"ha":783,"x_min":49,"x_max":753,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 504 1085 l 326 839 l 208 900 l 335 1174 l 504 1085 m 753 1063 l 563 826 l 449 894 l 589 1161 l 753 1063 z "},"ȗ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 388 1121 q 570 1043 506 1121 q 644 849 635 965 l 501 825 q 460 906 489 876 q 388 935 432 935 q 315 906 343 935 q 274 825 286 876 l 131 849 q 205 1043 140 965 q 388 1121 269 1121 z "},"ū":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 161 900 l 161 1086 l 613 1086 l 613 900 l 161 900 z "},"ᵬ":{"ha":943,"x_min":0,"x_max":919,"o":"m 646 769 q 850 665 781 769 q 919 369 919 560 q 884 165 919 256 q 781 24 849 75 q 622 -28 714 -28 q 513 -3 563 -28 q 431 64 464 21 l 421 0 l 176 0 l 176 844 q 110 792 131 829 l 0 831 q 62 947 18 903 q 176 990 106 990 l 176 1033 l 451 1061 l 451 939 q 517 990 497 954 l 626 951 q 565 837 608 881 q 451 792 522 793 l 451 676 q 535 744 482 718 q 646 769 588 769 m 539 168 q 612 214 586 168 q 638 369 638 260 q 615 531 638 489 q 549 572 592 572 q 451 503 492 572 l 451 222 q 539 168 483 168 z "},"ᵭ":{"ha":953,"x_min":24,"x_max":953,"o":"m 953 951 q 891 835 935 879 q 775 792 847 792 l 769 793 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 842 q 458 819 469 832 q 436 792 446 807 l 326 831 q 385 944 343 900 q 494 990 426 988 l 494 1061 l 769 1033 l 769 939 l 775 938 q 843 990 822 953 l 953 951 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ᵮ":{"ha":624,"x_min":-14,"x_max":740,"o":"m 483 413 q 524 427 508 415 q 552 456 539 439 q 571 479 565 472 l 708 413 q 613 272 665 325 q 483 213 561 218 l 483 0 l 208 0 l 208 294 q 169 278 183 292 q 142 249 154 265 q 125 225 131 232 l -14 294 q 81 435 29 382 q 208 494 132 488 l 208 556 l 108 556 l 108 742 l 208 742 l 208 785 q 289 983 208 906 q 522 1061 369 1061 q 640 1047 581 1061 q 740 1010 700 1032 l 668 836 q 560 864 617 864 q 501 843 519 864 q 483 771 483 822 l 483 742 l 656 742 l 625 556 l 483 556 l 483 413 z "},"ᵯ":{"ha":1432,"x_min":0,"x_max":1432,"o":"m 1432 356 q 1358 228 1403 272 q 1243 182 1314 183 l 1243 0 l 968 0 l 968 213 q 854 224 926 215 l 854 0 l 579 0 l 579 251 l 465 264 l 465 0 l 190 0 l 190 286 q 151 273 165 285 q 126 246 138 261 q 110 224 115 231 l 0 272 q 74 401 29 356 q 190 446 119 446 l 190 742 l 431 742 l 450 667 q 547 745 494 721 q 665 769 599 769 q 767 742 724 769 q 832 663 810 714 q 932 744 879 718 q 1054 769 985 769 q 1191 710 1139 769 q 1243 547 1243 651 l 1243 342 q 1281 355 1267 343 q 1306 382 1294 367 q 1322 404 1317 397 l 1432 356 m 579 408 l 579 497 q 569 553 579 538 q 542 569 560 569 q 501 551 521 569 q 465 496 482 532 l 465 421 l 579 408 m 854 381 q 968 369 926 372 l 968 497 q 958 553 968 538 q 931 569 949 569 q 890 551 910 569 q 854 496 871 532 l 854 381 z "},"ᵰ":{"ha":1063,"x_min":0,"x_max":1063,"o":"m 1063 356 q 989 228 1033 272 q 875 182 944 183 l 875 0 l 600 0 l 600 238 q 465 268 500 260 l 465 0 l 190 0 l 190 286 q 151 273 165 285 q 126 246 138 261 q 110 224 115 231 l 0 272 q 74 401 29 356 q 190 446 119 446 l 190 742 l 431 742 l 450 665 q 555 744 501 719 q 675 769 608 769 q 822 711 768 769 q 875 547 875 653 l 875 342 q 913 356 899 343 q 938 383 926 368 q 953 404 949 397 l 1063 356 m 465 425 q 600 394 500 417 l 600 497 q 590 554 600 539 q 558 569 579 569 q 465 496 513 569 l 465 425 z "},"ᵱ":{"ha":825,"x_min":-117,"x_max":801,"o":"m 506 -28 q 333 46 400 -28 l 333 -90 q 400 -37 379 -75 l 510 -76 q 448 -192 492 -149 q 333 -236 404 -236 l 333 -287 l 58 -315 l 58 -185 q -7 -236 13 -200 l -117 -197 q -56 -83 -99 -126 q 58 -37 -12 -39 l 58 742 l 303 742 l 314 669 q 413 746 358 722 q 524 769 468 769 q 731 665 661 769 q 801 374 801 561 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 m 431 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 q 519 369 519 168 q 508 499 519 454 q 478 558 497 543 q 431 572 460 572 z "},"ᵲ":{"ha":731,"x_min":0,"x_max":744,"o":"m 494 339 q 537 353 521 340 q 566 382 553 365 q 585 406 579 399 l 722 339 q 626 197 678 250 q 494 138 574 143 l 494 0 l 219 0 l 219 219 q 178 201 193 215 q 139 151 164 188 l 0 221 q 94 360 43 307 q 219 421 144 414 l 219 742 l 460 742 l 482 603 q 557 721 506 676 q 669 765 608 765 q 744 753 706 765 l 701 488 q 633 499 664 499 q 542 458 572 499 q 494 339 513 418 z "},"ᵳ":{"ha":740,"x_min":0,"x_max":757,"o":"m 501 410 q 540 424 525 413 q 567 452 554 436 q 585 475 579 468 l 722 408 q 628 269 679 322 q 501 208 578 215 l 501 0 l 226 0 l 226 290 q 183 275 199 289 q 155 244 167 261 q 139 221 143 226 l 0 290 q 95 432 42 378 q 226 492 149 486 q 315 699 232 628 q 538 769 399 769 q 757 707 671 769 l 668 550 q 619 569 639 564 q 574 575 600 575 q 520 556 539 575 q 501 501 501 538 l 501 410 z "},"ᵴ":{"ha":685,"x_min":-7,"x_max":672,"o":"m 672 458 q 629 364 658 401 q 671 228 671 313 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 196 307 217 299 q 128 254 149 292 l 18 293 q 71 400 33 358 q 32 529 32 456 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 l 506 449 q 563 497 546 464 l 672 458 z "},"ᵵ":{"ha":688,"x_min":-14,"x_max":708,"o":"m 543 188 q 613 207 578 188 l 701 36 q 597 -11 658 6 q 479 -28 535 -28 q 276 49 342 -26 q 210 274 210 125 l 210 315 q 169 300 185 313 q 142 270 154 288 q 125 246 131 253 l -14 315 q 81 455 28 401 q 210 515 133 508 l 210 556 l 121 556 l 121 742 l 210 742 l 210 897 l 485 929 l 485 742 l 651 742 l 624 556 l 485 556 l 485 433 q 523 447 508 436 q 551 475 538 458 q 571 500 564 492 l 708 433 q 615 294 665 347 q 489 233 564 240 q 543 188 500 188 z "},"ᵶ":{"ha":729,"x_min":0,"x_max":729,"o":"m 333 189 l 689 189 l 665 0 l 54 0 l 54 178 l 217 353 q 192 356 200 356 q 152 344 167 356 q 126 316 138 332 q 110 293 115 300 l 0 342 q 77 471 29 426 q 206 515 125 515 q 266 505 236 515 q 331 475 296 494 l 404 556 l 82 556 l 82 742 l 679 742 l 679 565 l 515 388 q 538 386 524 386 q 577 398 563 386 q 603 426 592 410 q 619 449 614 442 l 729 400 q 652 271 700 315 q 524 226 604 226 q 399 260 468 226 l 333 189 z "},"ᶑ":{"ha":861,"x_min":24,"x_max":1025,"o":"m 1025 -253 q 806 -315 939 -315 q 578 -240 663 -315 q 494 -22 494 -165 l 494 56 q 306 -28 421 -28 q 94 79 165 -28 q 24 375 24 186 q 61 580 24 490 q 167 719 99 669 q 326 769 236 769 q 494 697 435 769 l 494 785 q 569 983 494 906 q 788 1061 644 1061 q 992 1010 901 1061 l 919 840 q 831 864 869 864 q 784 846 799 864 q 769 789 769 828 l 769 -47 q 788 -102 769 -83 q 842 -121 807 -121 q 888 -115 868 -121 q 936 -96 907 -110 l 1025 -253 m 401 169 q 494 235 457 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 318 243 306 288 q 351 184 331 199 q 401 169 371 169 z "},"ų":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 q 600 -65 635 -31 q 565 -132 565 -100 q 636 -193 565 -193 q 721 -182 672 -193 l 704 -342 q 601 -353 656 -353 q 442 -306 504 -353 q 379 -178 379 -258 q 485 3 379 -67 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 z "},"ʊ":{"ha":810,"x_min":24,"x_max":786,"o":"m 406 -28 q 201 17 288 -28 q 69 135 114 61 q 24 300 24 210 q 64 453 24 392 q 176 558 104 515 l 46 558 l 46 742 l 364 742 l 364 574 q 304 336 304 496 q 329 206 304 249 q 406 163 354 163 q 483 206 458 163 q 507 336 507 249 q 446 574 507 496 l 446 742 l 764 742 l 764 558 l 635 558 q 747 453 707 515 q 786 300 786 392 q 742 135 786 210 q 611 16 697 60 q 406 -28 525 -28 z "},"ů":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 388 1231 q 501 1203 453 1231 q 576 1129 550 1175 q 601 1028 601 1083 q 576 926 601 972 q 501 851 550 879 q 388 824 453 824 q 274 851 322 824 q 199 926 225 879 q 174 1028 174 972 q 199 1129 174 1083 q 274 1203 225 1175 q 388 1231 322 1231 m 388 1092 q 347 1076 363 1092 q 332 1028 332 1060 q 347 980 332 996 q 388 964 363 964 q 428 980 413 964 q 443 1028 443 996 q 428 1076 443 1060 q 388 1092 413 1092 z "},"ũ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 m 468 864 q 419 871 439 864 q 376 893 399 878 q 338 917 350 911 q 311 924 326 924 q 271 910 286 924 q 238 864 256 896 l 108 926 q 188 1062 138 1008 q 304 1115 239 1115 q 356 1108 335 1115 q 401 1085 378 1101 q 438 1062 425 1068 q 465 1056 451 1056 q 504 1069 489 1056 q 538 1115 519 1083 l 667 1053 q 586 917 638 969 q 468 864 535 864 z "},"ṹ":{"ha":783,"x_min":49,"x_max":725,"o":"m 725 0 l 485 0 l 475 81 q 256 -28 399 -28 q 100 35 151 -28 q 49 208 49 97 l 49 742 l 324 742 l 324 244 q 335 188 324 204 q 369 172 347 172 q 410 188 389 172 q 450 233 432 203 l 450 742 l 725 742 l 725 0 z "},"v":{"ha":731,"x_min":-21,"x_max":751,"o":"m 531 0 l 206 0 l -21 742 l 278 742 l 371 199 l 474 742 l 751 742 l 531 0 z "},"ʋ":{"ha":775,"x_min":49,"x_max":747,"o":"m 364 -28 q 138 42 226 -28 q 49 251 49 113 l 49 742 l 324 742 l 324 264 q 339 190 324 211 q 385 169 354 169 q 472 328 472 169 l 472 531 q 439 568 472 568 q 417 565 428 568 l 382 751 q 514 769 443 769 q 686 707 625 769 q 747 519 747 644 l 747 339 q 640 63 747 153 q 364 -28 532 -28 z "},"ⱱ":{"ha":761,"x_min":-21,"x_max":803,"o":"m 531 0 l 206 0 l -21 742 l 278 742 l 371 199 l 447 597 q 522 767 469 714 q 676 819 575 819 q 803 801 742 819 l 763 619 q 726 625 746 625 q 693 614 706 625 q 672 571 681 603 l 531 0 z "},"ʌ":{"ha":731,"x_min":-21,"x_max":751,"o":"m 200 742 l 525 742 l 751 0 l 453 0 l 360 543 l 257 0 l -21 0 l 200 742 z "},"w":{"ha":1067,"x_min":-7,"x_max":1074,"o":"m 928 0 l 613 0 l 532 497 l 456 0 l 142 0 l -7 742 l 271 742 l 315 210 l 413 742 l 669 742 l 747 210 l 810 742 l 1074 742 l 928 0 z "},"ẃ":{"ha":1067,"x_min":-7,"x_max":1074,"o":"m 928 0 l 613 0 l 532 497 l 456 0 l 142 0 l -7 742 l 271 742 l 315 210 l 413 742 l 669 742 l 747 210 l 810 742 l 1074 742 l 928 0 m 731 989 l 382 851 l 308 989 l 628 1189 l 731 989 z "},"ŵ":{"ha":1067,"x_min":-7,"x_max":1074,"o":"m 928 0 l 613 0 l 532 497 l 456 0 l 142 0 l -7 742 l 271 742 l 315 210 l 413 742 l 669 742 l 747 210 l 810 742 l 1074 742 l 928 0 m 250 957 l 451 1167 l 615 1167 l 817 957 l 724 850 l 533 983 l 343 850 l 250 957 z "},"ẅ":{"ha":1067,"x_min":-7,"x_max":1074,"o":"m 928 0 l 613 0 l 532 497 l 456 0 l 142 0 l -7 742 l 271 742 l 315 210 l 413 742 l 669 742 l 747 210 l 810 742 l 1074 742 l 928 0 m 363 1136 q 456 1099 418 1136 q 494 1008 494 1061 q 456 917 494 954 q 363 879 418 879 q 269 917 308 879 q 231 1008 231 954 q 269 1099 231 1061 q 363 1136 308 1136 m 703 1136 q 797 1099 758 1136 q 835 1008 835 1061 q 797 917 835 954 q 703 879 758 879 q 610 917 649 879 q 571 1008 571 954 q 610 1099 571 1061 q 703 1136 649 1136 z "},"ẁ":{"ha":1067,"x_min":-7,"x_max":1074,"o":"m 928 0 l 613 0 l 532 497 l 456 0 l 142 0 l -7 742 l 271 742 l 315 210 l 413 742 l 669 742 l 747 210 l 810 742 l 1074 742 l 928 0 m 758 989 l 685 851 l 336 989 l 439 1189 l 758 989 z "},"ⱳ":{"ha":1111,"x_min":-7,"x_max":1153,"o":"m -7 742 l 271 742 l 315 210 l 413 742 l 669 742 l 747 210 l 794 583 q 863 762 810 704 q 1026 819 917 819 q 1153 801 1092 819 l 1113 619 q 1076 625 1096 625 q 1040 614 1053 625 q 1022 571 1028 603 l 928 0 l 613 0 l 532 497 l 456 0 l 142 0 l -7 742 z "},"ʍ":{"ha":1067,"x_min":-7,"x_max":1074,"o":"m 139 742 l 454 742 l 535 244 l 611 742 l 925 742 l 1074 0 l 796 0 l 751 532 l 654 0 l 397 0 l 319 532 l 257 0 l -7 0 l 139 742 z "},"ƿ":{"ha":825,"x_min":58,"x_max":801,"o":"m 543 769 q 676 735 617 769 q 768 636 735 700 q 801 488 801 572 q 753 277 801 363 q 624 134 704 192 q 418 17 544 76 l 333 -24 l 333 -287 l 58 -315 l 58 742 l 303 742 l 315 660 q 415 741 357 713 q 543 769 474 769 m 368 194 q 479 322 439 249 q 519 483 519 394 q 444 578 519 578 q 333 529 385 578 l 333 167 l 368 194 z "},"x":{"ha":733,"x_min":-28,"x_max":761,"o":"m 761 0 l 454 0 l 357 256 l 268 0 l -28 0 l 199 389 l -8 742 l 296 742 l 368 524 l 433 742 l 721 742 l 532 397 l 761 0 z "},"y":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 z "},"ý":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 568 989 l 219 851 l 146 989 l 465 1189 l 568 989 z "},"ŷ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 88 957 l 289 1167 l 453 1167 l 654 957 l 561 850 l 371 983 l 181 850 l 88 957 z "},"ÿ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 200 1136 q 294 1099 256 1136 q 332 1008 332 1061 q 294 917 332 954 q 200 879 256 879 q 107 917 146 879 q 68 1008 68 954 q 107 1099 68 1061 q 200 1136 146 1136 m 540 1136 q 634 1099 596 1136 q 672 1008 672 1061 q 634 917 672 954 q 540 879 596 879 q 447 917 486 879 q 408 1008 408 954 q 447 1099 408 1061 q 540 1136 486 1136 z "},"ỵ":{"ha":742,"x_min":-21,"x_max":800,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 646 -367 q 535 -324 579 -367 q 492 -219 492 -282 q 535 -115 492 -157 q 646 -72 579 -72 q 756 -115 713 -72 q 800 -219 800 -157 q 756 -324 800 -282 q 646 -367 713 -367 z "},"ỳ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 596 989 l 522 851 l 174 989 l 276 1189 l 596 989 z "},"ƴ":{"ha":754,"x_min":-21,"x_max":796,"o":"m 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 436 583 q 510 763 458 706 q 669 819 563 819 q 796 801 735 819 l 756 619 q 724 625 739 625 q 686 613 700 625 q 665 571 672 601 l 556 53 q 393 -225 515 -139 q 74 -317 271 -311 l 44 -129 z "},"ỷ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 294 978 q 370 990 347 979 q 393 1026 393 1001 q 379 1055 393 1044 q 342 1065 365 1065 q 299 1061 318 1065 q 256 1047 281 1057 l 215 1150 q 379 1189 281 1189 q 517 1147 468 1189 q 565 1039 565 1106 q 535 949 565 983 q 446 903 504 914 l 446 835 l 294 835 l 294 978 z "},"ȳ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 144 900 l 144 1086 l 596 1086 l 596 900 l 144 900 z "},"ɏ":{"ha":783,"x_min":0,"x_max":783,"o":"m 725 554 l 781 554 l 781 408 l 681 408 l 556 1 q 394 -232 508 -153 q 94 -317 281 -311 l 65 -129 q 224 -90 172 -118 q 306 0 276 -62 l 211 0 l 94 408 l 0 408 l 0 554 l 53 554 l 0 742 l 292 742 l 322 554 l 463 554 l 500 742 l 783 742 l 725 554 m 433 408 l 346 408 l 385 168 l 433 408 z "},"ỹ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 451 864 q 402 871 422 864 q 360 893 382 878 q 322 917 333 911 q 294 924 310 924 q 254 910 269 924 q 221 864 239 896 l 92 926 q 172 1062 121 1008 q 288 1115 222 1115 q 340 1108 318 1115 q 385 1085 361 1101 q 422 1062 408 1068 q 449 1056 435 1056 q 488 1069 472 1056 q 521 1115 503 1083 l 650 1053 q 569 917 621 969 q 451 864 518 864 z "},"ʎ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 207 740 q 369 974 254 896 q 668 1058 483 1053 l 692 879 q 529 838 582 869 q 450 742 476 806 l 551 742 l 763 0 l 471 0 l 378 574 l 263 0 l -21 0 l 207 740 z "},"z":{"ha":649,"x_min":7,"x_max":642,"o":"m 632 551 l 328 203 l 642 203 l 618 0 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 z "},"ź":{"ha":649,"x_min":7,"x_max":642,"o":"m 632 551 l 328 203 l 642 203 l 618 0 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 m 532 989 l 183 851 l 110 989 l 429 1189 l 532 989 z "},"ž":{"ha":649,"x_min":7,"x_max":642,"o":"m 632 551 l 328 203 l 642 203 l 618 0 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 m 618 1046 l 417 836 l 253 836 l 51 1046 l 144 1153 l 335 1019 l 525 1153 l 618 1046 z "},"ʑ":{"ha":832,"x_min":7,"x_max":853,"o":"m 663 413 q 799 363 746 413 q 853 229 853 314 q 776 59 853 119 q 539 0 700 -1 q 531 -137 531 -42 l 531 -183 l 385 -183 q 393 0 385 -75 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 565 l 314 203 l 421 203 q 515 364 454 315 q 663 413 576 413 m 603 203 q 675 247 675 203 q 666 270 675 261 q 640 279 657 279 q 565 203 588 279 l 603 203 z "},"ż":{"ha":649,"x_min":7,"x_max":642,"o":"m 632 551 l 328 203 l 642 203 l 618 0 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 m 335 1151 q 445 1109 401 1151 q 489 1004 489 1067 q 445 899 489 942 q 335 857 401 857 q 224 899 268 857 q 181 1004 181 942 q 224 1109 181 1067 q 335 1151 268 1151 z "},"ẓ":{"ha":649,"x_min":7,"x_max":642,"o":"m 632 551 l 328 203 l 642 203 l 618 0 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 m 315 -367 q 205 -324 249 -367 q 161 -219 161 -282 q 205 -115 161 -157 q 315 -72 249 -72 q 426 -115 382 -72 q 469 -219 469 -157 q 426 -324 469 -282 q 315 -367 382 -367 z "},"ȥ":{"ha":639,"x_min":7,"x_max":632,"o":"m 632 551 l 328 203 l 632 203 l 632 -22 q 547 -240 632 -165 q 318 -315 463 -315 q 101 -253 188 -315 l 190 -93 q 241 -115 221 -108 q 294 -121 261 -121 q 350 -102 329 -121 q 371 -47 371 -83 l 371 0 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 z "},"ʐ":{"ha":656,"x_min":7,"x_max":897,"o":"m 897 -253 q 681 -315 811 -315 q 461 -240 542 -315 q 381 -22 381 -165 l 381 0 l 7 0 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 l 328 203 l 642 203 l 642 -47 q 660 -102 642 -83 q 714 -121 679 -121 q 759 -115 740 -121 q 808 -93 778 -108 l 897 -253 z "},"ƶ":{"ha":649,"x_min":7,"x_max":642,"o":"m 642 189 l 618 0 l 7 0 l 7 178 l 124 314 l 39 314 l 39 460 l 247 460 l 329 556 l 35 556 l 35 742 l 632 742 l 632 565 l 543 460 l 606 460 l 606 314 l 419 314 l 314 189 l 642 189 z "},"ɀ":{"ha":635,"x_min":7,"x_max":704,"o":"m 553 -314 q 437 -294 485 -314 q 359 -244 389 -274 q 288 -165 329 -215 q 213 -82 244 -112 q 130 -28 181 -51 q 7 0 79 -4 l 7 192 l 315 542 l 35 542 l 35 742 l 632 742 l 632 551 l 263 143 q 375 75 333 115 q 461 -26 417 35 q 524 -98 499 -76 q 588 -119 549 -119 q 637 -115 618 -119 q 658 -108 656 -110 l 704 -272 q 553 -314 644 -314 z "},"ﬁ":{"ha":851,"x_min":-3,"x_max":793,"o":"m 447 1061 q 596 1044 526 1061 q 718 1003 665 1028 l 646 831 q 485 864 560 864 q 405 844 426 864 q 383 771 383 825 l 383 742 l 793 742 l 793 0 l 518 0 l 518 556 l 383 556 l 383 0 l 108 0 l 108 556 l -3 556 l -3 742 l 108 742 l 108 785 q 192 985 108 908 q 447 1061 275 1061 z "},"ﬂ":{"ha":917,"x_min":-3,"x_max":931,"o":"m 931 -3 q 856 -21 900 -14 q 769 -28 813 -28 q 603 33 663 -28 q 544 210 544 94 l 544 860 q 467 869 506 869 q 401 849 418 869 q 383 776 383 829 l 383 742 l 500 742 l 469 556 l 383 556 l 383 0 l 108 0 l 108 556 l -3 556 l -3 742 l 108 742 l 108 785 q 189 983 108 906 q 422 1061 269 1061 q 581 1038 492 1061 l 819 1061 l 819 243 q 851 188 819 188 q 882 193 865 188 l 931 -3 z "},"ª":{"ha":694,"x_min":50,"x_max":649,"o":"m 375 736 l 375 740 q 360 789 375 778 q 296 800 344 800 q 229 792 271 800 q 144 771 188 785 l 92 921 q 213 954 146 942 q 332 967 279 967 q 544 915 478 967 q 610 754 610 864 l 610 581 q 617 539 610 553 q 643 519 624 525 l 594 367 q 497 387 538 369 q 428 440 457 404 q 350 380 397 399 q 247 361 303 361 q 104 412 158 361 q 50 542 50 463 q 125 686 50 636 q 342 736 200 736 l 375 736 m 292 563 q 329 529 292 529 q 375 546 356 529 l 375 614 l 364 614 q 309 601 326 614 q 292 563 292 589 m 649 208 l 649 0 l 56 0 l 56 208 l 649 208 z "},"º":{"ha":694,"x_min":35,"x_max":661,"o":"m 347 967 q 577 888 493 967 q 661 663 661 810 q 577 442 661 524 q 349 361 493 361 q 119 440 203 361 q 35 665 35 518 q 119 885 35 804 q 347 967 204 967 m 347 797 q 297 766 313 797 q 281 665 281 735 q 296 561 281 592 q 349 531 311 531 q 399 562 383 531 q 415 663 415 593 q 400 767 415 736 q 347 797 385 797 m 35 208 l 660 208 l 660 0 l 35 0 l 35 208 z "},"ǂ":{"ha":472,"x_min":0,"x_max":472,"o":"m 353 543 l 353 482 l 472 482 l 472 336 l 353 336 l 353 0 l 119 0 l 119 336 l 0 336 l 0 482 l 119 482 l 119 543 l 0 543 l 0 689 l 119 689 l 119 1033 l 353 1057 l 353 689 l 472 689 l 472 543 l 353 543 z "},"ǀ":{"ha":353,"x_min":60,"x_max":293,"o":"m 293 0 l 60 0 l 60 1033 l 293 1057 l 293 0 z "},"ǁ":{"ha":661,"x_min":60,"x_max":601,"o":"m 293 0 l 60 0 l 60 1033 l 293 1057 l 293 0 m 601 0 l 368 0 l 368 1033 l 601 1057 l 601 0 z "},"ǃ":{"ha":406,"x_min":60,"x_max":346,"o":"m 319 347 l 86 347 l 86 1033 l 319 1057 l 319 347 m 203 258 q 304 216 263 258 q 346 115 346 174 q 304 15 346 57 q 203 -28 263 -28 q 101 15 143 -28 q 60 115 60 57 q 101 216 60 174 q 203 258 143 258 z "},"ʱ":{"ha":436,"x_min":42,"x_max":394,"o":"m 274 935 q 363 906 332 935 q 394 824 394 878 l 394 556 l 274 556 l 274 797 q 263 835 274 825 q 233 846 253 846 q 200 838 217 846 q 163 813 183 829 l 163 556 l 42 556 l 42 963 q 81 1049 42 1015 q 192 1082 121 1082 q 249 1076 218 1082 q 304 1060 281 1069 l 272 982 q 201 993 235 993 q 163 957 163 993 l 163 893 q 274 935 208 935 z "},"ʰ":{"ha":436,"x_min":42,"x_max":394,"o":"m 274 935 q 363 906 332 935 q 394 824 394 878 l 394 556 l 274 556 l 274 797 q 263 835 274 825 q 233 846 253 846 q 200 838 217 846 q 163 813 183 829 l 163 556 l 42 556 l 42 1072 l 163 1085 l 163 893 q 274 935 208 935 z "},"ʲ":{"ha":300,"x_min":42,"x_max":258,"o":"m 183 1126 q 238 1106 218 1126 q 258 1056 258 1086 q 238 1005 258 1025 q 183 985 218 985 q 128 1006 150 985 q 107 1056 107 1026 q 128 1106 107 1085 q 183 1126 150 1126 m 243 593 q 203 468 243 507 q 74 404 163 429 l 42 482 q 104 522 86 501 q 122 590 122 543 l 122 924 l 243 924 l 243 593 z "},"ˡ":{"ha":258,"x_min":42,"x_max":217,"o":"m 150 543 q 71 569 100 543 q 42 647 42 594 l 42 1072 l 163 1083 l 163 651 q 175 638 163 638 q 186 640 181 638 q 194 642 192 642 l 217 556 q 150 543 182 543 z "},"ⁿ":{"ha":436,"x_min":42,"x_max":394,"o":"m 274 935 q 363 906 332 935 q 394 824 394 878 l 394 556 l 274 556 l 274 797 q 263 835 274 825 q 233 846 253 846 q 200 838 217 846 q 163 813 183 829 l 163 556 l 42 556 l 42 924 l 135 924 l 150 881 q 274 935 200 935 z "},"ʴ":{"ha":350,"x_min":42,"x_max":308,"o":"m 308 925 l 308 556 l 218 556 l 194 633 q 153 569 181 592 q 88 546 126 546 q 42 553 58 546 l 60 661 q 97 656 75 656 q 153 682 133 656 q 188 761 174 708 l 188 925 l 308 925 z "},"ˢ":{"ha":431,"x_min":49,"x_max":403,"o":"m 239 935 q 385 888 319 935 l 339 821 q 288 843 311 836 q 239 850 265 850 q 182 826 182 850 q 199 808 182 815 q 269 788 215 800 q 372 743 342 771 q 403 664 403 715 q 354 578 403 613 q 224 543 306 543 q 49 597 122 543 l 103 661 q 160 635 133 643 q 224 628 188 628 q 288 658 288 628 q 272 683 288 674 q 197 704 256 692 q 100 747 131 719 q 69 822 69 774 q 115 903 69 871 q 239 935 161 935 z "},"ƻ":{"ha":736,"x_min":-7,"x_max":708,"o":"m 708 206 l 681 0 l 32 0 l 32 189 l 172 324 l 75 324 l 75 490 l 329 490 q 391 582 374 543 q 408 660 408 621 q 382 734 408 707 q 308 761 356 761 q 226 738 263 761 q 150 667 189 715 l -7 792 q 140 919 53 872 q 339 967 228 967 q 531 929 451 967 q 649 828 610 892 q 689 690 689 765 q 675 590 689 636 q 625 490 661 543 l 689 490 l 689 324 l 475 324 q 343 206 415 265 l 708 206 z "},"ʷ":{"ha":653,"x_min":43,"x_max":611,"o":"m 532 556 l 374 556 l 333 825 l 286 556 l 132 556 l 43 929 l 156 929 l 214 636 l 263 929 l 407 929 l 454 635 l 504 929 l 611 929 l 532 556 z "},"ˣ":{"ha":483,"x_min":42,"x_max":442,"o":"m 442 556 l 314 556 l 239 690 l 164 556 l 42 556 l 172 750 l 56 924 l 182 924 l 243 810 l 303 924 l 422 924 l 311 753 l 442 556 z "},"ʸ":{"ha":507,"x_min":42,"x_max":465,"o":"m 315 547 q 237 436 288 475 q 94 389 186 397 l 79 468 q 165 497 138 479 q 210 556 192 515 l 178 556 l 42 929 l 160 929 l 250 631 l 349 929 l 465 929 l 315 547 z "},"А":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Б":{"ha":842,"x_min":60,"x_max":828,"o":"m 435 633 q 726 556 625 633 q 828 326 828 478 q 722 85 828 169 q 446 0 617 0 l 60 0 l 60 967 l 710 967 l 682 754 l 346 754 l 346 633 l 435 633 m 408 201 q 500 234 469 201 q 531 324 531 267 q 403 442 531 442 l 346 442 l 346 201 l 408 201 z "},"В":{"ha":864,"x_min":60,"x_max":843,"o":"m 628 513 q 783 441 724 493 q 843 286 843 389 q 727 63 843 126 q 399 0 611 0 l 60 0 l 60 967 l 361 967 q 690 909 576 967 q 803 717 803 851 q 753 581 803 631 q 628 513 703 532 m 346 771 l 346 593 l 394 593 q 486 615 460 593 q 513 688 513 636 q 484 751 513 731 q 388 771 456 771 l 346 771 m 401 201 q 511 224 474 201 q 549 306 549 246 q 515 387 549 361 q 413 413 481 413 l 346 413 l 346 201 l 401 201 z "},"Г":{"ha":710,"x_min":60,"x_max":717,"o":"m 689 747 l 346 747 l 346 0 l 60 0 l 60 967 l 717 967 l 689 747 z "},"Ѓ":{"ha":710,"x_min":60,"x_max":717,"o":"m 689 747 l 346 747 l 346 0 l 60 0 l 60 967 l 717 967 l 689 747 m 608 1167 l 256 1040 l 186 1178 l 511 1367 l 608 1167 z "},"Ґ":{"ha":710,"x_min":60,"x_max":717,"o":"m 717 1186 l 717 967 l 689 747 l 346 747 l 346 0 l 60 0 l 60 967 l 456 967 l 456 1186 l 717 1186 z "},"Д":{"ha":892,"x_min":-21,"x_max":899,"o":"m 899 214 l 899 -243 l 708 -243 l 681 0 l 197 0 l 169 -243 l -21 -243 l -21 214 l 53 214 q 114 356 89 261 q 164 649 139 451 l 203 967 l 810 967 l 810 214 l 899 214 m 535 763 l 442 763 l 435 683 q 378 375 415 482 q 275 214 340 268 l 535 214 l 535 763 z "},"Е":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ѐ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 m 589 1178 l 519 1040 l 167 1167 l 265 1367 l 589 1178 z "},"Ё":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ж":{"ha":1328,"x_min":-21,"x_max":1349,"o":"m 1092 538 l 1349 0 l 1042 0 l 861 404 l 793 404 l 793 0 l 535 0 l 535 404 l 464 404 l 281 0 l -21 0 l 236 538 l 4 967 l 279 967 l 472 597 l 535 597 l 535 967 l 793 967 l 793 597 l 856 597 l 1051 967 l 1324 967 l 1092 538 z "},"З":{"ha":768,"x_min":-14,"x_max":747,"o":"m 338 -28 q 135 8 219 -28 q -14 111 50 43 l 135 256 q 224 194 182 214 q 315 175 265 175 q 414 204 378 175 q 450 290 450 233 q 413 378 450 347 q 301 410 375 410 l 194 410 l 226 606 l 307 606 q 397 631 367 606 q 428 703 428 657 q 403 769 428 744 q 324 794 378 794 q 146 722 238 794 l 18 861 q 367 994 158 994 q 552 962 472 994 q 676 870 632 929 q 719 736 719 811 q 663 593 719 653 q 489 510 607 533 q 681 436 615 496 q 747 272 747 376 q 696 113 747 181 q 552 8 644 44 q 338 -28 460 -28 z "},"И":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 565 0 l 565 296 q 607 696 565 504 l 399 0 l 60 0 l 60 967 l 339 967 l 339 660 q 328 465 339 543 q 297 278 318 386 l 513 967 l 844 967 l 844 0 z "},"Й":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 565 0 l 565 296 q 607 696 565 504 l 399 0 l 60 0 l 60 967 l 339 967 l 339 660 q 328 465 339 543 q 297 278 318 386 l 513 967 l 844 967 l 844 0 z "},"Ѝ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 565 0 l 565 296 q 607 696 565 504 l 399 0 l 60 0 l 60 967 l 339 967 l 339 660 q 328 465 339 543 q 297 278 318 386 l 513 967 l 844 967 l 844 0 m 664 1178 l 594 1040 l 242 1167 l 340 1367 l 664 1178 z "},"Ҋ":{"ha":983,"x_min":60,"x_max":1011,"o":"m 453 1036 q 269 1103 333 1036 q 196 1281 204 1169 l 339 1304 q 378 1242 350 1261 q 453 1222 406 1222 q 528 1242 500 1222 q 567 1304 556 1261 l 710 1281 q 637 1103 701 1169 q 453 1036 572 1036 m 1011 214 l 872 -243 l 682 -243 l 738 0 l 565 0 l 565 296 q 607 696 565 504 l 399 0 l 60 0 l 60 967 l 339 967 l 339 660 q 328 465 339 543 q 297 278 318 386 l 513 967 l 844 967 l 844 214 l 1011 214 z "},"К":{"ha":894,"x_min":60,"x_max":915,"o":"m 669 538 l 915 0 l 608 0 l 429 400 l 346 400 l 346 0 l 60 0 l 60 967 l 346 967 l 346 601 l 436 601 l 615 967 l 890 967 l 669 538 z "},"Ќ":{"ha":894,"x_min":60,"x_max":915,"o":"m 669 538 l 915 0 l 608 0 l 429 400 l 346 400 l 346 0 l 60 0 l 60 967 l 346 967 l 346 601 l 436 601 l 615 967 l 890 967 l 669 538 m 658 1167 l 306 1040 l 236 1178 l 561 1367 l 658 1167 z "},"Л":{"ha":907,"x_min":-7,"x_max":847,"o":"m 847 967 l 847 0 l 561 0 l 561 756 l 424 756 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 847 967 z "},"М":{"ha":1099,"x_min":21,"x_max":1078,"o":"m 1078 0 l 796 0 l 789 343 q 788 464 788 383 q 799 738 788 606 l 685 97 l 414 97 l 292 738 q 310 407 310 544 l 310 344 l 303 0 l 21 0 l 90 967 l 443 967 l 554 340 l 654 967 l 1008 967 l 1078 0 z "},"Н":{"ha":913,"x_min":60,"x_max":853,"o":"m 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 0 l 567 0 l 567 390 z "},"О":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"П":{"ha":913,"x_min":60,"x_max":853,"o":"m 853 0 l 567 0 l 567 753 l 346 753 l 346 0 l 60 0 l 60 967 l 853 967 l 853 0 z "},"Р":{"ha":849,"x_min":60,"x_max":828,"o":"m 408 967 q 717 884 607 967 q 828 642 828 801 q 723 389 828 476 q 440 301 618 301 l 346 301 l 346 0 l 60 0 l 60 967 l 408 967 m 413 503 q 536 642 536 503 q 404 768 536 768 l 346 768 l 346 503 l 413 503 z "},"С":{"ha":811,"x_min":28,"x_max":811,"o":"m 489 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 670 10 753 49 q 493 -28 588 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 z "},"Т":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 z "},"У":{"ha":832,"x_min":-28,"x_max":867,"o":"m 622 304 q 517 111 576 181 q 373 11 457 42 q 161 -28 289 -19 l 125 160 q 264 186 214 167 q 347 250 314 206 l 261 250 l -28 967 l 265 967 l 432 407 l 576 967 l 867 967 l 622 304 z "},"Ў":{"ha":832,"x_min":-28,"x_max":867,"o":"m 622 304 q 517 111 576 181 q 373 11 457 42 q 161 -28 289 -19 l 125 160 q 264 186 214 167 q 347 250 314 206 l 261 250 l -28 967 l 265 967 l 432 407 l 576 967 l 867 967 l 622 304 z "},"Ф":{"ha":1213,"x_min":14,"x_max":1199,"o":"m 1199 488 q 1077 173 1199 278 q 744 57 956 68 l 744 -61 l 467 -61 l 467 57 q 135 170 257 68 q 14 479 14 272 q 135 792 14 688 q 467 910 256 897 l 467 1022 l 744 1022 l 744 910 q 1076 797 954 899 q 1199 488 1199 694 m 731 224 q 869 297 828 233 q 910 488 910 361 q 867 672 910 610 q 731 744 825 735 l 731 224 m 303 479 q 345 296 303 358 q 481 222 388 233 l 481 743 q 344 669 385 733 q 303 479 303 604 z "},"Х":{"ha":842,"x_min":-14,"x_max":856,"o":"m 856 0 l 547 0 l 414 332 l 289 0 l -14 0 l 244 513 l 4 967 l 311 967 l 417 689 l 535 967 l 836 967 l 586 521 l 856 0 z "},"Ч":{"ha":865,"x_min":14,"x_max":806,"o":"m 806 967 l 806 0 l 519 0 l 519 339 q 322 271 439 271 q 94 365 175 271 q 14 626 14 460 l 14 967 l 294 967 l 294 626 q 320 510 294 546 q 407 474 346 474 q 471 483 444 474 q 519 511 497 492 l 519 967 l 806 967 z "},"Ц":{"ha":971,"x_min":60,"x_max":957,"o":"m 957 214 l 957 -243 l 767 -243 l 739 0 l 60 0 l 60 967 l 346 967 l 346 219 l 560 219 l 560 967 l 846 967 l 846 214 l 957 214 z "},"Ш":{"ha":1250,"x_min":60,"x_max":1190,"o":"m 1190 0 l 60 0 l 60 967 l 340 967 l 340 219 l 492 219 l 492 967 l 758 967 l 758 219 l 910 219 l 910 967 l 1190 967 l 1190 0 z "},"Щ":{"ha":1315,"x_min":60,"x_max":1301,"o":"m 1301 214 l 1301 -243 l 1111 -243 l 1083 0 l 60 0 l 60 967 l 340 967 l 340 219 l 492 219 l 492 967 l 758 967 l 758 219 l 910 219 l 910 967 l 1190 967 l 1190 214 l 1301 214 z "},"Џ":{"ha":906,"x_min":60,"x_max":846,"o":"m 846 0 l 563 0 l 563 -243 l 372 -243 l 344 0 l 60 0 l 60 967 l 346 967 l 346 219 l 560 219 l 560 967 l 846 967 l 846 0 z "},"Ь":{"ha":842,"x_min":60,"x_max":828,"o":"m 435 651 q 726 572 625 651 q 828 336 828 493 q 723 86 828 172 q 446 0 618 0 l 60 0 l 60 967 l 346 967 l 346 651 l 435 651 m 408 201 q 501 235 471 201 q 531 333 531 269 q 403 460 531 460 l 346 460 l 346 201 l 408 201 z "},"Ъ":{"ha":1024,"x_min":7,"x_max":1010,"o":"m 617 651 q 908 572 807 651 q 1010 336 1010 493 q 905 86 1010 172 q 628 0 800 0 l 242 0 l 242 758 l 7 758 l 7 967 l 528 967 l 528 651 l 617 651 m 590 201 q 683 235 653 201 q 713 333 713 269 q 585 460 713 460 l 528 460 l 528 201 l 590 201 z "},"Ы":{"ha":1207,"x_min":60,"x_max":1147,"o":"m 421 651 q 713 572 611 651 q 814 336 814 493 q 709 86 814 172 q 432 0 604 0 l 60 0 l 60 967 l 346 967 l 346 651 l 421 651 m 1147 967 l 1147 0 l 861 0 l 861 967 l 1147 967 m 394 201 q 487 235 457 201 q 517 333 517 269 q 389 460 517 460 l 346 460 l 346 201 l 394 201 z "},"Љ":{"ha":1322,"x_min":-7,"x_max":1308,"o":"m 915 651 q 1207 572 1106 651 q 1308 336 1308 493 q 1203 86 1308 172 q 926 0 1099 0 l 554 0 l 554 756 l 424 756 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 840 967 l 840 651 l 915 651 m 889 201 q 981 235 951 201 q 1011 333 1011 269 q 883 460 1011 460 l 840 460 l 840 201 l 889 201 z "},"Њ":{"ha":1328,"x_min":60,"x_max":1314,"o":"m 901 638 q 1206 559 1099 638 q 1314 328 1314 481 q 1208 83 1314 165 q 913 0 1101 0 l 560 0 l 560 439 l 346 439 l 346 0 l 60 0 l 60 967 l 346 967 l 346 638 l 560 638 l 560 967 l 846 967 l 846 638 l 901 638 m 894 203 q 1017 326 1017 203 q 986 412 1017 385 q 881 439 956 439 l 846 439 l 846 203 l 894 203 z "},"Ѕ":{"ha":817,"x_min":0,"x_max":796,"o":"m 415 994 q 772 863 636 994 l 646 714 q 439 792 549 792 q 361 774 388 792 q 335 722 335 756 q 349 681 335 697 q 398 651 364 665 q 508 613 432 638 q 728 490 661 564 q 796 289 796 417 q 747 124 796 196 q 606 13 697 53 q 389 -28 514 -28 q 164 13 261 -28 q 0 118 67 53 l 140 272 q 378 178 250 178 q 468 202 438 178 q 499 265 499 226 q 485 314 499 294 q 439 350 472 333 q 342 386 406 367 q 107 513 174 439 q 40 699 40 588 q 89 856 40 789 q 223 958 138 922 q 415 994 308 994 z "},"Є":{"ha":811,"x_min":28,"x_max":811,"o":"m 811 108 q 666 10 751 49 q 476 -28 581 -28 q 240 31 340 -28 q 83 206 139 90 q 28 486 28 322 q 85 759 28 644 q 247 934 143 874 q 483 994 350 994 q 800 879 667 994 l 667 724 q 584 776 625 758 q 496 793 543 793 q 375 740 424 793 q 317 589 326 686 l 626 589 l 626 397 l 317 397 q 374 237 324 294 q 499 179 425 179 q 598 201 553 179 q 692 263 643 222 l 811 108 z "},"Э":{"ha":756,"x_min":0,"x_max":728,"o":"m 325 994 q 623 867 518 994 q 728 500 728 740 q 616 108 728 243 q 307 -28 504 -28 q 133 1 207 -28 q 0 89 60 31 l 124 242 q 201 194 164 210 q 283 179 238 179 q 440 397 431 179 l 143 397 l 143 589 l 440 589 q 397 744 432 694 q 299 793 363 793 q 217 776 253 793 q 142 724 182 760 l 8 879 q 148 966 75 938 q 325 994 221 994 z "},"І":{"ha":406,"x_min":60,"x_max":346,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ї":{"ha":406,"x_min":-103,"x_max":501,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ј":{"ha":451,"x_min":-28,"x_max":394,"o":"m 394 154 q 346 -55 394 28 q 223 -183 297 -137 q 49 -262 149 -229 l -28 -61 q 61 -8 32 -39 q 99 63 90 24 q 108 164 108 103 l 108 967 l 394 967 l 394 154 z "},"Ћ":{"ha":1069,"x_min":7,"x_max":1042,"o":"m 726 668 q 960 574 879 668 q 1042 313 1042 479 l 1042 0 l 756 0 l 756 313 q 730 429 756 393 q 646 465 704 465 q 528 428 576 465 l 528 0 l 242 0 l 242 758 l 7 758 l 7 967 l 776 967 l 747 758 l 528 758 l 528 603 q 726 668 613 668 z "},"Ю":{"ha":1321,"x_min":60,"x_max":1293,"o":"m 856 994 q 1180 860 1067 994 q 1293 485 1293 726 q 1179 109 1293 246 q 856 -28 1065 -28 q 562 81 667 -28 q 436 390 457 190 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 442 610 q 576 896 474 797 q 856 994 678 994 m 856 175 q 964 246 932 175 q 996 485 996 317 q 963 722 996 651 q 856 792 931 792 q 748 722 781 792 q 715 485 715 651 q 748 247 715 318 q 856 175 781 175 z "},"Я":{"ha":846,"x_min":-21,"x_max":786,"o":"m 786 967 l 786 0 l 500 0 l 500 329 l 435 329 l 290 0 l -21 0 l 185 379 q 64 480 104 415 q 24 649 24 544 q 126 889 24 811 q 436 967 229 967 l 786 967 m 500 521 l 500 771 l 450 771 q 355 737 389 771 q 321 640 321 703 q 353 552 321 583 q 439 521 386 521 l 500 521 z "},"Ђ":{"ha":1069,"x_min":7,"x_max":1042,"o":"m 726 668 q 960 574 879 668 q 1042 313 1042 479 l 1042 154 q 993 -55 1042 28 q 870 -183 944 -137 q 696 -262 796 -229 l 619 -61 q 708 -8 679 -39 q 747 63 738 24 q 756 164 756 103 l 756 313 q 730 429 756 393 q 646 465 704 465 q 528 428 576 465 l 528 0 l 242 0 l 242 758 l 7 758 l 7 967 l 776 967 l 747 758 l 528 758 l 528 603 q 726 668 613 668 z "},"Ѡ":{"ha":1272,"x_min":56,"x_max":1217,"o":"m 1106 967 q 1188 722 1160 844 q 1217 422 1217 600 q 1135 83 1217 194 q 890 -28 1053 -28 q 638 151 690 -28 q 549 16 614 60 q 397 -28 483 -28 q 138 82 221 -28 q 56 422 56 192 q 84 721 56 599 q 165 967 113 843 l 428 967 l 418 929 q 361 688 381 793 q 342 439 342 583 q 362 235 342 296 q 431 175 382 175 q 499 278 499 175 l 499 554 l 781 554 l 781 278 q 795 197 781 219 q 847 175 810 175 q 912 235 893 175 q 931 439 931 294 q 917 640 931 549 q 883 799 903 731 q 831 967 864 867 l 1106 967 z "},"Ѣ":{"ha":961,"x_min":0,"x_max":947,"o":"m 554 633 q 844 556 742 633 q 947 326 947 478 q 842 85 947 169 q 565 0 736 0 l 179 0 l 179 717 l 0 717 l 0 876 l 179 876 l 179 967 l 465 967 l 465 876 l 669 876 l 669 717 l 465 717 l 465 633 l 554 633 m 528 201 q 619 234 589 201 q 650 324 650 267 q 522 442 650 442 l 465 442 l 465 201 l 528 201 z "},"Ѥ":{"ha":1214,"x_min":60,"x_max":1214,"o":"m 1214 108 q 1069 10 1154 49 q 879 -28 983 -28 q 577 80 694 -28 q 436 389 460 188 l 346 389 l 346 0 l 60 0 l 60 967 l 346 967 l 346 594 l 439 594 q 587 889 467 783 q 886 994 707 994 q 1203 879 1069 994 l 1069 724 q 987 776 1028 758 q 899 793 946 793 q 778 740 826 793 q 719 589 729 686 l 1029 589 l 1029 397 l 719 397 q 777 237 726 294 q 901 179 828 179 q 1001 201 956 179 q 1094 263 1046 222 l 1214 108 z "},"Ѧ":{"ha":943,"x_min":-35,"x_max":978,"o":"m 600 338 l 569 338 l 569 -1 l 374 -1 l 374 338 l 342 338 l 249 0 l -35 0 l 308 967 l 640 967 l 978 0 l 694 0 l 600 338 m 546 531 l 469 803 l 394 531 l 546 531 z "},"Ѩ":{"ha":1339,"x_min":60,"x_max":1374,"o":"m 996 338 l 965 338 l 965 -1 l 769 -1 l 769 338 l 738 338 l 644 0 l 361 0 l 479 332 l 346 332 l 346 -3 l 60 -3 l 60 964 l 346 964 l 346 531 l 550 531 l 704 967 l 1036 967 l 1374 0 l 1090 0 l 996 338 m 942 531 l 865 803 l 790 531 l 942 531 z "},"Ѫ":{"ha":1169,"x_min":-21,"x_max":1190,"o":"m 1190 0 l 900 0 l 760 344 l 717 344 l 717 0 l 458 0 l 458 344 l 415 344 l 269 0 l -21 0 l 217 538 l 325 538 l 135 800 l 135 967 l 1038 967 l 1038 800 l 840 538 l 956 538 l 1190 0 m 588 538 l 732 782 l 442 782 l 588 538 z "},"Ѭ":{"ha":1432,"x_min":60,"x_max":1453,"o":"m 1453 0 l 1165 0 l 1094 344 l 1046 344 l 1046 0 l 788 0 l 788 344 l 739 344 l 668 0 l 378 0 l 483 339 l 346 339 l 346 0 l 60 0 l 60 967 l 346 967 l 346 538 l 651 538 l 492 800 l 492 967 l 1339 967 l 1339 800 l 1172 538 l 1285 538 l 1453 0 m 778 782 l 917 538 l 1054 782 l 778 782 z "},"Ѯ":{"ha":750,"x_min":28,"x_max":729,"o":"m 451 551 q 657 472 585 544 q 729 269 729 399 q 652 55 729 124 q 438 -46 575 -14 q 335 -74 368 -62 q 292 -94 303 -85 q 282 -119 282 -104 q 295 -149 282 -137 q 335 -171 308 -161 l 279 -315 q 101 -228 167 -285 q 35 -86 35 -171 q 92 45 35 -1 q 269 121 149 92 q 372 156 338 138 q 421 200 407 174 q 435 271 435 226 q 401 368 435 339 q 289 397 367 397 l 142 397 l 142 546 l 361 767 l 28 767 l 28 967 l 671 967 l 671 774 l 451 551 m 633 1233 l 432 1038 l 268 1038 l 67 1233 l 160 1340 l 350 1221 l 540 1340 l 633 1233 z "},"Ѱ":{"ha":1039,"x_min":14,"x_max":1025,"o":"m 1025 967 l 1025 599 q 933 365 1025 458 q 663 246 842 272 l 663 0 l 376 0 l 376 244 q 105 361 196 271 q 14 599 14 451 l 14 967 l 286 967 l 286 586 q 310 488 286 525 q 390 433 333 450 l 390 967 l 649 967 l 649 435 q 728 489 704 451 q 753 586 753 526 l 753 967 l 1025 967 z "},"Ѳ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 368 738 407 792 q 321 561 329 683 l 638 561 q 590 738 629 683 q 479 792 551 792 m 479 175 q 592 231 554 175 q 639 414 631 288 l 319 414 q 367 231 328 288 q 479 175 406 175 z "},"Ѵ":{"ha":917,"x_min":-35,"x_max":958,"o":"m -35 967 l 265 967 l 414 199 l 490 718 q 585 928 511 863 q 771 994 658 994 q 875 981 832 994 q 958 943 918 968 l 886 781 q 856 793 868 789 q 829 797 844 797 q 788 782 803 797 q 763 729 772 767 l 594 0 l 225 0 l -35 967 z "},"Ѷ":{"ha":917,"x_min":-35,"x_max":958,"o":"m -35 967 l 265 967 l 414 199 l 490 718 q 585 928 511 863 q 771 994 658 994 q 875 981 832 994 q 958 943 918 968 l 886 781 q 856 793 868 789 q 829 797 844 797 q 788 782 803 797 q 763 729 772 767 l 594 0 l 225 0 l -35 967 z "},"Ѹ":{"ha":1700,"x_min":28,"x_max":1721,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 m 1493 1 q 1332 -232 1446 -153 q 1032 -317 1218 -311 l 1003 -129 q 1162 -90 1110 -118 q 1243 0 1214 -62 l 1149 0 l 938 742 l 1229 742 l 1322 168 l 1438 742 l 1721 742 l 1493 1 z "},"Ғ":{"ha":724,"x_min":-18,"x_max":731,"o":"m 360 747 l 360 601 l 544 601 l 544 440 l 360 440 l 360 0 l 74 0 l 74 440 l -18 440 l -18 601 l 74 601 l 74 967 l 731 967 l 703 747 l 360 747 z "},"Ҕ":{"ha":888,"x_min":60,"x_max":860,"o":"m 544 640 q 778 546 697 640 q 860 285 860 451 l 860 -22 q 774 -240 860 -165 q 539 -315 688 -315 q 321 -253 407 -315 l 410 -86 q 459 -108 440 -101 q 504 -114 478 -114 q 556 -95 538 -114 q 574 -40 574 -76 l 574 285 q 548 401 574 365 q 464 438 522 438 q 346 400 394 438 l 346 0 l 60 0 l 60 967 l 710 967 l 682 754 l 346 754 l 346 575 q 544 640 431 640 z "},"Җ":{"ha":1328,"x_min":-21,"x_max":1349,"o":"m 1349 214 l 1349 -243 l 1158 -243 l 1131 0 l 1042 0 l 861 404 l 793 404 l 793 0 l 535 0 l 535 404 l 464 404 l 281 0 l -21 0 l 236 538 l 4 967 l 279 967 l 472 597 l 535 597 l 535 967 l 793 967 l 793 597 l 856 597 l 1051 967 l 1324 967 l 1092 538 l 1246 214 l 1349 214 z "},"Ҙ":{"ha":768,"x_min":-14,"x_max":747,"o":"m 747 272 q 669 82 747 158 q 457 -18 592 6 q 582 -187 582 -82 q 519 -322 582 -274 q 360 -371 457 -371 q 199 -335 268 -371 l 249 -206 q 329 -225 290 -225 q 386 -207 367 -225 q 406 -158 406 -189 q 387 -93 406 -125 q 321 -28 368 -61 q 128 10 208 -25 q -14 111 47 44 l 135 256 q 224 194 182 214 q 315 175 265 175 q 414 204 378 175 q 450 290 450 233 q 413 378 450 347 q 301 410 375 410 l 194 410 l 226 606 l 307 606 q 397 631 367 606 q 428 703 428 657 q 403 769 428 744 q 324 794 378 794 q 146 722 238 794 l 18 861 q 367 994 158 994 q 552 962 472 994 q 676 870 632 929 q 719 736 719 811 q 663 593 719 653 q 489 510 607 533 q 681 436 615 496 q 747 272 747 376 z "},"Қ":{"ha":894,"x_min":60,"x_max":915,"o":"m 915 214 l 915 -243 l 725 -243 l 697 0 l 608 0 l 429 400 l 346 400 l 346 0 l 60 0 l 60 967 l 346 967 l 346 601 l 436 601 l 615 967 l 890 967 l 669 538 l 818 214 l 915 214 z "},"Ҝ":{"ha":913,"x_min":60,"x_max":926,"o":"m 926 0 l 628 0 l 485 411 l 467 411 l 467 201 l 375 201 l 375 411 l 332 411 l 332 0 l 60 0 l 60 967 l 332 967 l 332 590 l 375 590 l 375 799 l 467 799 l 467 590 l 485 590 l 626 967 l 901 967 l 710 538 l 926 0 z "},"Ҟ":{"ha":917,"x_min":14,"x_max":938,"o":"m 938 0 l 631 0 l 451 400 l 368 400 l 368 0 l 82 0 l 82 714 l 14 714 l 14 875 l 82 875 l 82 967 l 368 967 l 368 875 l 465 875 l 465 714 l 368 714 l 368 601 l 458 601 l 638 967 l 913 967 l 692 538 l 938 0 z "},"Ҡ":{"ha":1076,"x_min":7,"x_max":1097,"o":"m 1097 0 l 790 0 l 611 400 l 528 400 l 528 0 l 242 0 l 242 758 l 7 758 l 7 967 l 528 967 l 528 601 l 618 601 l 797 967 l 1072 967 l 851 538 l 1097 0 z "},"Ң":{"ha":978,"x_min":60,"x_max":964,"o":"m 964 214 l 964 -243 l 774 -243 l 746 0 l 567 0 l 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 214 l 964 214 z "},"Ҥ":{"ha":1094,"x_min":60,"x_max":1101,"o":"m 1072 753 l 853 753 l 853 0 l 567 0 l 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 1101 967 l 1072 753 z "},"Ҧ":{"ha":1394,"x_min":60,"x_max":1367,"o":"m 1051 668 q 1285 574 1204 668 q 1367 313 1367 479 l 1367 -22 q 1281 -240 1367 -165 q 1046 -315 1194 -315 q 828 -253 914 -315 l 917 -86 q 966 -108 947 -101 q 1011 -114 985 -114 q 1063 -95 1044 -114 q 1081 -40 1081 -76 l 1081 313 q 1055 429 1081 393 q 971 465 1029 465 q 853 428 901 465 l 853 0 l 567 0 l 567 753 l 346 753 l 346 0 l 60 0 l 60 967 l 853 967 l 853 603 q 1051 668 938 668 z "},"Ԥ":{"ha":978,"x_min":60,"x_max":964,"o":"m 964 214 l 964 -243 l 774 -243 l 746 0 l 567 0 l 567 753 l 346 753 l 346 0 l 60 0 l 60 967 l 853 967 l 853 214 l 964 214 z "},"Ҩ":{"ha":996,"x_min":28,"x_max":972,"o":"m 972 381 q 921 198 972 289 q 774 47 869 107 q 900 -124 829 -36 l 772 -207 q 625 -14 667 -71 q 492 -28 556 -28 q 246 31 350 -28 q 85 206 142 90 q 28 486 28 321 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 369 266 325 340 q 499 188 414 192 q 447 383 447 293 q 518 561 447 494 q 704 628 589 628 q 836 601 775 628 q 935 519 897 575 q 972 381 972 464 m 704 464 q 643 379 643 464 q 674 228 643 306 q 740 297 718 256 q 761 390 761 339 q 747 444 761 425 q 704 464 732 464 z "},"Ҫ":{"ha":811,"x_min":28,"x_max":811,"o":"m 561 -22 q 678 -187 678 -86 q 615 -322 678 -274 q 456 -371 553 -371 q 294 -335 364 -371 l 344 -206 q 425 -225 386 -225 q 482 -207 463 -225 q 501 -158 501 -189 q 481 -90 501 -124 q 407 -22 460 -57 q 128 134 229 3 q 28 486 28 265 q 86 759 28 644 q 249 934 144 874 q 489 994 353 994 q 800 881 668 994 l 668 725 q 587 772 626 756 q 503 789 547 789 q 372 713 418 789 q 325 486 325 636 q 372 262 325 336 q 507 188 419 188 q 595 207 554 188 q 686 265 636 226 l 811 107 q 699 25 764 60 q 561 -22 635 -10 z "},"Ҭ":{"ha":769,"x_min":7,"x_max":776,"o":"m 528 753 l 528 214 l 639 214 l 639 -243 l 449 -243 l 421 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 l 528 753 z "},"Ҳ":{"ha":842,"x_min":-14,"x_max":856,"o":"m 856 214 l 856 -243 l 665 -243 l 638 0 l 547 0 l 414 332 l 289 0 l -14 0 l 244 513 l 4 967 l 311 967 l 417 689 l 535 967 l 836 967 l 586 521 l 744 214 l 856 214 z "},"Ҵ":{"ha":1153,"x_min":7,"x_max":1139,"o":"m 1139 214 l 1139 -243 l 949 -243 l 921 0 l 242 0 l 242 758 l 7 758 l 7 967 l 681 967 l 651 758 l 528 758 l 528 219 l 742 219 l 742 967 l 1028 967 l 1028 214 l 1139 214 z "},"Ҷ":{"ha":931,"x_min":14,"x_max":917,"o":"m 917 214 l 917 -243 l 726 -243 l 699 0 l 519 0 l 519 339 q 322 271 439 271 q 94 365 175 271 q 14 626 14 460 l 14 967 l 294 967 l 294 626 q 320 510 294 546 q 407 474 346 474 q 471 483 444 474 q 519 511 497 492 l 519 967 l 806 967 l 806 214 l 917 214 z "},"Ҹ":{"ha":865,"x_min":14,"x_max":806,"o":"m 806 967 l 806 0 l 519 0 l 519 339 q 464 301 492 315 l 464 174 l 372 174 l 372 274 q 322 271 342 271 q 94 365 175 271 q 14 626 14 460 l 14 967 l 294 967 l 294 626 q 313 522 294 558 q 372 476 331 486 l 372 771 l 464 771 l 464 481 q 519 511 497 492 l 519 967 l 806 967 z "},"Һ":{"ha":888,"x_min":60,"x_max":860,"o":"m 544 668 q 778 574 697 668 q 860 313 860 479 l 860 0 l 574 0 l 574 313 q 548 429 574 393 q 464 465 522 465 q 346 428 394 465 l 346 0 l 60 0 l 60 967 l 346 967 l 346 603 q 544 668 431 668 z "},"Ԧ":{"ha":985,"x_min":60,"x_max":971,"o":"m 971 214 l 971 -243 l 781 -243 l 753 0 l 574 0 l 574 313 q 548 429 574 393 q 464 465 522 465 q 346 428 394 465 l 346 0 l 60 0 l 60 967 l 346 967 l 346 603 q 544 668 431 668 q 778 574 697 668 q 860 313 860 479 l 860 214 l 971 214 z "},"Ԩ":{"ha":913,"x_min":-193,"x_max":853,"o":"m 853 967 l 853 0 l 567 0 l 567 390 l 346 390 l 346 -22 q 260 -240 346 -165 q 25 -315 174 -315 q -193 -253 -107 -315 l -104 -86 q -55 -108 -74 -101 q -10 -114 -36 -114 q 42 -95 24 -114 q 60 -40 60 -76 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 z "},"Ԫ":{"ha":1540,"x_min":-21,"x_max":1561,"o":"m 1561 0 l 1254 0 l 1107 400 l 1076 400 l 1076 0 l 808 0 l 808 -243 l 618 -243 l 590 0 l 197 0 l 169 -243 l -21 -243 l -21 214 l 33 214 q 95 358 69 263 q 144 649 121 453 l 183 967 l 693 967 l 693 601 l 800 601 l 800 967 l 1076 967 l 1076 601 l 1114 601 l 1261 967 l 1536 967 l 1329 538 l 1561 0 m 449 763 l 401 763 l 394 683 q 340 376 378 483 q 235 214 301 269 l 449 214 l 449 763 m 693 400 l 693 214 l 800 214 l 800 400 l 693 400 z "},"Ԭ":{"ha":994,"x_min":14,"x_max":1001,"o":"m 1001 214 l 1001 -243 l 811 -243 l 783 0 l 232 0 l 204 -243 l 14 -243 l 14 214 l 114 214 q 142 241 117 217 q 200 315 168 265 q 257 422 232 364 q 74 540 126 453 q 22 785 22 626 l 22 967 l 264 967 l 264 774 q 274 665 264 704 q 314 604 285 625 q 344 844 336 717 l 351 967 l 913 967 l 913 214 l 1001 214 m 582 683 q 563 579 576 632 l 660 579 l 660 763 l 590 763 l 582 683 m 660 214 l 660 401 l 493 403 q 419 283 458 335 q 356 214 379 231 l 660 214 z "},"Ԯ":{"ha":972,"x_min":-7,"x_max":958,"o":"m 958 214 l 958 -243 l 768 -243 l 740 0 l 561 0 l 561 756 l 424 756 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 847 967 l 847 214 l 958 214 z "},"Ҽ":{"ha":1126,"x_min":-14,"x_max":1113,"o":"m 1113 494 q 1103 389 1113 440 l 561 389 q 732 175 569 175 q 838 193 794 175 q 931 246 882 211 l 1058 99 q 898 3 983 35 q 703 -28 813 -28 q 408 78 518 -28 q 278 385 299 183 l 272 385 q 65 446 143 385 q -14 615 -14 507 q 3 703 -14 661 q 50 792 21 746 l 221 719 q 205 673 210 692 q 200 635 200 654 q 257 583 200 583 l 279 583 q 411 889 301 783 q 699 994 521 994 q 1012 861 911 994 q 1113 494 1113 728 m 839 576 q 701 792 839 792 q 598 742 633 792 q 561 576 563 693 l 839 576 z "},"Ҿ":{"ha":1126,"x_min":-14,"x_max":1113,"o":"m 1113 494 q 1103 389 1113 440 l 561 389 q 732 175 569 175 q 838 193 794 175 q 931 246 882 211 l 1058 99 q 854 -10 965 18 q 751 -71 781 -39 q 722 -132 722 -103 q 793 -193 722 -193 q 878 -182 829 -193 l 861 -342 q 758 -353 813 -353 q 599 -306 661 -353 q 536 -178 536 -258 q 611 -21 536 -85 q 381 106 467 3 q 278 385 296 210 l 272 385 q 65 446 143 385 q -14 615 -14 507 q 3 703 -14 661 q 50 792 21 746 l 221 719 q 205 673 210 692 q 200 635 200 654 q 257 583 200 583 l 279 583 q 411 889 301 783 q 699 994 521 994 q 1012 861 911 994 q 1113 494 1113 728 m 839 576 q 701 792 839 792 q 598 742 633 792 q 561 576 563 693 l 839 576 z "},"Ӏ":{"ha":406,"x_min":60,"x_max":346,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ӂ":{"ha":1328,"x_min":-21,"x_max":1349,"o":"m 1092 538 l 1349 0 l 1042 0 l 861 404 l 793 404 l 793 0 l 535 0 l 535 404 l 464 404 l 281 0 l -21 0 l 236 538 l 4 967 l 279 967 l 472 597 l 535 597 l 535 967 l 793 967 l 793 597 l 856 597 l 1051 967 l 1324 967 l 1092 538 z "},"Ӄ":{"ha":904,"x_min":60,"x_max":876,"o":"m 671 579 q 813 476 765 553 q 860 268 860 400 l 860 -22 q 774 -240 860 -165 q 539 -315 688 -315 q 321 -253 407 -315 l 410 -86 q 459 -108 440 -101 q 504 -114 478 -114 q 556 -95 538 -114 q 574 -40 574 -76 l 574 268 q 548 363 574 332 q 464 393 522 393 l 346 393 l 346 0 l 60 0 l 60 967 l 346 967 l 346 594 l 422 594 l 601 967 l 876 967 l 671 579 z "},"Ӆ":{"ha":986,"x_min":-7,"x_max":1014,"o":"m 1014 214 l 875 -243 l 685 -243 l 740 0 l 561 0 l 561 756 l 424 756 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 847 967 l 847 214 l 1014 214 z "},"Ӈ":{"ha":913,"x_min":60,"x_max":853,"o":"m 853 967 l 853 -22 q 767 -240 853 -165 q 532 -315 681 -315 q 314 -253 400 -315 l 403 -86 q 452 -108 433 -101 q 497 -114 471 -114 q 549 -95 531 -114 q 567 -40 567 -76 l 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 z "},"Ӊ":{"ha":992,"x_min":60,"x_max":1019,"o":"m 1019 214 l 881 -243 l 690 -243 l 746 0 l 567 0 l 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 214 l 1019 214 z "},"Ӌ":{"ha":865,"x_min":14,"x_max":806,"o":"m 806 967 l 806 0 l 642 0 l 614 -243 l 424 -243 l 424 200 l 519 200 l 519 353 q 322 285 439 285 q 94 379 175 285 q 14 640 14 474 l 14 967 l 294 967 l 294 640 q 320 524 294 560 q 407 488 346 488 q 471 497 444 488 q 519 525 497 506 l 519 967 l 806 967 z "},"Ӎ":{"ha":1217,"x_min":21,"x_max":1244,"o":"m 1244 214 l 1106 -243 l 915 -243 l 971 0 l 796 0 l 789 343 q 788 464 788 383 q 799 738 788 606 l 685 97 l 414 97 l 292 738 q 310 407 310 544 l 310 344 l 303 0 l 21 0 l 90 967 l 443 967 l 554 340 l 654 967 l 1008 967 l 1063 214 l 1244 214 z "},"Ӑ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ӓ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Ӕ":{"ha":1199,"x_min":-42,"x_max":1171,"o":"m 1171 200 l 1171 0 l 606 0 l 581 188 l 326 188 l 269 0 l -42 0 l 335 967 l 1122 967 l 1093 768 l 750 768 l 782 585 l 1110 585 l 1110 392 l 814 392 l 847 200 l 1171 200 m 553 388 l 503 763 l 388 388 l 553 388 z "},"Ӗ":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ә":{"ha":881,"x_min":14,"x_max":853,"o":"m 424 994 q 742 865 631 994 q 853 486 853 735 q 742 105 853 238 q 429 -28 631 -28 q 115 106 217 -28 q 14 472 14 239 q 24 578 14 526 l 565 578 q 394 792 557 792 q 286 773 332 792 q 192 719 240 754 l 68 868 q 228 963 143 932 q 424 994 314 994 m 429 175 q 530 224 496 175 q 565 390 564 274 l 288 390 q 324 225 288 275 q 429 175 361 175 z "},"Ӛ":{"ha":881,"x_min":14,"x_max":853,"o":"m 424 994 q 742 865 631 994 q 853 486 853 735 q 742 105 853 238 q 429 -28 631 -28 q 115 106 217 -28 q 14 472 14 239 q 24 578 14 526 l 565 578 q 394 792 557 792 q 286 773 332 792 q 192 719 240 754 l 68 868 q 228 963 143 932 q 424 994 314 994 m 429 175 q 530 224 496 175 q 565 390 564 274 l 288 390 q 324 225 288 275 q 429 175 361 175 z "},"Ӝ":{"ha":1328,"x_min":-21,"x_max":1349,"o":"m 1092 538 l 1349 0 l 1042 0 l 861 404 l 793 404 l 793 0 l 535 0 l 535 404 l 464 404 l 281 0 l -21 0 l 236 538 l 4 967 l 279 967 l 472 597 l 535 597 l 535 967 l 793 967 l 793 597 l 856 597 l 1051 967 l 1324 967 l 1092 538 z "},"Ӟ":{"ha":768,"x_min":-14,"x_max":747,"o":"m 338 -28 q 135 8 219 -28 q -14 111 50 43 l 135 256 q 224 194 182 214 q 315 175 265 175 q 414 204 378 175 q 450 290 450 233 q 413 378 450 347 q 301 410 375 410 l 194 410 l 226 606 l 307 606 q 397 631 367 606 q 428 703 428 657 q 403 769 428 744 q 324 794 378 794 q 146 722 238 794 l 18 861 q 367 994 158 994 q 552 962 472 994 q 676 870 632 929 q 719 736 719 811 q 663 593 719 653 q 489 510 607 533 q 681 436 615 496 q 747 272 747 376 q 696 113 747 181 q 552 8 644 44 q 338 -28 460 -28 z "},"Ӡ":{"ha":785,"x_min":0,"x_max":764,"o":"m 489 564 q 692 483 619 554 q 764 292 764 411 q 715 130 764 203 q 574 15 667 57 q 353 -28 482 -28 q 148 12 233 -28 q 0 125 63 51 l 142 263 q 236 197 193 217 q 336 178 279 178 q 433 210 396 178 q 469 304 469 243 q 430 385 469 360 q 324 411 390 411 l 176 411 l 176 560 l 396 767 l 63 767 l 63 967 l 706 967 l 706 774 l 489 564 z "},"Ӣ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 565 0 l 565 296 q 607 696 565 504 l 399 0 l 60 0 l 60 967 l 339 967 l 339 660 q 328 465 339 543 q 297 278 318 386 l 513 967 l 844 967 l 844 0 z "},"Ӥ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 565 0 l 565 296 q 607 696 565 504 l 399 0 l 60 0 l 60 967 l 339 967 l 339 660 q 328 465 339 543 q 297 278 318 386 l 513 967 l 844 967 l 844 0 z "},"Ӧ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Ө":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 368 738 407 792 q 321 561 329 683 l 638 561 q 590 738 629 683 q 479 792 551 792 m 479 175 q 592 231 554 175 q 639 414 631 288 l 319 414 q 367 231 328 288 q 479 175 406 175 z "},"Ӫ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 368 738 407 792 q 321 561 329 683 l 638 561 q 590 738 629 683 q 479 792 551 792 m 479 175 q 592 231 554 175 q 639 414 631 288 l 319 414 q 367 231 328 288 q 479 175 406 175 z "},"Ӭ":{"ha":756,"x_min":0,"x_max":728,"o":"m 325 994 q 623 867 518 994 q 728 500 728 740 q 616 108 728 243 q 307 -28 504 -28 q 133 1 207 -28 q 0 89 60 31 l 124 242 q 201 194 164 210 q 283 179 238 179 q 440 397 431 179 l 143 397 l 143 589 l 440 589 q 397 744 432 694 q 299 793 363 793 q 217 776 253 793 q 142 724 182 760 l 8 879 q 148 966 75 938 q 325 994 221 994 z "},"Ӯ":{"ha":832,"x_min":-28,"x_max":867,"o":"m 622 304 q 517 111 576 181 q 373 11 457 42 q 161 -28 289 -19 l 125 160 q 264 186 214 167 q 347 250 314 206 l 261 250 l -28 967 l 265 967 l 432 407 l 576 967 l 867 967 l 622 304 z "},"Ӱ":{"ha":832,"x_min":-28,"x_max":867,"o":"m 622 304 q 517 111 576 181 q 373 11 457 42 q 161 -28 289 -19 l 125 160 q 264 186 214 167 q 347 250 314 206 l 261 250 l -28 967 l 265 967 l 432 407 l 576 967 l 867 967 l 622 304 z "},"Ӳ":{"ha":832,"x_min":-28,"x_max":867,"o":"m 622 304 q 517 111 576 181 q 373 11 457 42 q 161 -28 289 -19 l 125 160 q 264 186 214 167 q 347 250 314 206 l 261 250 l -28 967 l 265 967 l 432 407 l 576 967 l 867 967 l 622 304 m 511 1267 l 333 1035 l 215 1096 l 342 1356 l 511 1267 m 760 1244 l 569 1022 l 456 1090 l 596 1343 l 760 1244 z "},"Ӵ":{"ha":865,"x_min":14,"x_max":806,"o":"m 806 967 l 806 0 l 519 0 l 519 339 q 322 271 439 271 q 94 365 175 271 q 14 626 14 460 l 14 967 l 294 967 l 294 626 q 320 510 294 546 q 407 474 346 474 q 471 483 444 474 q 519 511 497 492 l 519 967 l 806 967 z "},"Ӷ":{"ha":710,"x_min":60,"x_max":717,"o":"m 346 747 l 346 214 l 457 214 l 457 -243 l 267 -243 l 239 0 l 60 0 l 60 967 l 717 967 l 689 747 l 346 747 z "},"Ӹ":{"ha":1207,"x_min":60,"x_max":1147,"o":"m 421 651 q 713 572 611 651 q 814 336 814 493 q 709 86 814 172 q 432 0 604 0 l 60 0 l 60 967 l 346 967 l 346 651 l 421 651 m 1147 967 l 1147 0 l 861 0 l 861 967 l 1147 967 m 394 201 q 487 235 457 201 q 517 333 517 269 q 389 460 517 460 l 346 460 l 346 201 l 394 201 z "},"Ӻ":{"ha":724,"x_min":-61,"x_max":731,"o":"m 360 747 l 360 601 l 544 601 l 544 440 l 360 440 l 360 214 l 478 214 l 478 -22 q 392 -240 478 -165 q 157 -315 306 -315 q -61 -253 25 -315 l 28 -86 q 77 -108 58 -101 q 122 -114 96 -114 q 174 -95 156 -114 q 192 -40 192 -76 l 192 0 l 74 0 l 74 440 l -18 440 l -18 601 l 74 601 l 74 967 l 731 967 l 703 747 l 360 747 z "},"Ӽ":{"ha":883,"x_min":-14,"x_max":883,"o":"m 883 214 l 883 -22 q 797 -240 883 -165 q 563 -315 711 -315 q 344 -253 431 -315 l 433 -86 q 483 -108 464 -101 q 528 -114 501 -114 q 579 -95 561 -114 q 597 -40 597 -76 l 597 0 l 547 0 l 414 332 l 289 0 l -14 0 l 244 513 l 4 967 l 311 967 l 417 689 l 535 967 l 836 967 l 586 521 l 744 214 l 883 214 z "},"Ӿ":{"ha":842,"x_min":-14,"x_max":856,"o":"m 856 0 l 547 0 l 414 346 l 289 0 l -14 0 l 200 425 l 67 425 l 67 592 l 203 592 l 4 967 l 311 967 l 417 647 l 535 967 l 836 967 l 626 592 l 775 592 l 775 425 l 636 425 l 856 0 z "},"Ԁ":{"ha":842,"x_min":14,"x_max":782,"o":"m 782 967 l 782 0 l 392 0 q 117 81 219 0 q 14 319 14 161 q 117 551 14 469 q 407 633 219 633 l 496 633 l 496 967 l 782 967 m 496 201 l 496 442 l 439 442 q 311 319 311 442 q 342 233 311 264 q 433 201 372 201 l 496 201 z "},"Ԃ":{"ha":1228,"x_min":14,"x_max":1200,"o":"m 1190 526 q 1200 339 1200 425 q 1147 131 1200 214 q 1009 10 1093 49 q 831 -28 925 -28 q 677 -1 742 -28 q 569 83 613 26 q 469 0 528 28 q 329 -28 411 -28 q 176 8 247 -28 q 59 115 104 43 q 14 292 14 188 q 116 545 14 457 q 407 633 218 633 l 496 633 l 496 967 l 782 967 l 782 264 q 797 190 782 211 q 839 169 811 169 q 901 215 878 169 q 925 360 925 261 q 917 526 925 442 l 1190 526 m 400 174 q 457 196 433 174 q 496 267 481 218 l 496 442 l 439 442 q 311 306 311 442 q 334 208 311 242 q 400 174 357 174 z "},"Ԅ":{"ha":1031,"x_min":14,"x_max":1003,"o":"m 992 528 q 1003 339 1003 436 q 954 135 1003 218 q 822 13 906 53 q 635 -28 739 -28 q 413 24 494 -28 q 275 181 332 75 l 188 344 l 69 344 l 69 536 l 208 536 q 296 567 267 536 q 325 660 325 597 q 194 771 325 771 l 14 771 l 14 967 l 201 967 q 514 892 411 967 q 617 660 617 818 q 576 510 617 569 q 447 397 536 450 l 546 232 q 585 183 567 197 q 631 169 604 169 q 728 360 728 169 q 718 528 728 450 l 992 528 z "},"Ԇ":{"ha":661,"x_min":14,"x_max":682,"o":"m 682 214 l 682 -243 l 492 -243 l 464 0 l 365 0 l 186 344 l 69 344 l 69 536 l 208 536 q 296 567 267 536 q 325 660 325 597 q 194 771 325 771 l 14 771 l 14 967 l 201 967 q 514 892 411 967 q 617 660 617 818 q 576 510 617 569 q 446 397 536 450 l 556 214 l 682 214 z "},"Ԉ":{"ha":1293,"x_min":-7,"x_max":1265,"o":"m 1256 526 q 1265 339 1265 425 q 1211 131 1265 214 q 1070 10 1157 49 q 882 -28 983 -28 q 650 44 739 -28 q 561 265 561 115 l 561 756 l 424 756 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 847 967 l 847 264 q 862 190 847 211 q 904 169 876 169 q 967 215 943 169 q 990 360 990 261 q 982 526 990 442 l 1256 526 z "},"Ԋ":{"ha":1299,"x_min":60,"x_max":1271,"o":"m 1261 526 q 1271 339 1271 425 q 1217 131 1271 214 q 1076 10 1163 49 q 888 -28 989 -28 q 656 44 744 -28 q 567 265 567 115 l 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 264 q 867 190 853 211 q 910 169 882 169 q 972 215 949 169 q 996 360 996 261 q 988 526 996 442 l 1261 526 z "},"Ԍ":{"ha":907,"x_min":28,"x_max":858,"o":"m 515 994 q 706 960 619 994 q 858 868 793 925 l 719 724 q 626 778 668 761 q 532 794 585 794 q 376 717 431 794 q 322 483 322 640 q 339 298 322 365 q 391 203 356 231 q 485 175 426 175 q 583 199 536 175 l 583 375 l 486 375 l 460 568 l 858 568 l 858 83 q 683 1 782 31 q 493 -28 585 -28 q 142 102 256 -28 q 28 485 28 232 q 90 760 28 644 q 264 935 153 875 q 515 994 375 994 z "},"Ԏ":{"ha":974,"x_min":7,"x_max":946,"o":"m 936 526 q 946 339 946 425 q 892 131 946 214 q 751 10 838 49 q 563 -28 664 -28 q 331 44 419 -28 q 242 265 242 115 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 l 528 753 l 528 264 q 542 190 528 211 q 585 169 557 169 q 647 215 624 169 q 671 360 671 261 q 663 526 671 442 l 936 526 z "},"Ԑ":{"ha":768,"x_min":21,"x_max":782,"o":"m 415 994 q 599 961 518 994 q 750 861 679 928 l 618 722 q 451 794 538 794 q 340 703 340 794 q 371 631 340 656 q 461 606 401 606 l 574 606 l 542 410 l 467 410 q 356 378 393 410 q 318 290 318 347 q 354 204 318 233 q 453 175 390 175 q 544 194 503 175 q 633 256 586 214 l 782 111 q 422 -28 650 -28 q 213 8 304 -28 q 72 112 122 44 q 21 268 21 179 q 87 435 21 375 q 279 510 153 496 q 105 593 161 533 q 49 736 49 653 q 96 870 49 811 q 226 962 143 929 q 415 994 310 994 z "},"Ԓ":{"ha":907,"x_min":-7,"x_max":847,"o":"m 847 967 l 847 -22 q 761 -240 847 -165 q 526 -315 675 -315 q 308 -253 394 -315 l 397 -86 q 447 -108 428 -101 q 492 -114 465 -114 q 543 -95 525 -114 q 561 -40 561 -76 l 561 756 l 424 756 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 847 967 z "},"Ԕ":{"ha":1224,"x_min":-7,"x_max":1238,"o":"m 1238 0 l 929 0 l 796 332 l 671 0 l 368 0 l 626 513 l 494 761 l 424 761 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 693 967 l 799 689 l 917 967 l 1218 967 l 968 521 l 1238 0 z "},"Ԗ":{"ha":1176,"x_min":60,"x_max":1197,"o":"m 949 476 l 1192 0 l 886 0 l 689 382 q 440 301 600 301 l 346 301 l 346 0 l 60 0 l 60 967 l 408 967 q 679 894 583 967 q 785 679 775 822 l 922 967 l 1197 967 l 949 476 m 413 503 q 493 538 464 503 q 522 642 522 572 q 493 735 522 703 q 404 768 464 768 l 346 768 l 346 503 l 413 503 z "},"Ԙ":{"ha":1143,"x_min":-21,"x_max":1115,"o":"m 786 200 l 1108 200 l 1108 0 l 500 0 l 500 329 l 435 329 l 290 0 l -21 0 l 185 379 q 64 480 104 415 q 24 649 24 544 q 126 889 24 811 q 436 967 229 967 l 1115 967 l 1086 768 l 786 768 l 786 588 l 1047 588 l 1047 394 l 786 394 l 786 200 m 500 521 l 500 771 l 450 771 q 355 737 389 771 q 321 640 321 703 q 353 552 321 583 q 439 521 386 521 l 500 521 z "},"Ԛ":{"ha":958,"x_min":28,"x_max":1000,"o":"m 700 67 q 869 46 800 67 q 1000 -21 938 25 l 832 -240 q 670 -83 758 -143 q 458 -22 582 -22 q 227 38 324 -22 q 79 211 131 97 q 28 485 28 325 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 813 860 696 994 q 931 485 931 726 q 865 226 931 326 q 700 67 799 125 m 325 485 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 z "},"Ԝ":{"ha":1193,"x_min":0,"x_max":1193,"o":"m 1053 0 l 681 0 l 594 694 l 499 0 l 135 0 l 0 967 l 286 967 l 347 207 l 450 967 l 749 967 l 835 207 l 918 967 l 1193 967 l 1053 0 z "},"Ԟ":{"ha":894,"x_min":60,"x_max":915,"o":"m 915 0 l 608 0 l 429 400 l 346 400 l 346 0 l 60 0 l 60 967 l 346 967 l 346 601 l 436 601 l 503 738 l 392 788 l 446 906 l 560 854 l 615 967 l 890 967 l 781 753 l 894 701 l 840 583 l 721 638 l 669 538 l 915 0 z "},"Ԡ":{"ha":1389,"x_min":-7,"x_max":1361,"o":"m 1046 668 q 1280 574 1199 668 q 1361 313 1361 479 l 1361 -22 q 1275 -240 1361 -165 q 1040 -315 1189 -315 q 822 -253 908 -315 l 911 -86 q 960 -108 942 -101 q 1006 -114 979 -114 q 1057 -95 1039 -114 q 1075 -40 1075 -76 l 1075 313 q 1049 429 1075 393 q 965 465 1024 465 q 847 428 896 465 l 847 0 l 561 0 l 561 756 l 424 756 l 392 483 q 340 219 372 321 q 241 56 307 118 q 60 -28 175 -7 l -7 167 q 66 224 42 188 q 102 319 90 261 q 129 506 114 378 l 185 967 l 847 967 l 847 603 q 1046 668 932 668 z "},"Ԣ":{"ha":1393,"x_min":60,"x_max":1365,"o":"m 1050 668 q 1284 574 1203 668 q 1365 313 1365 479 l 1365 -22 q 1279 -240 1365 -165 q 1044 -315 1193 -315 q 826 -253 913 -315 l 915 -86 q 965 -108 946 -101 q 1010 -114 983 -114 q 1061 -95 1043 -114 q 1079 -40 1079 -76 l 1079 313 q 1053 429 1079 393 q 969 465 1028 465 q 853 428 899 465 l 853 0 l 567 0 l 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 604 q 1050 668 938 668 z "},"Ҍ":{"ha":864,"x_min":14,"x_max":850,"o":"m 457 633 q 747 556 644 633 q 850 326 850 478 q 744 85 850 169 q 468 0 639 0 l 82 0 l 82 717 l 14 717 l 14 876 l 82 876 l 82 967 l 368 967 l 368 876 l 535 876 l 535 717 l 368 717 l 368 633 l 457 633 m 431 201 q 522 234 492 201 q 553 324 553 267 q 425 442 553 442 l 368 442 l 368 201 l 431 201 z "},"Ҏ":{"ha":849,"x_min":60,"x_max":828,"o":"m 828 642 q 783 461 828 536 q 657 346 739 386 l 726 233 l 617 233 l 567 315 q 440 301 511 301 l 346 301 l 346 0 l 60 0 l 60 967 l 408 967 q 717 884 607 967 q 828 642 828 801 m 535 547 q 550 642 550 582 q 516 736 550 704 q 404 768 482 768 l 346 768 l 346 489 l 413 489 q 458 492 431 489 l 353 665 l 463 665 l 535 547 z "},"а":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 z "},"б":{"ha":793,"x_min":28,"x_max":772,"o":"m 494 688 q 633 647 569 688 q 734 529 696 607 q 772 342 772 451 q 727 148 772 232 q 598 18 682 64 q 403 -28 514 -28 q 127 82 226 -28 q 28 419 28 192 q 57 685 28 582 q 156 853 86 788 q 349 956 225 918 q 481 1001 433 981 q 601 1061 529 1022 l 696 894 q 592 840 644 861 q 450 790 540 818 q 331 722 368 765 q 283 585 294 678 q 373 663 324 638 q 494 688 422 688 m 400 169 q 468 206 446 169 q 490 333 490 243 q 471 458 490 426 q 408 490 451 490 q 353 474 379 490 q 310 428 326 458 l 310 328 q 333 206 310 243 q 400 169 357 169 z "},"в":{"ha":767,"x_min":58,"x_max":743,"o":"m 553 410 q 743 224 743 386 q 651 56 743 113 q 400 0 558 0 l 58 0 l 58 735 q 381 769 251 769 q 626 719 539 769 q 713 568 713 668 q 672 465 713 506 q 553 410 632 424 m 374 604 q 333 603 351 604 l 333 457 l 375 457 q 426 476 407 457 q 444 531 444 496 q 426 585 444 565 q 374 604 408 604 m 389 171 q 463 251 463 171 q 444 309 463 289 q 389 329 425 329 l 333 329 l 333 171 l 389 171 z "},"г":{"ha":606,"x_min":58,"x_max":619,"o":"m 58 0 l 58 742 l 619 742 l 588 538 l 333 538 l 333 0 l 58 0 z "},"ѓ":{"ha":606,"x_min":58,"x_max":619,"o":"m 58 0 l 58 742 l 619 742 l 588 538 l 333 538 l 333 0 l 58 0 m 536 989 l 188 851 l 114 989 l 433 1189 l 536 989 z "},"ґ":{"ha":606,"x_min":58,"x_max":619,"o":"m 619 967 l 619 742 l 588 538 l 333 538 l 333 0 l 58 0 l 58 742 l 376 742 l 376 967 l 619 967 z "},"д":{"ha":768,"x_min":0,"x_max":782,"o":"m 782 197 l 782 -243 l 601 -243 l 574 0 l 208 0 l 181 -243 l 0 -243 l 0 197 l 43 197 q 77 240 64 213 q 102 330 90 268 q 124 504 114 392 l 144 742 l 703 742 l 703 197 l 782 197 m 450 569 l 376 569 l 372 526 q 328 301 358 375 q 239 197 297 226 l 450 197 l 450 569 z "},"е":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 z "},"ѐ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 621 989 l 547 851 l 199 989 l 301 1189 l 621 989 z "},"ё":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 225 1136 q 319 1099 281 1136 q 357 1008 357 1061 q 319 917 357 954 q 225 879 281 879 q 132 917 171 879 q 93 1008 93 954 q 132 1099 93 1061 q 225 1136 171 1136 m 565 1136 q 659 1099 621 1136 q 697 1008 697 1061 q 659 917 697 954 q 565 879 621 879 q 472 917 511 879 q 433 1008 433 954 q 472 1099 433 1061 q 565 1136 511 1136 z "},"ж":{"ha":1085,"x_min":-7,"x_max":1092,"o":"m 919 397 l 1092 0 l 818 0 l 707 304 l 660 304 l 660 0 l 425 0 l 425 304 l 378 304 l 265 0 l -7 0 l 165 397 l 4 742 l 257 742 l 374 457 l 425 457 l 425 742 l 660 742 l 660 457 l 711 457 l 829 742 l 1081 742 l 919 397 z "},"з":{"ha":686,"x_min":-7,"x_max":665,"o":"m 326 769 q 483 744 414 769 q 591 671 551 718 q 631 561 631 624 q 460 394 631 435 q 614 336 563 381 q 665 211 665 292 q 569 33 665 94 q 306 -28 472 -28 q -7 60 117 -28 l 119 208 q 208 171 168 181 q 296 161 247 161 q 383 229 383 161 q 296 294 383 294 l 169 294 l 185 461 l 278 461 q 354 528 354 461 q 336 571 354 556 q 285 586 318 586 q 210 575 244 586 q 139 542 175 564 l 14 682 q 326 769 143 769 z "},"и":{"ha":813,"x_min":58,"x_max":754,"o":"m 754 0 l 496 0 l 496 222 q 535 489 496 346 l 325 0 l 58 0 l 58 742 l 318 742 l 318 514 q 279 247 318 381 l 486 742 l 754 742 l 754 0 z "},"й":{"ha":813,"x_min":58,"x_max":754,"o":"m 754 0 l 496 0 l 496 222 q 535 489 496 346 l 325 0 l 58 0 l 58 742 l 318 742 l 318 514 q 279 247 318 381 l 486 742 l 754 742 l 754 0 m 407 869 q 223 936 288 869 q 150 1114 158 1003 l 293 1138 q 332 1075 304 1094 q 407 1056 360 1056 q 482 1075 454 1056 q 521 1138 510 1094 l 664 1114 q 591 936 656 1003 q 407 869 526 869 z "},"ѝ":{"ha":813,"x_min":58,"x_max":754,"o":"m 754 0 l 496 0 l 496 222 q 535 489 496 346 l 325 0 l 58 0 l 58 742 l 318 742 l 318 514 q 279 247 318 381 l 486 742 l 754 742 l 754 0 m 632 989 l 558 851 l 210 989 l 313 1189 l 632 989 z "},"ҋ":{"ha":893,"x_min":58,"x_max":921,"o":"m 407 869 q 223 936 288 869 q 150 1114 158 1003 l 293 1138 q 332 1075 304 1094 q 407 1056 360 1056 q 482 1075 454 1056 q 521 1138 510 1094 l 664 1114 q 591 936 656 1003 q 407 869 526 869 m 921 197 l 782 -243 l 601 -243 l 657 0 l 496 0 l 496 222 q 535 489 496 346 l 325 0 l 58 0 l 58 742 l 318 742 l 318 514 q 279 247 318 381 l 486 742 l 754 742 l 754 197 l 921 197 z "},"к":{"ha":786,"x_min":58,"x_max":800,"o":"m 610 397 l 800 0 l 519 0 l 385 304 l 333 304 l 333 0 l 58 0 l 58 742 l 333 742 l 333 457 l 392 457 l 535 742 l 789 742 l 610 397 z "},"ќ":{"ha":786,"x_min":58,"x_max":800,"o":"m 610 397 l 800 0 l 519 0 l 385 304 l 333 304 l 333 0 l 58 0 l 58 742 l 333 742 l 333 457 l 392 457 l 535 742 l 789 742 l 610 397 m 590 989 l 242 851 l 168 989 l 488 1189 l 590 989 z "},"л":{"ha":788,"x_min":0,"x_max":729,"o":"m 729 742 l 729 0 l 454 0 l 454 546 l 365 546 l 356 440 q 318 187 340 271 q 240 53 296 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 729 742 z "},"м":{"ha":933,"x_min":14,"x_max":919,"o":"m 919 0 l 661 0 l 656 214 q 654 299 654 243 q 667 507 654 394 l 576 71 l 357 71 l 265 507 q 278 307 278 415 q 276 214 278 246 l 271 0 l 14 0 l 75 742 l 390 742 l 467 294 l 539 742 l 857 742 l 919 0 z "},"н":{"ha":808,"x_min":58,"x_max":750,"o":"m 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 l 750 0 l 475 0 l 475 276 z "},"о":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"п":{"ha":803,"x_min":58,"x_max":744,"o":"m 469 543 l 333 543 l 333 0 l 58 0 l 58 742 l 744 742 l 744 0 l 469 0 l 469 543 z "},"р":{"ha":825,"x_min":58,"x_max":801,"o":"m 524 769 q 731 665 661 769 q 801 374 801 561 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 742 l 303 742 l 314 669 q 413 746 358 722 q 524 769 468 769 m 415 168 q 519 369 519 168 q 508 499 519 454 q 478 558 497 543 q 431 572 460 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 z "},"с":{"ha":665,"x_min":24,"x_max":679,"o":"m 410 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 q 417 -28 567 -28 q 207 22 296 -28 q 71 160 118 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 z "},"т":{"ha":674,"x_min":0,"x_max":688,"o":"m 653 543 l 475 543 l 475 0 l 200 0 l 200 543 l 0 543 l 0 742 l 688 742 l 653 543 z "},"у":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 z "},"ў":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 371 869 q 187 936 251 869 q 114 1114 122 1003 l 257 1138 q 296 1075 268 1094 q 371 1056 324 1056 q 446 1075 418 1056 q 485 1138 474 1094 l 628 1114 q 555 936 619 1003 q 371 869 490 869 z "},"ф":{"ha":1168,"x_min":24,"x_max":1144,"o":"m 888 769 q 1081 666 1017 769 q 1144 369 1144 563 q 1111 158 1144 247 q 1017 20 1078 68 q 878 -28 957 -28 q 713 44 778 -28 l 713 -287 l 456 -315 l 456 44 q 290 -28 390 -28 q 151 20 211 -28 q 57 158 90 68 q 24 369 24 247 q 94 664 24 558 q 294 769 165 769 q 381 753 342 769 q 456 700 419 736 l 456 1061 l 713 1033 l 713 699 q 888 769 783 769 m 381 165 q 419 176 403 165 q 456 211 436 186 l 456 528 q 420 565 438 553 q 381 576 403 576 q 318 532 338 576 q 299 369 299 488 q 319 210 299 256 q 381 165 339 165 m 789 165 q 849 210 829 165 q 869 369 869 256 q 852 533 869 489 q 794 576 835 576 q 753 565 772 576 q 713 528 733 553 l 713 211 q 749 176 732 186 q 789 165 765 165 z "},"х":{"ha":733,"x_min":-28,"x_max":761,"o":"m 761 0 l 454 0 l 357 256 l 268 0 l -28 0 l 199 389 l -8 742 l 296 742 l 368 524 l 433 742 l 721 742 l 532 397 l 761 0 z "},"ч":{"ha":764,"x_min":21,"x_max":706,"o":"m 706 742 l 706 0 l 431 0 l 431 257 q 340 211 390 228 q 235 194 289 194 q 74 257 126 194 q 21 431 21 319 l 21 742 l 296 742 l 296 467 q 309 410 296 426 q 346 394 322 394 q 431 424 392 394 l 431 742 l 706 742 z "},"ц":{"ha":833,"x_min":58,"x_max":847,"o":"m 847 197 l 847 -243 l 667 -243 l 639 0 l 58 0 l 58 742 l 333 742 l 333 197 l 461 197 l 461 742 l 736 742 l 736 197 l 847 197 z "},"ш":{"ha":1074,"x_min":58,"x_max":1015,"o":"m 1015 0 l 58 0 l 58 742 l 319 742 l 319 197 l 424 197 l 424 742 l 650 742 l 650 197 l 754 197 l 754 742 l 1015 742 l 1015 0 z "},"щ":{"ha":1113,"x_min":58,"x_max":1126,"o":"m 1126 197 l 1126 -243 l 946 -243 l 918 0 l 58 0 l 58 742 l 319 742 l 319 197 l 424 197 l 424 742 l 650 742 l 650 197 l 754 197 l 754 742 l 1015 742 l 1015 197 l 1126 197 z "},"џ":{"ha":794,"x_min":58,"x_max":736,"o":"m 736 0 l 506 0 l 506 -243 l 325 -243 l 297 0 l 58 0 l 58 742 l 333 742 l 333 197 l 461 197 l 461 742 l 736 742 l 736 0 z "},"ь":{"ha":731,"x_min":58,"x_max":724,"o":"m 358 515 q 635 451 546 515 q 724 256 724 388 q 635 67 724 133 q 396 0 547 0 l 58 0 l 58 742 l 333 742 l 333 515 l 358 515 m 365 171 q 427 195 407 171 q 447 261 447 219 q 426 327 447 306 q 354 349 404 349 l 333 349 l 333 171 l 365 171 z "},"ъ":{"ha":872,"x_min":0,"x_max":865,"o":"m 500 515 q 776 451 688 515 q 865 256 865 388 q 777 67 865 133 q 538 0 689 0 l 200 0 l 200 549 l 0 549 l 0 742 l 475 742 l 475 515 l 500 515 m 507 171 q 569 195 549 171 q 589 261 589 219 q 567 327 589 306 q 496 349 546 349 l 475 349 l 475 171 l 507 171 z "},"ы":{"ha":1081,"x_min":58,"x_max":1022,"o":"m 344 515 q 621 451 532 515 q 710 256 710 388 q 622 67 710 133 q 382 0 533 0 l 58 0 l 58 742 l 333 742 l 333 515 l 344 515 m 1022 742 l 1022 0 l 747 0 l 747 742 l 1022 742 m 351 171 q 413 195 393 171 q 433 261 433 219 q 412 327 433 306 q 340 349 390 349 l 333 349 l 333 171 l 351 171 z "},"љ":{"ha":1104,"x_min":0,"x_max":1097,"o":"m 732 515 q 1008 451 919 515 q 1097 256 1097 388 q 1009 67 1097 133 q 769 0 921 0 l 446 0 l 446 546 l 365 546 l 356 440 q 318 187 340 271 q 240 53 296 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 721 742 l 721 515 l 732 515 m 739 171 q 801 195 781 171 q 821 261 821 219 q 799 327 821 306 q 728 349 778 349 l 721 349 l 721 171 l 739 171 z "},"њ":{"ha":1133,"x_min":58,"x_max":1126,"o":"m 761 488 q 1037 426 947 488 q 1126 242 1126 364 q 1038 64 1126 128 q 799 0 949 0 l 475 0 l 475 307 l 333 307 l 333 0 l 58 0 l 58 742 l 333 742 l 333 488 l 475 488 l 475 742 l 750 742 l 750 488 l 761 488 m 772 167 q 840 185 819 167 q 861 247 861 204 q 839 307 861 289 q 761 325 817 325 l 750 325 l 750 167 l 772 167 z "},"ѕ":{"ha":678,"x_min":-7,"x_max":671,"o":"m 356 769 q 513 744 438 769 q 640 674 589 718 l 543 525 q 457 565 503 550 q 367 579 411 579 q 304 546 304 579 q 313 523 304 532 q 352 501 321 514 q 453 467 383 488 q 617 378 564 432 q 671 228 671 325 q 626 94 671 153 q 501 4 581 36 q 319 -28 421 -28 q 137 3 222 -28 q -7 90 51 35 l 124 235 q 215 181 165 201 q 313 161 264 161 q 370 173 350 161 q 390 207 390 185 q 381 237 390 226 q 344 258 372 247 q 247 289 317 268 q 32 529 32 353 q 70 651 32 597 q 181 738 108 706 q 356 769 254 769 z "},"є":{"ha":679,"x_min":24,"x_max":679,"o":"m 431 167 q 498 178 467 167 q 565 218 529 190 l 679 64 q 560 -4 622 19 q 421 -28 497 -28 q 209 22 299 -28 q 72 160 119 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 q 679 671 568 769 l 565 524 q 428 575 501 575 q 335 545 368 575 q 299 449 303 515 l 542 449 l 542 304 l 299 304 q 338 199 301 231 q 431 167 374 167 z "},"э":{"ha":676,"x_min":0,"x_max":653,"o":"m 293 769 q 556 669 460 769 q 653 379 653 569 q 551 82 653 192 q 263 -28 449 -28 q 122 -6 185 -28 q 0 57 58 15 l 114 210 q 184 176 153 186 q 250 167 215 167 q 378 304 365 167 l 135 304 l 135 449 l 376 449 q 343 546 371 517 q 269 575 315 575 q 199 565 232 575 q 131 531 167 554 l 17 678 q 293 769 131 769 z "},"і":{"ha":392,"x_min":42,"x_max":350,"o":"m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 z "},"ї":{"ha":392,"x_min":-107,"x_max":497,"o":"m 333 0 l 58 0 l 58 742 l 333 742 l 333 0 m 25 1136 q 119 1099 81 1136 q 157 1008 157 1061 q 119 917 157 954 q 25 879 81 879 q -68 917 -29 879 q -107 1008 -107 954 q -68 1099 -107 1061 q 25 1136 -29 1136 m 365 1136 q 459 1099 421 1136 q 497 1008 497 1061 q 459 917 497 954 q 365 879 421 879 q 272 917 311 879 q 233 1008 233 954 q 272 1099 233 1061 q 365 1136 311 1136 z "},"ј":{"ha":392,"x_min":-97,"x_max":350,"o":"m 333 107 q 244 -169 333 -74 q -3 -315 156 -264 l -97 -115 q -11 -67 -43 -90 q 40 -6 21 -43 q 58 90 58 32 l 58 742 l 333 742 l 333 107 m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 z "},"ћ":{"ha":806,"x_min":0,"x_max":757,"o":"m 557 769 q 703 711 650 769 q 757 547 757 653 l 757 0 l 482 0 l 482 497 q 472 554 482 539 q 440 569 461 569 q 347 496 394 569 l 347 0 l 72 0 l 72 819 l 0 819 l 0 967 l 72 967 l 72 1033 l 347 1061 l 347 967 l 517 967 l 517 819 l 347 819 l 347 675 q 444 747 394 725 q 557 769 494 769 z "},"ю":{"ha":1139,"x_min":58,"x_max":1115,"o":"m 758 769 q 944 724 864 769 q 1070 588 1025 678 q 1115 369 1115 497 q 1070 160 1115 250 q 944 22 1025 71 q 758 -28 864 -28 q 524 52 613 -28 q 408 285 435 132 l 333 285 l 333 0 l 58 0 l 58 742 l 333 742 l 333 465 l 413 465 q 527 690 439 610 q 758 769 615 769 m 758 169 q 822 216 803 169 q 840 369 840 263 q 822 526 840 481 q 758 572 803 572 q 695 526 714 572 q 676 372 676 479 q 695 215 676 261 q 758 169 714 169 z "},"я":{"ha":778,"x_min":-21,"x_max":719,"o":"m 719 742 l 719 0 l 444 0 l 444 243 l 390 243 l 269 0 l -21 0 l 147 308 q 69 381 97 335 q 42 490 42 428 q 135 678 42 615 q 414 742 229 742 l 719 742 m 444 393 l 444 575 l 414 575 q 343 551 367 575 q 319 488 319 526 q 342 419 319 446 q 408 393 365 393 l 444 393 z "},"ђ":{"ha":806,"x_min":0,"x_max":757,"o":"m 557 769 q 703 711 650 769 q 757 547 757 653 l 757 107 q 668 -169 757 -74 q 421 -315 579 -264 l 326 -115 q 413 -67 381 -90 q 463 -6 444 -43 q 482 90 482 32 l 482 497 q 472 554 482 539 q 440 569 461 569 q 347 496 394 569 l 347 0 l 72 0 l 72 819 l 0 819 l 0 967 l 72 967 l 72 1033 l 347 1061 l 347 967 l 521 967 l 521 819 l 347 819 l 347 675 q 444 747 394 725 q 557 769 494 769 z "},"ѡ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 z "},"ѣ":{"ha":744,"x_min":0,"x_max":738,"o":"m 372 515 q 649 451 560 515 q 738 256 738 388 q 649 67 738 133 q 410 0 561 0 l 72 0 l 72 631 l 0 631 l 0 778 l 72 778 l 72 922 l 347 950 l 347 778 l 531 778 l 510 631 l 347 631 l 347 515 l 372 515 m 379 171 q 441 195 421 171 q 461 261 461 219 q 440 327 461 306 q 368 349 418 349 l 347 349 l 347 171 l 379 171 z "},"ѥ":{"ha":1057,"x_min":58,"x_max":1057,"o":"m 808 167 q 876 178 844 167 q 943 218 907 190 l 1057 64 q 938 -4 1000 19 q 799 -28 875 -28 q 533 58 636 -28 q 407 288 431 143 l 333 288 l 333 0 l 58 0 l 58 742 l 333 742 l 333 463 l 411 463 q 539 686 439 603 q 788 769 639 769 q 1057 671 946 769 l 943 524 q 806 575 879 575 q 713 545 746 575 q 676 449 681 515 l 919 449 l 919 304 l 676 304 q 715 199 679 231 q 808 167 751 167 z "},"ѧ":{"ha":844,"x_min":-21,"x_max":865,"o":"m 533 247 l 506 247 l 506 0 l 332 0 l 332 247 l 310 247 l 235 0 l -21 0 l 272 742 l 574 742 l 865 0 l 610 0 l 533 247 m 481 414 l 419 611 l 360 414 l 481 414 z "},"ѩ":{"ha":1150,"x_min":58,"x_max":1171,"o":"m 856 261 l 840 261 l 840 0 l 679 0 l 679 261 l 664 261 l 594 0 l 351 0 l 443 261 l 333 261 l 333 0 l 58 0 l 58 742 l 333 742 l 333 428 l 501 428 l 611 742 l 913 742 l 1171 0 l 928 0 l 856 261 m 810 428 l 758 611 l 710 428 l 810 428 z "},"ѫ":{"ha":1015,"x_min":-7,"x_max":1022,"o":"m 1022 0 l 769 0 l 672 276 l 625 276 l 625 0 l 390 0 l 390 276 l 343 276 l 244 0 l -7 0 l 183 443 l 283 443 l 149 633 l 149 742 l 857 742 l 857 633 l 721 443 l 832 443 l 1022 0 m 504 443 l 594 594 l 413 594 l 504 443 z "},"ѭ":{"ha":1213,"x_min":58,"x_max":1219,"o":"m 1219 0 l 982 0 l 949 275 l 907 275 l 907 0 l 681 0 l 681 275 l 639 275 l 606 0 l 369 0 l 429 275 l 333 275 l 333 0 l 58 0 l 58 742 l 333 742 l 333 442 l 557 442 l 435 633 l 435 742 l 1133 742 l 1133 633 l 1010 442 l 1122 442 l 1219 0 m 699 594 l 785 442 l 871 594 l 699 594 z "},"ѯ":{"ha":739,"x_min":28,"x_max":711,"o":"m 282 -315 q 104 -231 171 -287 q 38 -93 38 -174 q 97 35 38 -12 q 281 110 156 82 q 398 147 365 129 q 431 196 431 165 q 406 236 431 224 q 324 249 382 249 l 156 249 l 156 383 l 343 556 l 28 556 l 28 742 l 660 742 l 660 572 l 449 396 l 461 396 q 645 339 579 396 q 711 186 711 282 q 638 20 711 75 q 436 -60 564 -35 q 315 -92 344 -78 q 285 -126 285 -107 q 338 -171 285 -151 l 282 -315 m 628 1046 l 426 836 l 263 836 l 61 1046 l 154 1153 l 344 1019 l 535 1153 l 628 1046 z "},"ѱ":{"ha":1104,"x_min":49,"x_max":1069,"o":"m 1069 336 q 967 85 1069 178 q 686 -24 864 -7 l 686 -287 l 425 -315 l 425 -25 q 144 75 240 -8 q 49 285 49 158 l 49 742 l 317 742 l 317 299 q 342 208 317 242 q 425 163 367 175 l 425 742 l 686 742 l 686 165 q 774 223 746 179 q 801 343 801 267 q 764 742 801 517 l 1026 742 q 1069 336 1069 544 z "},"ѳ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 576 q 333 545 358 576 q 301 446 308 514 l 510 446 q 478 546 503 515 q 406 576 453 576 m 406 165 q 479 199 454 165 q 511 307 504 233 l 300 307 q 331 199 306 232 q 406 165 356 165 z "},"ѵ":{"ha":761,"x_min":-21,"x_max":803,"o":"m 531 0 l 206 0 l -21 742 l 278 742 l 371 199 l 447 597 q 522 767 469 714 q 676 819 575 819 q 803 801 742 819 l 763 619 q 726 625 746 625 q 693 614 706 625 q 672 571 681 603 l 531 0 z "},"ѷ":{"ha":761,"x_min":-21,"x_max":803,"o":"m 531 0 l 206 0 l -21 742 l 278 742 l 371 199 l 447 597 q 522 767 469 714 q 676 819 575 819 q 803 801 742 819 l 763 619 q 726 625 746 625 q 693 614 706 625 q 672 571 681 603 l 531 0 m 346 925 l 213 861 l 31 1133 l 201 1218 l 346 925 m 599 921 l 463 867 l 292 1140 l 465 1218 l 599 921 z "},"ѹ":{"ha":1539,"x_min":24,"x_max":1560,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 1332 1 q 1171 -232 1285 -153 q 871 -317 1057 -311 l 842 -129 q 1001 -90 949 -118 q 1082 0 1053 -62 l 988 0 l 776 742 l 1068 742 l 1161 168 l 1276 742 l 1560 742 l 1332 1 z "},"ғ":{"ha":619,"x_min":0,"x_max":633,"o":"m 347 538 l 347 429 l 493 429 l 493 290 l 347 290 l 347 0 l 72 0 l 72 290 l 0 290 l 0 429 l 72 429 l 72 742 l 633 742 l 601 538 l 347 538 z "},"ҕ":{"ha":771,"x_min":58,"x_max":743,"o":"m 543 492 q 690 433 636 492 q 743 269 743 375 l 743 -22 q 659 -240 743 -165 q 432 -315 575 -315 q 213 -253 299 -315 l 301 -96 q 350 -115 331 -110 q 396 -121 369 -121 q 449 -102 431 -121 q 468 -47 468 -83 l 468 219 q 458 276 468 261 q 426 292 447 292 q 333 239 383 292 l 333 0 l 58 0 l 58 742 l 619 742 l 588 551 l 333 551 l 333 411 q 433 472 383 453 q 543 492 482 492 z "},"җ":{"ha":1085,"x_min":-7,"x_max":1092,"o":"m 1092 197 l 1092 -243 l 911 -243 l 883 0 l 818 0 l 707 304 l 660 304 l 660 0 l 425 0 l 425 304 l 378 304 l 265 0 l -7 0 l 165 397 l 4 742 l 257 742 l 374 457 l 425 457 l 425 742 l 660 742 l 660 457 l 711 457 l 829 742 l 1081 742 l 919 397 l 1006 197 l 1092 197 z "},"ҙ":{"ha":686,"x_min":-7,"x_max":665,"o":"m 665 211 q 597 55 665 114 q 408 -21 529 -4 q 526 -187 526 -86 q 464 -322 526 -274 q 304 -371 401 -371 q 143 -335 213 -371 l 193 -206 q 274 -225 235 -225 q 331 -207 311 -225 q 350 -158 350 -189 q 331 -92 350 -125 q 264 -26 313 -60 q -7 60 103 -18 l 119 208 q 208 171 168 181 q 296 161 247 161 q 383 229 383 161 q 296 294 383 294 l 169 294 l 185 461 l 278 461 q 354 528 354 461 q 336 571 354 556 q 285 586 318 586 q 210 575 244 586 q 139 542 175 564 l 14 682 q 326 769 143 769 q 483 744 414 769 q 591 671 551 718 q 631 561 631 624 q 460 394 631 435 q 614 336 563 381 q 665 211 665 292 z "},"қ":{"ha":793,"x_min":58,"x_max":800,"o":"m 800 197 l 800 -243 l 619 -243 l 592 0 l 519 0 l 385 304 l 333 304 l 333 0 l 58 0 l 58 742 l 333 742 l 333 457 l 392 457 l 535 742 l 789 742 l 610 397 l 706 197 l 800 197 z "},"ҝ":{"ha":793,"x_min":58,"x_max":800,"o":"m 800 0 l 515 0 l 422 318 l 411 318 l 411 160 l 346 160 l 346 318 l 315 318 l 315 0 l 58 0 l 58 742 l 315 742 l 315 443 l 346 443 l 346 604 l 411 604 l 411 443 l 421 443 l 531 742 l 789 742 l 635 397 l 800 0 z "},"ҟ":{"ha":800,"x_min":0,"x_max":814,"o":"m 814 0 l 533 0 l 399 304 l 347 304 l 347 0 l 72 0 l 72 778 l 0 778 l 0 925 l 72 925 l 72 1033 l 347 1061 l 347 925 l 517 925 l 517 778 l 347 778 l 347 457 l 406 457 l 549 742 l 803 742 l 624 397 l 814 0 z "},"ҡ":{"ha":928,"x_min":0,"x_max":942,"o":"m 942 0 l 661 0 l 526 304 l 475 304 l 475 0 l 200 0 l 200 549 l 0 549 l 0 742 l 475 742 l 475 457 l 533 457 l 676 742 l 931 742 l 751 397 l 942 0 z "},"ң":{"ha":847,"x_min":58,"x_max":861,"o":"m 861 197 l 861 -243 l 681 -243 l 653 0 l 475 0 l 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 l 750 197 l 861 197 z "},"ҥ":{"ha":949,"x_min":58,"x_max":963,"o":"m 928 543 l 750 543 l 750 0 l 475 0 l 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 963 742 l 928 543 z "},"ԥ":{"ha":842,"x_min":58,"x_max":856,"o":"m 856 197 l 856 -243 l 675 -243 l 647 0 l 469 0 l 469 543 l 333 543 l 333 0 l 58 0 l 58 742 l 744 742 l 744 197 l 856 197 z "},"ҧ":{"ha":1181,"x_min":58,"x_max":1153,"o":"m 953 492 q 1099 433 1046 492 q 1153 269 1153 375 l 1153 -22 q 1069 -240 1153 -165 q 842 -315 985 -315 q 622 -253 708 -315 l 711 -96 q 760 -115 740 -110 q 806 -121 779 -121 q 859 -102 840 -121 q 878 -47 878 -83 l 878 219 q 867 276 878 261 q 836 292 857 292 q 744 240 796 292 l 744 0 l 469 0 l 469 543 l 333 543 l 333 0 l 58 0 l 58 742 l 744 742 l 744 413 q 842 472 792 453 q 953 492 893 492 z "},"ҩ":{"ha":879,"x_min":24,"x_max":856,"o":"m 856 308 q 817 163 856 235 q 701 44 778 92 q 824 -124 750 -32 l 701 -207 q 557 -14 608 -87 q 418 -28 488 -28 q 208 22 297 -28 q 72 160 119 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 q 531 758 482 769 q 621 725 579 747 l 532 547 q 435 563 493 563 q 340 518 371 563 q 310 365 310 474 q 341 211 310 251 q 433 171 372 171 l 443 171 q 401 317 401 254 q 463 465 401 408 q 628 521 525 521 q 792 465 728 521 q 856 308 856 410 m 581 321 q 608 210 581 278 q 671 322 671 251 q 626 381 671 381 q 592 365 604 381 q 581 321 581 349 z "},"ҫ":{"ha":665,"x_min":24,"x_max":679,"o":"m 679 64 q 479 -24 592 -8 q 592 -187 592 -87 q 529 -322 592 -274 q 369 -371 467 -371 q 208 -335 278 -371 l 258 -206 q 339 -225 300 -225 q 396 -207 376 -225 q 415 -158 415 -189 q 393 -88 415 -122 q 315 -18 371 -54 q 101 114 179 11 q 24 365 24 217 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 z "},"ҭ":{"ha":674,"x_min":0,"x_max":688,"o":"m 475 543 l 475 197 l 586 197 l 586 -243 l 406 -243 l 378 0 l 200 0 l 200 543 l 0 543 l 0 742 l 688 742 l 653 543 l 475 543 z "},"ҳ":{"ha":754,"x_min":-28,"x_max":761,"o":"m 761 197 l 761 -243 l 581 -243 l 553 0 l 454 0 l 357 256 l 268 0 l -28 0 l 199 389 l -8 742 l 296 742 l 368 524 l 433 742 l 721 742 l 532 397 l 647 197 l 761 197 z "},"ҵ":{"ha":1003,"x_min":0,"x_max":1017,"o":"m 1017 197 l 1017 -243 l 836 -243 l 808 0 l 200 0 l 200 549 l 0 549 l 0 742 l 590 742 l 569 549 l 475 549 l 475 197 l 631 197 l 631 742 l 906 742 l 906 197 l 1017 197 z "},"ҷ":{"ha":803,"x_min":21,"x_max":817,"o":"m 817 197 l 817 -243 l 636 -243 l 608 0 l 431 0 l 431 257 q 340 211 390 228 q 235 194 289 194 q 74 257 126 194 q 21 431 21 319 l 21 742 l 296 742 l 296 467 q 309 410 296 426 q 346 394 322 394 q 431 424 392 394 l 431 742 l 706 742 l 706 197 l 817 197 z "},"ҹ":{"ha":764,"x_min":21,"x_max":706,"o":"m 706 742 l 706 0 l 439 0 l 439 264 q 394 235 415 246 l 394 114 l 329 114 l 329 208 q 232 194 278 194 q 73 257 125 194 q 21 431 21 319 l 21 742 l 289 742 l 289 463 q 298 409 289 425 q 329 390 307 393 l 329 558 l 394 558 l 394 400 q 439 425 421 411 l 439 742 l 706 742 z "},"һ":{"ha":785,"x_min":58,"x_max":743,"o":"m 543 686 q 690 628 636 686 q 743 464 743 569 l 743 0 l 468 0 l 468 414 q 458 471 468 456 q 426 486 447 486 q 333 419 383 486 l 333 0 l 58 0 l 58 1033 l 333 1061 l 333 590 q 428 663 376 640 q 543 686 479 686 z "},"ԧ":{"ha":840,"x_min":58,"x_max":854,"o":"m 854 197 l 854 -243 l 674 -243 l 646 0 l 468 0 l 468 414 q 458 471 468 456 q 426 486 447 486 q 333 419 383 486 l 333 0 l 58 0 l 58 1033 l 333 1061 l 333 590 q 428 663 376 640 q 543 686 479 686 q 690 628 636 686 q 743 464 743 569 l 743 197 l 854 197 z "},"ԩ":{"ha":808,"x_min":-197,"x_max":750,"o":"m 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 l 750 0 l 475 0 l 475 276 m 22 -317 q -197 -254 -111 -317 l -108 -97 q -60 -117 -79 -111 q -14 -122 -40 -122 q 40 -103 21 -122 q 58 -49 58 -85 l 58 0 l 333 0 l 333 -24 q 249 -242 333 -167 q 22 -317 165 -317 z "},"ԫ":{"ha":1335,"x_min":0,"x_max":1349,"o":"m 1349 0 l 1074 0 l 974 307 l 958 307 l 958 0 l 692 0 l 692 -243 l 511 -243 l 483 0 l 208 0 l 181 -243 l 0 -243 l 0 197 l 43 197 q 77 240 64 213 q 102 330 90 268 q 124 504 114 392 l 144 742 l 617 742 l 617 457 l 711 457 l 711 742 l 958 742 l 958 454 l 981 454 l 1089 742 l 1336 742 l 1199 397 l 1349 0 m 382 569 l 363 569 l 358 526 q 316 302 344 378 q 236 197 288 226 l 382 197 l 382 569 m 711 304 l 617 304 l 617 197 l 711 197 l 711 304 z "},"ԭ":{"ha":899,"x_min":21,"x_max":913,"o":"m 913 197 l 913 -243 l 732 -243 l 704 0 l 264 0 l 236 -243 l 56 -243 l 56 197 l 124 197 q 154 218 132 203 q 200 257 176 233 q 243 314 224 281 q 75 410 129 338 q 21 590 21 483 l 21 742 l 243 742 l 243 600 q 255 517 243 546 q 293 474 267 488 q 296 504 293 482 l 317 742 l 833 742 l 833 197 l 913 197 m 525 526 q 515 458 519 479 l 596 458 l 596 569 l 529 569 l 525 526 m 596 303 l 456 303 q 340 197 413 236 l 596 197 l 596 303 z "},"ԯ":{"ha":826,"x_min":0,"x_max":840,"o":"m 840 197 l 840 -243 l 660 -243 l 632 0 l 454 0 l 454 546 l 365 546 l 356 440 q 318 187 340 271 q 240 53 296 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 729 742 l 729 197 l 840 197 z "},"ҽ":{"ha":981,"x_min":-14,"x_max":960,"o":"m 960 381 q 954 293 960 346 l 504 293 q 551 192 515 218 q 653 167 586 167 q 732 183 692 167 q 821 232 772 199 l 932 82 q 626 -28 797 -28 q 353 57 453 -28 q 232 288 254 142 q 48 346 110 290 q -14 494 -14 401 q 38 653 -14 571 l 193 594 q 175 518 175 553 q 232 463 175 463 l 235 463 q 351 685 258 600 q 596 769 444 769 q 788 724 706 769 q 915 590 869 678 q 960 381 960 503 m 689 458 q 669 560 688 524 q 601 596 650 596 q 533 564 556 596 q 503 449 510 532 l 689 449 l 689 458 z "},"ҿ":{"ha":981,"x_min":-14,"x_max":960,"o":"m 960 381 q 954 293 960 346 l 504 293 q 551 192 515 218 q 653 167 586 167 q 732 183 692 167 q 821 232 772 199 l 932 82 q 760 -8 854 19 q 683 -63 706 -35 q 661 -117 661 -92 q 732 -178 661 -178 q 817 -167 768 -178 l 800 -326 q 697 -337 751 -337 q 538 -290 600 -337 q 475 -162 475 -243 q 533 -21 475 -82 q 326 83 403 1 q 232 288 250 164 q 48 346 110 290 q -14 494 -14 401 q 38 653 -14 571 l 193 594 q 175 518 175 553 q 232 463 175 463 l 235 463 q 351 685 258 600 q 596 769 444 769 q 788 724 706 769 q 915 590 869 678 q 960 381 960 503 m 689 458 q 669 560 688 524 q 601 596 650 596 q 533 564 556 596 q 503 449 510 532 l 689 449 l 689 458 z "},"ӏ":{"ha":421,"x_min":49,"x_max":435,"o":"m 282 -28 q 109 35 169 -28 q 49 214 49 99 l 49 1033 l 324 1061 l 324 225 q 357 188 324 188 q 386 193 372 188 l 435 -3 q 282 -28 369 -28 z "},"ӂ":{"ha":1085,"x_min":-7,"x_max":1092,"o":"m 919 397 l 1092 0 l 818 0 l 707 304 l 660 304 l 660 0 l 425 0 l 425 304 l 378 304 l 265 0 l -7 0 l 165 397 l 4 742 l 257 742 l 374 457 l 425 457 l 425 742 l 660 742 l 660 457 l 711 457 l 829 742 l 1081 742 l 919 397 m 543 869 q 359 936 424 869 q 286 1114 294 1003 l 429 1138 q 468 1075 440 1094 q 543 1056 496 1056 q 618 1075 590 1056 q 657 1138 646 1094 l 800 1114 q 727 936 792 1003 q 543 869 663 869 z "},"ӄ":{"ha":789,"x_min":58,"x_max":775,"o":"m 610 438 q 761 225 761 399 l 761 -22 q 677 -240 761 -165 q 450 -315 593 -315 q 231 -253 317 -315 l 319 -96 q 368 -115 349 -110 q 414 -121 388 -121 q 467 -102 449 -121 q 486 -47 486 -83 l 486 233 q 473 278 486 264 q 431 292 460 292 l 333 293 l 333 0 l 58 0 l 58 742 l 333 742 l 333 446 l 378 446 l 521 742 l 775 742 l 610 438 z "},"ӆ":{"ha":868,"x_min":0,"x_max":896,"o":"m 896 197 l 757 -243 l 576 -243 l 632 0 l 454 0 l 454 546 l 365 546 l 356 440 q 318 187 340 271 q 240 53 296 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 729 742 l 729 197 l 896 197 z "},"ӈ":{"ha":808,"x_min":58,"x_max":750,"o":"m 750 742 l 750 -22 q 666 -240 750 -165 q 439 -315 582 -315 q 219 -253 306 -315 l 308 -96 q 357 -115 338 -110 q 403 -121 376 -121 q 456 -102 438 -121 q 475 -47 475 -83 l 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 z "},"ӊ":{"ha":889,"x_min":58,"x_max":917,"o":"m 917 197 l 778 -243 l 597 -243 l 653 0 l 475 0 l 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 l 750 197 l 917 197 z "},"ӌ":{"ha":764,"x_min":21,"x_max":706,"o":"m 706 742 l 706 0 l 535 0 l 507 -243 l 326 -243 l 326 183 l 431 183 l 431 293 q 340 247 390 264 q 232 231 289 231 q 73 293 125 231 q 21 467 21 356 l 21 742 l 296 742 l 296 503 q 309 447 296 463 q 346 431 322 431 q 431 460 392 431 l 431 742 l 706 742 z "},"ӎ":{"ha":1058,"x_min":14,"x_max":1086,"o":"m 1086 197 l 947 -243 l 767 -243 l 822 0 l 661 0 l 656 214 q 654 299 654 243 q 667 507 654 394 l 576 71 l 357 71 l 265 507 q 278 307 278 415 q 276 214 278 246 l 271 0 l 14 0 l 75 742 l 390 742 l 467 294 l 539 742 l 857 742 l 903 197 l 1086 197 z "},"ӑ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 385 869 q 201 936 265 869 q 128 1114 136 1003 l 271 1138 q 310 1075 282 1094 q 385 1056 338 1056 q 460 1075 432 1056 q 499 1138 488 1094 l 642 1114 q 569 936 633 1003 q 385 869 504 869 z "},"ӓ":{"ha":765,"x_min":21,"x_max":744,"o":"m 700 240 q 710 183 700 201 q 744 154 719 164 l 689 -22 q 567 6 614 -17 q 489 81 519 29 q 265 -28 417 -28 q 88 38 156 -28 q 21 208 21 104 q 113 397 21 332 q 379 463 204 463 l 432 463 l 432 481 q 410 556 432 536 q 325 575 388 575 q 240 565 292 575 q 133 536 188 554 l 74 711 q 222 754 142 739 q 367 769 301 769 q 621 702 542 769 q 700 496 700 635 l 700 240 m 350 165 q 397 178 375 165 q 432 210 418 190 l 432 319 l 403 319 q 317 299 344 319 q 289 235 289 278 q 306 184 289 203 q 350 165 322 165 m 214 1136 q 308 1099 269 1136 q 346 1008 346 1061 q 308 917 346 954 q 214 879 269 879 q 121 917 160 879 q 82 1008 82 954 q 121 1099 82 1061 q 214 1136 160 1136 m 554 1136 q 648 1099 610 1136 q 686 1008 686 1061 q 648 917 686 954 q 554 879 610 879 q 461 917 500 879 q 422 1008 422 954 q 461 1099 422 1061 q 554 1136 500 1136 z "},"ӕ":{"ha":1197,"x_min":21,"x_max":1176,"o":"m 1176 381 q 1171 293 1176 346 l 721 293 q 767 192 732 218 q 869 167 803 167 q 949 183 908 167 q 1038 232 989 199 l 1149 82 q 843 -28 1014 -28 q 663 5 740 -28 q 533 94 585 38 q 271 -28 447 -28 q 88 38 156 -28 q 21 208 21 104 q 115 397 21 332 q 390 463 208 463 l 443 463 l 443 478 q 421 553 443 533 q 336 572 399 572 q 251 562 303 572 q 144 533 199 551 l 85 711 q 233 754 153 739 q 378 769 313 769 q 607 685 531 769 q 835 769 699 769 q 1011 724 933 769 q 1133 590 1089 678 q 1176 381 1176 501 m 906 458 q 885 560 904 524 q 818 596 867 596 q 749 564 772 596 q 719 449 726 532 l 906 449 l 906 458 m 365 165 q 416 182 394 165 q 460 231 438 199 q 449 306 450 272 l 449 313 l 417 313 q 333 293 360 313 q 307 229 307 274 q 322 183 307 200 q 365 165 338 165 z "},"ӗ":{"ha":778,"x_min":24,"x_max":757,"o":"m 757 381 q 751 293 757 346 l 301 293 q 348 192 313 218 q 450 167 383 167 q 529 183 489 167 q 618 232 569 199 l 729 82 q 424 -28 594 -28 q 125 81 226 -28 q 24 369 24 190 q 66 572 24 481 q 192 716 108 663 q 393 769 275 769 q 585 724 503 769 q 712 590 667 678 q 757 381 757 503 m 486 458 q 466 560 485 524 q 399 596 447 596 q 330 564 353 596 q 300 449 307 532 l 486 449 l 486 458 m 396 869 q 212 936 276 869 q 139 1114 147 1003 l 282 1138 q 321 1075 293 1094 q 396 1056 349 1056 q 471 1075 443 1056 q 510 1138 499 1094 l 653 1114 q 580 936 644 1003 q 396 869 515 869 z "},"ә":{"ha":778,"x_min":21,"x_max":754,"o":"m 378 769 q 660 661 565 769 q 754 372 754 553 q 712 170 754 261 q 586 26 669 79 q 385 -28 503 -28 q 193 18 275 -28 q 66 151 111 64 q 21 361 21 239 q 26 449 21 396 l 496 449 q 458 549 490 517 q 367 582 426 582 q 273 569 317 582 q 181 525 229 556 l 69 671 q 205 744 131 718 q 378 769 279 769 m 385 160 q 462 191 435 160 q 496 293 489 222 l 278 293 l 278 283 q 307 193 281 226 q 385 160 333 160 z "},"ӛ":{"ha":778,"x_min":21,"x_max":754,"o":"m 378 769 q 660 661 565 769 q 754 372 754 553 q 712 170 754 261 q 586 26 669 79 q 385 -28 503 -28 q 193 18 275 -28 q 66 151 111 64 q 21 361 21 239 q 26 449 21 396 l 496 449 q 458 549 490 517 q 367 582 426 582 q 273 569 317 582 q 181 525 229 556 l 69 671 q 205 744 131 718 q 378 769 279 769 m 385 160 q 462 191 435 160 q 496 293 489 222 l 278 293 l 278 283 q 307 193 281 226 q 385 160 333 160 m 207 1136 q 301 1099 263 1136 q 339 1008 339 1061 q 301 917 339 954 q 207 879 263 879 q 114 917 153 879 q 75 1008 75 954 q 114 1099 75 1061 q 207 1136 153 1136 m 547 1136 q 641 1099 603 1136 q 679 1008 679 1061 q 641 917 679 954 q 547 879 603 879 q 454 917 493 879 q 415 1008 415 954 q 454 1099 415 1061 q 547 1136 493 1136 z "},"ӝ":{"ha":1085,"x_min":-7,"x_max":1092,"o":"m 919 397 l 1092 0 l 818 0 l 707 304 l 660 304 l 660 0 l 425 0 l 425 304 l 378 304 l 265 0 l -7 0 l 165 397 l 4 742 l 257 742 l 374 457 l 425 457 l 425 742 l 660 742 l 660 457 l 711 457 l 829 742 l 1081 742 l 919 397 m 372 1136 q 466 1099 428 1136 q 504 1008 504 1061 q 466 917 504 954 q 372 879 428 879 q 279 917 318 879 q 240 1008 240 954 q 279 1099 240 1061 q 372 1136 318 1136 m 713 1136 q 806 1099 768 1136 q 844 1008 844 1061 q 806 917 844 954 q 713 879 768 879 q 619 917 658 879 q 581 1008 581 954 q 619 1099 581 1061 q 713 1136 658 1136 z "},"ӟ":{"ha":686,"x_min":-7,"x_max":665,"o":"m 326 769 q 483 744 414 769 q 591 671 551 718 q 631 561 631 624 q 460 394 631 435 q 614 336 563 381 q 665 211 665 292 q 569 33 665 94 q 306 -28 472 -28 q -7 60 117 -28 l 119 208 q 208 171 168 181 q 296 161 247 161 q 383 229 383 161 q 296 294 383 294 l 169 294 l 185 461 l 278 461 q 354 528 354 461 q 336 571 354 556 q 285 586 318 586 q 210 575 244 586 q 139 542 175 564 l 14 682 q 326 769 143 769 m 160 1136 q 253 1099 215 1136 q 292 1008 292 1061 q 253 917 292 954 q 160 879 215 879 q 67 917 106 879 q 28 1008 28 954 q 67 1099 28 1061 q 160 1136 106 1136 m 500 1136 q 594 1099 556 1136 q 632 1008 632 1061 q 594 917 632 954 q 500 879 556 879 q 407 917 446 879 q 368 1008 368 954 q 407 1099 368 1061 q 500 1136 446 1136 z "},"ӡ":{"ha":725,"x_min":-28,"x_max":718,"o":"m 436 299 q 645 215 572 285 q 718 15 718 144 q 671 -153 718 -78 q 534 -272 624 -228 q 321 -315 444 -315 q -28 -162 97 -315 l 114 -25 q 207 -90 164 -69 q 301 -110 250 -110 q 399 -74 361 -110 q 438 35 438 -37 q 399 124 438 97 q 289 151 361 151 l 149 151 l 149 300 l 357 542 l 35 542 l 35 742 l 667 742 l 667 558 l 436 299 z "},"ӣ":{"ha":813,"x_min":58,"x_max":754,"o":"m 754 0 l 496 0 l 496 222 q 535 489 496 346 l 325 0 l 58 0 l 58 742 l 318 742 l 318 514 q 279 247 318 381 l 486 742 l 754 742 l 754 0 m 181 900 l 181 1086 l 632 1086 l 632 900 l 181 900 z "},"ӥ":{"ha":813,"x_min":58,"x_max":754,"o":"m 754 0 l 496 0 l 496 222 q 535 489 496 346 l 325 0 l 58 0 l 58 742 l 318 742 l 318 514 q 279 247 318 381 l 486 742 l 754 742 l 754 0 m 236 1136 q 330 1099 292 1136 q 368 1008 368 1061 q 330 917 368 954 q 236 879 292 879 q 143 917 182 879 q 104 1008 104 954 q 143 1099 104 1061 q 236 1136 182 1136 m 576 1136 q 670 1099 632 1136 q 708 1008 708 1061 q 670 917 708 954 q 576 879 632 879 q 483 917 522 879 q 444 1008 444 954 q 483 1099 444 1061 q 576 1136 522 1136 z "},"ӧ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 235 1136 q 328 1099 290 1136 q 367 1008 367 1061 q 328 917 367 954 q 235 879 290 879 q 142 917 181 879 q 103 1008 103 954 q 142 1099 103 1061 q 235 1136 181 1136 m 575 1136 q 669 1099 631 1136 q 707 1008 707 1061 q 669 917 707 954 q 575 879 631 879 q 482 917 521 879 q 443 1008 443 954 q 482 1099 443 1061 q 575 1136 521 1136 z "},"ө":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 576 q 333 545 358 576 q 301 446 308 514 l 510 446 q 478 546 503 515 q 406 576 453 576 m 406 165 q 479 199 454 165 q 511 307 504 233 l 300 307 q 331 199 306 232 q 406 165 356 165 z "},"ӫ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 576 q 333 545 358 576 q 301 446 308 514 l 510 446 q 478 546 503 515 q 406 576 453 576 m 406 165 q 479 199 454 165 q 511 307 504 233 l 300 307 q 331 199 306 232 q 406 165 356 165 m 235 1136 q 328 1099 290 1136 q 367 1008 367 1061 q 328 917 367 954 q 235 879 290 879 q 142 917 181 879 q 103 1008 103 954 q 142 1099 103 1061 q 235 1136 181 1136 m 575 1136 q 669 1099 631 1136 q 707 1008 707 1061 q 669 917 707 954 q 575 879 631 879 q 482 917 521 879 q 443 1008 443 954 q 482 1099 443 1061 q 575 1136 521 1136 z "},"ӭ":{"ha":676,"x_min":0,"x_max":653,"o":"m 293 769 q 556 669 460 769 q 653 379 653 569 q 551 82 653 192 q 263 -28 449 -28 q 122 -6 185 -28 q 0 57 58 15 l 114 210 q 184 176 153 186 q 250 167 215 167 q 378 304 365 167 l 135 304 l 135 449 l 376 449 q 343 546 371 517 q 269 575 315 575 q 199 565 232 575 q 131 531 167 554 l 17 678 q 293 769 131 769 m 144 1136 q 238 1099 200 1136 q 276 1008 276 1061 q 238 917 276 954 q 144 879 200 879 q 51 917 90 879 q 13 1008 13 954 q 51 1099 13 1061 q 144 1136 90 1136 m 485 1136 q 578 1099 540 1136 q 617 1008 617 1061 q 578 917 617 954 q 485 879 540 879 q 392 917 431 879 q 353 1008 353 954 q 392 1099 353 1061 q 485 1136 431 1136 z "},"ӯ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 144 900 l 144 1086 l 596 1086 l 596 900 l 144 900 z "},"ӱ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 200 1136 q 294 1099 256 1136 q 332 1008 332 1061 q 294 917 332 954 q 200 879 256 879 q 107 917 146 879 q 68 1008 68 954 q 107 1099 68 1061 q 200 1136 146 1136 m 540 1136 q 634 1099 596 1136 q 672 1008 672 1061 q 634 917 672 954 q 540 879 596 879 q 447 917 486 879 q 408 1008 408 954 q 447 1099 408 1061 q 540 1136 486 1136 z "},"ӳ":{"ha":742,"x_min":-21,"x_max":763,"o":"m 535 1 q 374 -232 488 -153 q 74 -317 260 -311 l 44 -129 q 203 -90 151 -118 q 285 0 256 -62 l 190 0 l -21 742 l 271 742 l 364 168 l 479 742 l 763 742 l 535 1 m 488 1085 l 310 839 l 192 900 l 318 1174 l 488 1085 m 736 1063 l 546 826 l 432 894 l 572 1161 l 736 1063 z "},"ӵ":{"ha":764,"x_min":21,"x_max":706,"o":"m 706 742 l 706 0 l 431 0 l 431 257 q 340 211 390 228 q 235 194 289 194 q 74 257 126 194 q 21 431 21 319 l 21 742 l 296 742 l 296 467 q 309 410 296 426 q 346 394 322 394 q 431 424 392 394 l 431 742 l 706 742 m 193 1136 q 287 1099 249 1136 q 325 1008 325 1061 q 287 917 325 954 q 193 879 249 879 q 100 917 139 879 q 61 1008 61 954 q 100 1099 61 1061 q 193 1136 139 1136 m 533 1136 q 627 1099 589 1136 q 665 1008 665 1061 q 627 917 665 954 q 533 879 589 879 q 440 917 479 879 q 401 1008 401 954 q 440 1099 401 1061 q 533 1136 479 1136 z "},"ӷ":{"ha":606,"x_min":58,"x_max":619,"o":"m 333 538 l 333 197 l 444 197 l 444 -243 l 264 -243 l 236 0 l 58 0 l 58 742 l 619 742 l 588 538 l 333 538 z "},"ӹ":{"ha":1081,"x_min":58,"x_max":1022,"o":"m 344 515 q 621 451 532 515 q 710 256 710 388 q 622 67 710 133 q 382 0 533 0 l 58 0 l 58 742 l 333 742 l 333 515 l 344 515 m 1022 742 l 1022 0 l 747 0 l 747 742 l 1022 742 m 351 171 q 413 195 393 171 q 433 261 433 219 q 412 327 433 306 q 340 349 390 349 l 333 349 l 333 171 l 351 171 m 369 1136 q 463 1099 425 1136 q 501 1008 501 1061 q 463 917 501 954 q 369 879 425 879 q 276 917 315 879 q 238 1008 238 954 q 276 1099 238 1061 q 369 1136 315 1136 m 710 1136 q 803 1099 765 1136 q 842 1008 842 1061 q 803 917 842 954 q 710 879 765 879 q 617 917 656 879 q 578 1008 578 954 q 617 1099 578 1061 q 710 1136 656 1136 z "},"ӻ":{"ha":619,"x_min":-65,"x_max":633,"o":"m 347 538 l 347 429 l 493 429 l 493 290 l 347 290 l 347 197 l 465 197 l 465 -22 q 381 -240 465 -165 q 154 -315 297 -315 q -65 -253 21 -315 l 24 -96 q 72 -115 53 -110 q 118 -121 92 -121 q 172 -102 153 -121 q 190 -47 190 -83 l 190 0 l 72 0 l 72 290 l 0 290 l 0 429 l 72 429 l 72 742 l 633 742 l 601 538 l 347 538 z "},"ӽ":{"ha":768,"x_min":-28,"x_max":775,"o":"m 775 197 l 775 -22 q 691 -240 775 -165 q 464 -315 607 -315 q 244 -253 331 -315 l 333 -96 q 382 -115 363 -110 q 428 -121 401 -121 q 481 -102 463 -121 q 500 -47 500 -83 l 500 0 l 454 0 l 357 256 l 268 0 l -28 0 l 199 389 l -8 742 l 296 742 l 368 524 l 433 742 l 721 742 l 532 397 l 647 197 l 775 197 z "},"ӿ":{"ha":733,"x_min":-28,"x_max":761,"o":"m 761 0 l 454 0 l 357 276 l 268 0 l -28 0 l 156 315 l 54 315 l 54 471 l 150 471 l -8 742 l 282 742 l 368 510 l 447 742 l 721 742 l 572 471 l 668 471 l 668 315 l 579 315 l 761 0 z "},"ԁ":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 1033 l 769 0 l 525 0 l 515 76 q 306 -28 436 -28 q 94 79 165 -28 q 24 375 24 186 q 63 578 24 489 q 172 719 101 668 q 333 769 242 769 q 494 711 429 769 l 494 1061 l 769 1033 m 399 169 q 494 235 457 169 l 494 532 q 456 563 475 553 q 413 574 436 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ԃ":{"ha":1208,"x_min":24,"x_max":1181,"o":"m 1171 526 q 1181 339 1181 425 q 1127 131 1181 214 q 988 10 1074 49 q 804 -28 901 -28 q 649 5 719 -28 q 539 103 579 38 q 438 5 493 38 q 310 -28 383 -28 q 96 79 168 -28 q 24 375 24 186 q 62 580 24 490 q 172 719 100 669 q 340 769 243 769 q 423 754 382 769 q 494 711 464 739 l 494 1061 l 769 1033 l 769 264 q 784 190 769 211 q 826 169 799 169 q 885 214 865 169 q 906 360 906 258 q 897 526 906 442 l 1171 526 m 393 169 q 494 256 454 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 329 210 306 251 q 393 169 353 169 z "},"ԅ":{"ha":942,"x_min":14,"x_max":914,"o":"m 904 526 q 914 339 914 425 q 861 132 914 214 q 727 11 808 50 q 558 -28 646 -28 q 351 24 429 -28 q 214 201 274 75 l 196 239 l 75 239 l 75 414 l 213 414 q 272 432 253 414 q 292 490 292 450 q 273 543 292 528 q 215 558 254 558 l 14 558 l 14 742 l 222 742 q 558 486 558 742 q 530 365 558 415 q 444 282 501 315 l 465 242 q 506 185 488 200 q 550 169 524 169 q 615 215 590 169 q 639 360 639 260 q 631 526 639 442 l 904 526 z "},"ԇ":{"ha":626,"x_min":14,"x_max":633,"o":"m 633 197 l 633 -243 l 453 -243 l 425 0 l 329 0 l 207 239 l 75 239 l 75 414 l 213 414 q 272 432 253 414 q 292 490 292 450 q 273 543 292 528 q 215 558 254 558 l 14 558 l 14 742 l 222 742 q 558 486 558 742 q 530 368 558 417 q 443 288 501 319 l 499 197 l 633 197 z "},"ԉ":{"ha":1168,"x_min":0,"x_max":1140,"o":"m 1131 526 q 1140 339 1140 425 q 1087 131 1140 214 q 947 10 1033 49 q 764 -28 861 -28 q 612 2 682 -28 q 498 98 542 32 q 454 265 454 164 l 454 546 l 365 546 l 356 440 q 318 187 340 271 q 240 53 296 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 729 742 l 729 264 q 744 190 729 211 q 786 169 758 169 q 845 214 825 169 q 865 360 865 258 q 857 526 865 442 l 1131 526 z "},"ԋ":{"ha":1189,"x_min":58,"x_max":1161,"o":"m 1151 526 q 1161 339 1161 425 q 1108 131 1161 214 q 968 10 1054 49 q 785 -28 882 -28 q 633 2 703 -28 q 519 98 563 32 q 475 265 475 164 l 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 l 750 264 q 765 190 750 211 q 807 169 779 169 q 866 214 846 169 q 886 360 886 258 q 878 526 886 442 l 1151 526 z "},"ԍ":{"ha":778,"x_min":24,"x_max":747,"o":"m 428 769 q 602 741 528 769 q 736 661 676 713 l 610 525 q 530 568 568 554 q 447 582 492 582 q 306 374 306 582 q 333 209 306 254 q 417 164 360 164 q 493 176 458 164 l 493 272 l 421 272 l 396 444 l 747 444 l 747 72 q 592 2 678 29 q 413 -25 507 -25 q 119 74 214 -25 q 24 375 24 172 q 75 584 24 494 q 219 722 126 674 q 428 769 311 769 z "},"ԏ":{"ha":921,"x_min":0,"x_max":893,"o":"m 885 493 q 893 339 893 421 q 839 131 893 214 q 698 10 785 49 q 510 -28 611 -28 q 288 44 375 -28 q 200 265 200 117 l 200 557 l 0 557 l 0 742 l 688 742 l 653 557 l 475 557 l 475 264 q 490 190 475 211 q 532 169 504 169 q 594 215 571 169 q 618 360 618 261 q 611 492 618 436 l 885 493 z "},"ԑ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 z "},"ԓ":{"ha":788,"x_min":0,"x_max":729,"o":"m 729 742 l 729 -22 q 645 -240 729 -165 q 418 -315 561 -315 q 199 -253 285 -315 l 288 -96 q 336 -115 317 -110 q 382 -121 356 -121 q 435 -102 417 -121 q 454 -47 454 -83 l 454 546 l 365 546 l 356 440 q 318 187 340 271 q 240 53 296 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 729 742 z "},"ԕ":{"ha":1068,"x_min":0,"x_max":1096,"o":"m 1096 0 l 789 0 l 692 256 l 603 0 l 307 0 l 533 389 l 438 551 l 365 551 l 356 440 q 319 187 340 271 q 240 53 297 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 631 742 l 703 524 l 768 742 l 1056 742 l 867 397 l 1096 0 z "},"ԗ":{"ha":1206,"x_min":58,"x_max":1219,"o":"m 939 0 l 792 265 q 692 53 768 133 q 506 -28 615 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 742 l 303 742 l 314 669 q 413 746 358 722 q 524 769 468 769 q 713 688 644 769 q 797 458 782 607 l 954 742 l 1208 742 l 1001 378 l 1219 0 l 939 0 m 415 168 q 519 369 519 168 q 508 499 519 454 q 478 558 497 543 q 431 572 460 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 z "},"ԙ":{"ha":1182,"x_min":-21,"x_max":1161,"o":"m 871 167 q 952 181 914 167 q 1046 232 990 194 l 1157 82 q 1018 1 1093 31 q 844 -28 943 -28 q 585 53 683 -28 q 460 269 486 133 l 401 269 l 269 0 l -21 0 l 153 318 q 42 506 42 381 q 131 681 42 619 q 400 742 221 742 l 675 742 q 828 769 743 769 q 1076 667 990 769 q 1161 368 1161 565 q 1156 268 1161 321 l 735 268 q 780 190 749 213 q 871 167 811 167 m 819 596 q 751 557 774 596 q 725 424 729 518 l 914 424 l 914 433 q 894 553 914 511 q 819 596 874 596 m 414 575 q 344 556 369 575 q 319 499 319 536 q 342 444 319 464 q 408 424 364 424 l 454 424 q 497 575 463 503 l 414 575 z "},"ԛ":{"ha":828,"x_min":24,"x_max":769,"o":"m 769 742 l 769 -315 l 494 -287 l 494 57 q 306 -28 422 -28 q 94 79 165 -28 q 24 375 24 186 q 63 579 24 489 q 172 719 101 669 q 335 769 243 769 q 517 690 442 769 l 529 742 l 769 742 m 399 169 q 494 235 457 169 l 494 532 q 456 563 474 553 q 414 574 438 574 q 335 526 364 574 q 306 372 306 478 q 330 210 306 250 q 399 169 354 169 z "},"ԝ":{"ha":1067,"x_min":-7,"x_max":1074,"o":"m 928 0 l 613 0 l 532 497 l 456 0 l 142 0 l -7 742 l 271 742 l 315 210 l 413 742 l 669 742 l 747 210 l 810 742 l 1074 742 l 928 0 z "},"ԟ":{"ha":786,"x_min":58,"x_max":800,"o":"m 800 0 l 519 0 l 385 304 l 333 304 l 333 0 l 58 0 l 58 742 l 333 742 l 333 457 l 392 457 l 435 543 l 354 579 l 404 686 l 488 649 l 535 742 l 789 742 l 692 556 l 782 514 l 732 407 l 638 450 l 610 397 l 800 0 z "},"ԡ":{"ha":1167,"x_min":0,"x_max":1139,"o":"m 939 492 q 1085 433 1032 492 q 1139 269 1139 375 l 1139 -22 q 1055 -240 1139 -165 q 828 -315 971 -315 q 608 -253 694 -315 l 697 -96 q 746 -115 726 -110 q 792 -121 765 -121 q 845 -102 826 -121 q 864 -47 864 -83 l 864 219 q 853 276 864 261 q 822 292 843 292 q 729 239 779 292 l 729 0 l 454 0 l 454 546 l 365 546 l 356 440 q 318 187 340 271 q 240 53 296 103 q 67 -18 183 4 l 0 176 q 64 221 46 200 q 91 289 82 242 q 107 450 100 336 l 125 742 l 729 742 l 729 411 q 828 472 779 453 q 939 492 878 492 z "},"ԣ":{"ha":1188,"x_min":58,"x_max":1160,"o":"m 960 492 q 1106 433 1053 492 q 1160 269 1160 375 l 1160 -22 q 1076 -240 1160 -165 q 849 -315 992 -315 q 629 -253 715 -315 l 718 -96 q 767 -115 747 -110 q 813 -121 786 -121 q 866 -102 847 -121 q 885 -47 885 -83 l 885 219 q 874 276 885 261 q 843 292 864 292 q 750 239 800 292 l 750 0 l 475 0 l 475 276 l 333 276 l 333 0 l 58 0 l 58 742 l 333 742 l 333 474 l 475 474 l 475 742 l 750 742 l 750 411 q 849 472 800 453 q 960 492 899 492 z "},"ҍ":{"ha":744,"x_min":0,"x_max":738,"o":"m 372 488 q 648 426 558 488 q 738 242 738 364 q 649 64 738 128 q 410 0 560 0 l 72 0 l 72 547 l 0 547 l 0 694 l 72 694 l 72 742 l 347 742 l 347 694 l 531 694 l 510 547 l 347 547 l 347 488 l 372 488 m 379 171 q 440 192 419 171 q 461 247 461 214 q 368 321 461 321 l 347 321 l 347 171 l 379 171 z "},"ҏ":{"ha":825,"x_min":58,"x_max":801,"o":"m 801 374 q 756 149 801 247 q 632 6 711 51 l 714 -128 l 604 -128 l 542 -25 q 506 -28 519 -28 q 333 36 407 -28 l 333 -287 l 58 -315 l 58 742 l 303 742 l 314 669 q 413 746 358 722 q 518 769 467 769 q 731 666 660 769 q 801 374 801 563 m 415 140 q 440 142 432 140 l 340 304 l 450 304 l 507 213 q 519 369 519 263 q 508 499 519 456 q 476 558 496 543 q 425 572 457 572 q 333 503 372 572 l 333 192 q 371 152 351 164 q 415 140 390 140 z "},"Ϳ":{"ha":451,"x_min":-28,"x_max":394,"o":"m 394 154 q 346 -55 394 28 q 223 -183 297 -137 q 49 -262 149 -229 l -28 -61 q 61 -8 32 -39 q 99 63 90 24 q 108 164 108 103 l 108 967 l 394 967 l 394 154 z "},"Α":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"Β":{"ha":864,"x_min":60,"x_max":843,"o":"m 628 513 q 783 441 724 493 q 843 286 843 389 q 727 63 843 126 q 399 0 611 0 l 60 0 l 60 967 l 361 967 q 690 909 576 967 q 803 717 803 851 q 753 581 803 631 q 628 513 703 532 m 346 771 l 346 593 l 394 593 q 486 615 460 593 q 513 688 513 636 q 484 751 513 731 q 388 771 456 771 l 346 771 m 401 201 q 511 224 474 201 q 549 306 549 246 q 515 387 549 361 q 413 413 481 413 l 346 413 l 346 201 l 401 201 z "},"Γ":{"ha":710,"x_min":60,"x_max":717,"o":"m 689 747 l 346 747 l 346 0 l 60 0 l 60 967 l 717 967 l 689 747 z "},"Δ":{"ha":846,"x_min":-35,"x_max":881,"o":"m 881 0 l -35 0 l 253 967 l 594 967 l 881 0 m 306 203 l 535 203 l 421 763 l 306 203 z "},"Ε":{"ha":722,"x_min":60,"x_max":694,"o":"m 665 768 l 346 768 l 346 588 l 626 588 l 626 394 l 346 394 l 346 200 l 688 200 l 688 0 l 60 0 l 60 967 l 694 967 l 665 768 z "},"Ζ":{"ha":774,"x_min":14,"x_max":753,"o":"m 740 754 l 356 224 l 753 224 l 725 0 l 14 0 l 14 210 l 411 750 l 53 750 l 53 967 l 740 967 l 740 754 z "},"Η":{"ha":913,"x_min":60,"x_max":853,"o":"m 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 0 l 567 0 l 567 390 z "},"Θ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 346 722 386 792 q 306 485 306 651 q 347 247 306 318 q 479 175 388 175 q 613 246 574 175 q 653 485 653 317 q 613 722 653 651 q 479 792 572 792 m 604 415 l 354 415 l 354 563 l 604 563 l 604 415 z "},"Ι":{"ha":406,"x_min":60,"x_max":346,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Κ":{"ha":915,"x_min":60,"x_max":943,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 644 538 l 943 0 l 618 0 l 354 515 l 624 967 l 918 967 l 644 538 z "},"Λ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 869 0 l 567 0 l 415 767 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 z "},"Μ":{"ha":1099,"x_min":21,"x_max":1078,"o":"m 1078 0 l 796 0 l 789 343 q 788 464 788 383 q 799 738 788 606 l 685 97 l 414 97 l 292 738 q 310 407 310 544 l 310 344 l 303 0 l 21 0 l 90 967 l 443 967 l 554 340 l 654 967 l 1008 967 l 1078 0 z "},"Ν":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 z "},"Ξ":{"ha":739,"x_min":28,"x_max":718,"o":"m 686 733 l 28 733 l 28 967 l 718 967 l 686 733 m 619 383 l 119 383 l 119 599 l 619 599 l 619 383 m 711 0 l 28 0 l 28 242 l 711 242 l 711 0 z "},"Ο":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 z "},"Π":{"ha":913,"x_min":60,"x_max":853,"o":"m 853 0 l 567 0 l 567 753 l 346 753 l 346 0 l 60 0 l 60 967 l 853 967 l 853 0 z "},"Ρ":{"ha":849,"x_min":60,"x_max":828,"o":"m 408 967 q 717 884 607 967 q 828 642 828 801 q 723 389 828 476 q 440 301 618 301 l 346 301 l 346 0 l 60 0 l 60 967 l 408 967 m 413 503 q 536 642 536 503 q 404 768 536 768 l 346 768 l 346 503 l 413 503 z "},"Σ":{"ha":699,"x_min":14,"x_max":685,"o":"m 685 765 l 328 765 l 533 522 l 533 428 l 324 206 l 685 206 l 685 0 l 14 0 l 14 200 l 256 472 l 14 767 l 14 967 l 685 967 l 685 765 z "},"Τ":{"ha":769,"x_min":7,"x_max":776,"o":"m 747 753 l 528 753 l 528 0 l 242 0 l 242 753 l 7 753 l 7 967 l 776 967 l 747 753 z "},"Υ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Φ":{"ha":1199,"x_min":7,"x_max":1192,"o":"m 1192 488 q 1069 218 1192 314 q 738 111 946 122 l 738 0 l 460 0 l 460 111 q 131 215 254 122 q 7 479 7 308 q 130 747 7 651 q 460 854 253 842 l 460 967 l 738 967 l 738 854 q 1068 751 944 843 q 1192 488 1192 658 m 724 271 q 860 340 818 281 q 903 488 903 399 q 859 631 903 576 q 724 696 815 686 l 724 271 m 296 479 q 339 335 296 390 q 474 269 382 281 l 474 694 q 296 479 296 676 z "},"Χ":{"ha":842,"x_min":-14,"x_max":856,"o":"m 856 0 l 547 0 l 414 332 l 289 0 l -14 0 l 244 513 l 4 967 l 311 967 l 417 689 l 535 967 l 836 967 l 586 521 l 856 0 z "},"Ψ":{"ha":1039,"x_min":14,"x_max":1025,"o":"m 1025 967 l 1025 599 q 933 365 1025 458 q 663 246 842 272 l 663 0 l 376 0 l 376 244 q 105 361 196 271 q 14 599 14 451 l 14 967 l 286 967 l 286 586 q 310 488 286 525 q 390 433 333 450 l 390 967 l 649 967 l 649 435 q 728 489 704 451 q 753 586 753 526 l 753 967 l 1025 967 z "},"Ω":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 722 933 619 994 q 877 770 824 872 q 931 544 931 668 q 881 338 931 426 q 742 197 832 249 l 901 197 l 901 0 l 518 0 l 518 183 q 597 254 572 210 q 627 361 621 299 q 633 544 633 424 q 479 792 633 792 q 325 544 325 792 q 331 362 325 424 q 362 256 338 300 q 440 183 386 211 l 440 0 l 57 0 l 57 197 l 217 197 q 77 338 126 249 q 28 544 28 426 q 81 770 28 668 q 237 933 135 872 q 479 994 339 994 z "},"Ά":{"ha":1039,"x_min":114,"x_max":1074,"o":"m 733 188 l 504 188 l 468 0 l 169 0 l 451 967 l 793 967 l 1074 0 l 771 0 l 733 188 m 693 388 l 618 767 l 544 388 l 693 388 m 374 967 l 301 629 l 132 629 l 114 986 l 374 967 z "},"Έ":{"ha":1075,"x_min":114,"x_max":1047,"o":"m 1018 768 l 699 768 l 699 588 l 979 588 l 979 394 l 699 394 l 699 200 l 1040 200 l 1040 0 l 413 0 l 413 967 l 1047 967 l 1018 768 m 374 967 l 301 629 l 132 629 l 114 986 l 374 967 z "},"Ή":{"ha":1265,"x_min":114,"x_max":1206,"o":"m 919 390 l 699 390 l 699 0 l 413 0 l 413 967 l 699 967 l 699 610 l 919 610 l 919 967 l 1206 967 l 1206 0 l 919 0 l 919 390 m 374 967 l 301 629 l 132 629 l 114 986 l 374 967 z "},"Ί":{"ha":758,"x_min":114,"x_max":699,"o":"m 699 0 l 413 0 l 413 967 l 699 967 l 699 0 m 374 967 l 301 629 l 132 629 l 114 986 l 374 967 z "},"Ό":{"ha":1228,"x_min":100,"x_max":1200,"o":"m 749 994 q 1083 860 965 994 q 1200 485 1200 726 q 1147 213 1200 328 q 993 35 1094 97 q 749 -28 892 -28 q 415 108 532 -28 q 297 485 297 243 q 350 756 297 642 q 504 933 403 871 q 749 994 606 994 m 749 792 q 631 722 667 792 q 594 485 594 651 q 631 247 594 318 q 749 175 667 175 q 867 246 832 175 q 903 485 903 317 q 867 722 903 651 q 749 792 831 792 m 360 967 l 288 629 l 118 629 l 100 986 l 360 967 z "},"Ύ":{"ha":1274,"x_min":114,"x_max":1294,"o":"m 986 357 l 986 0 l 700 0 l 700 356 l 392 967 l 704 967 l 847 572 l 992 967 l 1294 967 l 986 357 m 374 967 l 301 629 l 132 629 l 114 986 l 374 967 z "},"Ώ":{"ha":1268,"x_min":100,"x_max":1240,"o":"m 789 994 q 1031 933 929 994 q 1187 770 1133 872 q 1240 544 1240 668 q 1191 338 1240 426 q 1051 197 1142 249 l 1211 197 l 1211 0 l 828 0 l 828 183 q 906 254 882 210 q 937 361 931 299 q 943 544 943 424 q 789 792 943 792 q 635 544 635 792 q 641 362 635 424 q 672 256 647 300 q 750 183 696 211 l 750 0 l 367 0 l 367 197 l 526 197 q 387 338 436 249 q 338 544 338 426 q 391 770 338 668 q 547 933 444 872 q 789 994 649 994 m 360 967 l 288 629 l 118 629 l 100 986 l 360 967 z "},"Ϊ":{"ha":406,"x_min":-103,"x_max":501,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ϋ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Ͱ":{"ha":726,"x_min":60,"x_max":726,"o":"m 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 726 610 l 726 390 l 346 390 z "},"Ͳ":{"ha":964,"x_min":7,"x_max":957,"o":"m 957 967 l 957 510 l 713 510 l 713 758 l 625 758 l 625 0 l 339 0 l 339 758 l 251 758 l 251 510 l 7 510 l 7 967 l 957 967 z "},"Ͷ":{"ha":904,"x_min":60,"x_max":844,"o":"m 844 0 l 565 0 l 565 296 q 607 696 565 504 l 399 0 l 60 0 l 60 967 l 339 967 l 339 660 q 328 465 339 543 q 297 278 318 386 l 513 967 l 844 967 l 844 0 z "},"Ϙ":{"ha":958,"x_min":28,"x_max":931,"o":"m 931 485 q 848 156 931 286 q 611 -12 765 26 l 611 -299 l 349 -299 l 349 -12 q 110 153 193 25 q 28 485 28 282 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 q 813 860 696 994 q 931 485 931 726 m 479 175 q 598 246 563 175 q 633 485 633 317 q 597 722 633 651 q 479 792 561 792 q 361 722 397 792 q 325 485 325 651 q 361 247 325 318 q 479 175 397 175 z "},"Ϛ":{"ha":817,"x_min":28,"x_max":817,"o":"m 407 -158 q 477 -107 456 -126 q 499 -67 499 -87 q 483 -35 499 -49 q 435 -6 468 -21 q 328 38 403 8 q 111 184 194 89 q 28 463 28 279 q 94 727 28 613 q 283 904 161 842 q 565 967 404 967 l 817 967 l 789 744 l 613 744 q 332 469 332 744 q 348 355 332 396 q 405 283 364 314 q 532 211 446 251 q 672 139 622 171 q 750 65 722 107 q 778 -39 778 22 q 711 -190 778 -124 q 506 -315 644 -257 l 407 -158 z "},"Ϝ":{"ha":717,"x_min":60,"x_max":717,"o":"m 346 747 l 346 558 l 479 558 q 658 514 592 558 l 596 336 q 535 353 564 347 q 465 358 506 358 l 346 358 l 346 0 l 60 0 l 60 967 l 717 967 l 689 747 l 346 747 z "},"Ϟ":{"ha":719,"x_min":14,"x_max":706,"o":"m 706 376 l 457 0 l 139 0 l 403 376 l 56 376 l 14 592 l 263 967 l 581 967 l 321 592 l 664 592 l 706 376 z "},"Ϡ":{"ha":851,"x_min":-35,"x_max":886,"o":"m 629 0 l 546 265 l 479 0 l 304 0 l 465 519 l 421 663 l 211 0 l -35 0 l 313 894 l 272 967 l 518 967 l 886 0 l 629 0 z "},"Ϗ":{"ha":957,"x_min":60,"x_max":957,"o":"m 60 967 l 346 967 l 346 0 l 60 0 l 60 967 m 957 214 l 957 -22 q 871 -240 957 -165 q 636 -315 785 -315 q 418 -253 504 -315 l 507 -86 q 556 -108 538 -101 q 601 -114 575 -114 q 653 -95 635 -114 q 671 -40 671 -76 l 671 0 l 618 0 l 354 515 l 624 967 l 918 967 l 644 538 l 824 214 l 957 214 z "},"ϒ":{"ha":918,"x_min":-21,"x_max":960,"o":"m 288 356 l -21 967 l 292 967 l 435 572 l 499 768 q 602 942 538 890 q 779 994 667 994 q 960 946 878 994 l 889 781 q 821 797 853 797 q 772 783 790 797 q 738 732 753 768 l 574 357 l 574 0 l 288 0 l 288 356 z "},"ϓ":{"ha":1354,"x_min":114,"x_max":1396,"o":"m 724 356 l 415 967 l 728 967 l 871 572 l 935 768 q 1038 942 974 890 q 1215 994 1103 994 q 1396 946 1314 994 l 1325 781 q 1257 797 1289 797 q 1208 783 1226 797 q 1174 732 1189 768 l 1010 357 l 1010 0 l 724 0 l 724 356 m 429 653 l 254 624 l 114 967 l 376 1021 l 429 653 z "},"ϔ":{"ha":918,"x_min":-21,"x_max":960,"o":"m 288 356 l -21 967 l 292 967 l 435 572 l 499 768 q 602 942 538 890 q 779 994 667 994 q 960 946 878 994 l 889 781 q 821 797 853 797 q 772 783 790 797 q 738 732 753 768 l 574 357 l 574 0 l 288 0 l 288 356 z "},"ϴ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 813 860 696 994 q 931 485 931 726 q 878 213 931 328 q 724 35 825 97 q 479 -28 622 -28 q 145 108 263 -28 q 28 485 28 243 q 81 756 28 642 q 235 933 133 871 q 479 994 336 994 m 479 792 q 346 722 386 792 q 306 485 306 651 q 347 247 306 318 q 479 175 388 175 q 613 246 574 175 q 653 485 653 317 q 613 722 653 651 q 479 792 572 792 m 604 415 l 354 415 l 354 563 l 604 563 l 604 415 z "},"Ϸ":{"ha":849,"x_min":60,"x_max":828,"o":"m 408 824 q 717 741 607 824 q 828 497 828 658 q 723 236 828 325 q 440 147 618 147 l 346 147 l 346 0 l 60 0 l 60 967 l 346 967 l 346 824 l 408 824 m 413 349 q 505 385 474 349 q 536 497 536 421 q 404 625 536 625 l 346 625 l 346 349 l 413 349 z "},"Ϲ":{"ha":853,"x_min":28,"x_max":853,"o":"m 497 994 q 684 966 603 994 q 842 881 765 938 l 708 721 q 615 772 658 756 q 514 789 571 789 q 373 713 421 789 q 325 486 325 638 q 522 188 325 188 q 619 206 578 188 q 728 268 661 225 l 853 107 q 506 -28 692 -28 q 154 105 281 -28 q 28 486 28 238 q 86 759 28 644 q 251 934 144 874 q 497 994 357 994 z "},"Ϻ":{"ha":1099,"x_min":21,"x_max":1078,"o":"m 1078 0 l 796 0 l 789 343 q 788 464 788 383 q 799 738 788 606 l 685 97 l 414 97 l 292 738 q 310 407 310 544 l 310 344 l 303 0 l 21 0 l 90 967 l 443 967 l 554 340 l 654 967 l 1008 967 l 1078 0 z "},"Ͻ":{"ha":853,"x_min":0,"x_max":825,"o":"m 367 994 q 609 934 506 994 q 769 759 713 874 q 825 486 825 644 q 768 206 825 321 q 605 31 711 90 q 353 -28 499 -28 q 157 7 242 -28 q 0 107 72 42 l 125 268 q 226 208 176 228 q 338 188 275 188 q 528 486 528 188 q 350 789 528 789 q 244 772 290 789 q 144 724 197 756 l 11 881 q 172 966 88 938 q 367 994 256 994 z "},"Ͼ":{"ha":853,"x_min":28,"x_max":853,"o":"m 497 994 q 684 966 603 994 q 842 881 765 938 l 708 721 q 615 772 658 756 q 514 789 571 789 q 373 713 421 789 q 325 486 325 638 q 522 188 325 188 q 619 206 578 188 q 728 268 661 225 l 853 107 q 506 -28 692 -28 q 154 105 281 -28 q 28 486 28 238 q 86 759 28 644 q 251 934 144 874 q 497 994 357 994 m 538 628 q 637 590 597 628 q 676 496 676 553 q 637 401 676 439 q 538 363 597 363 q 438 401 476 363 q 399 496 399 439 q 438 590 399 553 q 538 628 476 628 z "},"Ͽ":{"ha":853,"x_min":0,"x_max":825,"o":"m 367 994 q 609 934 506 994 q 769 759 713 874 q 825 486 825 644 q 768 206 825 321 q 605 31 711 90 q 353 -28 499 -28 q 157 7 242 -28 q 0 107 72 42 l 125 268 q 226 208 176 228 q 338 188 275 188 q 528 486 528 188 q 350 789 528 789 q 244 772 290 789 q 144 724 197 756 l 11 881 q 172 966 88 938 q 367 994 256 994 m 307 628 q 406 590 367 628 q 446 496 446 553 q 406 401 446 439 q 307 363 367 363 q 207 401 246 363 q 168 496 168 439 q 207 590 168 553 q 307 628 246 628 z "},"Ἀ":{"ha":1107,"x_min":114,"x_max":1142,"o":"m 242 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 m 801 188 l 572 188 l 536 0 l 238 0 l 519 967 l 861 967 l 1142 0 l 839 0 l 801 188 m 761 388 l 686 767 l 613 388 l 761 388 z "},"Ἁ":{"ha":1121,"x_min":114,"x_max":1156,"o":"m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 815 188 l 586 188 l 550 0 l 251 0 l 533 967 l 875 967 l 1156 0 l 853 0 l 815 188 m 775 388 l 700 767 l 626 388 l 775 388 z "},"Ἂ":{"ha":1425,"x_min":114,"x_max":1460,"o":"m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 932 l 604 986 l 667 624 l 517 594 l 383 932 m 1119 188 l 890 188 l 854 0 l 556 0 l 838 967 l 1179 967 l 1460 0 l 1157 0 l 1119 188 m 1079 388 l 1004 767 l 931 388 l 1079 388 z "},"Ἃ":{"ha":1397,"x_min":114,"x_max":1432,"o":"m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 667 624 l 517 594 l 383 932 l 604 986 l 667 624 m 1092 188 l 863 188 l 826 0 l 528 0 l 810 967 l 1151 967 l 1432 0 l 1129 0 l 1092 188 m 1051 388 l 976 767 l 903 388 l 1051 388 z "},"Ἄ":{"ha":1397,"x_min":114,"x_max":1432,"o":"m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 624 l 446 986 l 667 932 l 533 594 l 383 624 m 1092 188 l 863 188 l 826 0 l 528 0 l 810 967 l 1151 967 l 1432 0 l 1129 0 l 1092 188 m 1051 388 l 976 767 l 903 388 l 1051 388 z "},"Ἅ":{"ha":1397,"x_min":114,"x_max":1432,"o":"m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 681 932 l 547 594 l 397 624 l 460 986 l 681 932 m 1092 188 l 863 188 l 826 0 l 528 0 l 810 967 l 1151 967 l 1432 0 l 1129 0 l 1092 188 m 1051 388 l 976 767 l 903 388 l 1051 388 z "},"Ἆ":{"ha":1315,"x_min":114,"x_max":1350,"o":"m 1010 188 l 781 188 l 744 0 l 446 0 l 728 967 l 1069 967 l 1350 0 l 1047 0 l 1010 188 m 969 388 l 894 767 l 821 388 l 969 388 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 335 499 q 265 603 265 533 q 301 692 265 656 q 393 729 338 729 q 485 693 449 729 q 521 603 521 657 q 511 547 521 572 q 479 481 501 521 l 442 414 l 321 414 l 335 499 z "},"Ἇ":{"ha":1319,"x_min":114,"x_max":1354,"o":"m 1014 188 l 785 188 l 749 0 l 450 0 l 732 967 l 1074 967 l 1354 0 l 1051 0 l 1014 188 m 974 388 l 899 767 l 825 388 l 974 388 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 344 414 l 307 481 q 275 547 285 521 q 265 603 265 572 q 301 693 265 657 q 393 729 338 729 q 485 692 449 729 q 521 603 521 656 q 454 499 521 535 l 465 414 l 344 414 z "},"Ὰ":{"ha":1132,"x_min":114,"x_max":1167,"o":"m 826 188 l 597 188 l 561 0 l 263 0 l 544 967 l 886 967 l 1167 0 l 864 0 l 826 188 m 786 388 l 711 767 l 638 388 l 786 388 m 429 653 l 254 624 l 114 967 l 376 1021 l 429 653 z "},"Ά":{"ha":1069,"x_min":114,"x_max":1104,"o":"m 764 188 l 535 188 l 499 0 l 200 0 l 482 967 l 824 967 l 1104 0 l 801 0 l 764 188 m 724 388 l 649 767 l 575 388 l 724 388 m 429 967 l 289 624 l 114 653 l 167 1021 l 429 967 z "},"Ᾰ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 418 1036 q 236 1112 301 1036 q 161 1294 171 1188 l 304 1318 q 345 1249 317 1276 q 418 1222 374 1222 q 491 1249 463 1222 q 532 1318 519 1276 l 675 1294 q 600 1112 665 1188 q 418 1036 535 1036 z "},"Ᾱ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 z "},"ᾼ":{"ha":835,"x_min":-35,"x_max":869,"o":"m 529 188 l 300 188 l 264 0 l -35 0 l 247 967 l 589 967 l 869 0 l 567 0 l 529 188 m 489 388 l 414 767 l 340 388 l 489 388 m 525 -294 q 377 -240 429 -294 q 325 -99 325 -186 l 325 -61 l 510 -61 l 510 -93 q 563 -149 510 -149 q 629 -129 593 -149 l 692 -240 q 525 -294 624 -294 z "},"ᾈ":{"ha":1107,"x_min":114,"x_max":1142,"o":"m 242 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 m 801 188 l 572 188 l 536 0 l 238 0 l 519 967 l 861 967 l 1142 0 l 839 0 l 801 188 m 761 388 l 686 767 l 613 388 l 761 388 m 797 -294 q 649 -240 701 -294 q 597 -99 597 -186 l 597 -61 l 782 -61 l 782 -93 q 835 -149 782 -149 q 901 -129 865 -149 l 964 -240 q 797 -294 896 -294 z "},"ᾉ":{"ha":1121,"x_min":114,"x_max":1156,"o":"m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 815 188 l 586 188 l 550 0 l 251 0 l 533 967 l 875 967 l 1156 0 l 853 0 l 815 188 m 775 388 l 700 767 l 626 388 l 775 388 m 811 -294 q 663 -240 715 -294 q 611 -99 611 -186 l 611 -61 l 796 -61 l 796 -93 q 849 -149 796 -149 q 915 -129 879 -149 l 978 -240 q 811 -294 910 -294 z "},"ᾊ":{"ha":1425,"x_min":114,"x_max":1460,"o":"m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 932 l 604 986 l 667 624 l 517 594 l 383 932 m 1119 188 l 890 188 l 854 0 l 556 0 l 838 967 l 1179 967 l 1460 0 l 1157 0 l 1119 188 m 1079 388 l 1004 767 l 931 388 l 1079 388 m 1115 -294 q 967 -240 1019 -294 q 915 -99 915 -186 l 915 -61 l 1100 -61 l 1100 -93 q 1153 -149 1100 -149 q 1219 -129 1183 -149 l 1282 -240 q 1115 -294 1214 -294 z "},"ᾋ":{"ha":1397,"x_min":114,"x_max":1432,"o":"m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 667 624 l 517 594 l 383 932 l 604 986 l 667 624 m 1092 188 l 863 188 l 826 0 l 528 0 l 810 967 l 1151 967 l 1432 0 l 1129 0 l 1092 188 m 1051 388 l 976 767 l 903 388 l 1051 388 m 1088 -294 q 940 -240 992 -294 q 888 -99 888 -186 l 888 -61 l 1072 -61 l 1072 -93 q 1125 -149 1072 -149 q 1192 -129 1156 -149 l 1254 -240 q 1088 -294 1186 -294 z "},"ᾌ":{"ha":1397,"x_min":114,"x_max":1432,"o":"m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 624 l 446 986 l 667 932 l 533 594 l 383 624 m 1092 188 l 863 188 l 826 0 l 528 0 l 810 967 l 1151 967 l 1432 0 l 1129 0 l 1092 188 m 1051 388 l 976 767 l 903 388 l 1051 388 m 1088 -294 q 940 -240 992 -294 q 888 -99 888 -186 l 888 -61 l 1072 -61 l 1072 -93 q 1125 -149 1072 -149 q 1192 -129 1156 -149 l 1254 -240 q 1088 -294 1186 -294 z "},"ᾍ":{"ha":1397,"x_min":114,"x_max":1432,"o":"m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 681 932 l 547 594 l 397 624 l 460 986 l 681 932 m 1092 188 l 863 188 l 826 0 l 528 0 l 810 967 l 1151 967 l 1432 0 l 1129 0 l 1092 188 m 1051 388 l 976 767 l 903 388 l 1051 388 m 1088 -294 q 940 -240 992 -294 q 888 -99 888 -186 l 888 -61 l 1072 -61 l 1072 -93 q 1125 -149 1072 -149 q 1192 -129 1156 -149 l 1254 -240 q 1088 -294 1186 -294 z "},"ᾎ":{"ha":1315,"x_min":114,"x_max":1350,"o":"m 1010 188 l 781 188 l 744 0 l 446 0 l 728 967 l 1069 967 l 1350 0 l 1047 0 l 1010 188 m 969 388 l 894 767 l 821 388 l 969 388 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 335 499 q 265 603 265 533 q 301 692 265 656 q 393 729 338 729 q 485 693 449 729 q 521 603 521 657 q 511 547 521 572 q 479 481 501 521 l 442 414 l 321 414 l 335 499 m 1006 -294 q 858 -240 910 -294 q 806 -99 806 -186 l 806 -61 l 990 -61 l 990 -93 q 1043 -149 990 -149 q 1110 -129 1074 -149 l 1172 -240 q 1006 -294 1104 -294 z "},"ᾏ":{"ha":1319,"x_min":114,"x_max":1354,"o":"m 1014 188 l 785 188 l 749 0 l 450 0 l 732 967 l 1074 967 l 1354 0 l 1051 0 l 1014 188 m 974 388 l 899 767 l 825 388 l 974 388 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 344 414 l 307 481 q 275 547 285 521 q 265 603 265 572 q 301 693 265 657 q 393 729 338 729 q 485 692 449 729 q 521 603 521 656 q 454 499 521 535 l 465 414 l 344 414 m 1010 -294 q 862 -240 914 -294 q 810 -99 810 -186 l 810 -61 l 994 -61 l 994 -93 q 1047 -149 994 -149 q 1114 -129 1078 -149 l 1176 -240 q 1010 -294 1108 -294 z "},"Ἐ":{"ha":1079,"x_min":114,"x_max":1051,"o":"m 1022 768 l 703 768 l 703 588 l 983 588 l 983 394 l 703 394 l 703 200 l 1044 200 l 1044 0 l 417 0 l 417 967 l 1051 967 l 1022 768 m 242 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 z "},"Ἑ":{"ha":1079,"x_min":114,"x_max":1051,"o":"m 1022 768 l 703 768 l 703 588 l 983 588 l 983 394 l 703 394 l 703 200 l 1044 200 l 1044 0 l 417 0 l 417 967 l 1051 967 l 1022 768 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 z "},"Ἒ":{"ha":1374,"x_min":114,"x_max":1346,"o":"m 1317 768 l 997 768 l 997 588 l 1278 588 l 1278 394 l 997 394 l 997 200 l 1339 200 l 1339 0 l 711 0 l 711 967 l 1346 967 l 1317 768 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 932 l 604 986 l 667 624 l 517 594 l 383 932 z "},"Ἓ":{"ha":1374,"x_min":114,"x_max":1346,"o":"m 1317 768 l 997 768 l 997 588 l 1278 588 l 1278 394 l 997 394 l 997 200 l 1339 200 l 1339 0 l 711 0 l 711 967 l 1346 967 l 1317 768 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 667 624 l 517 594 l 383 932 l 604 986 l 667 624 z "},"Ἔ":{"ha":1360,"x_min":114,"x_max":1332,"o":"m 1303 768 l 983 768 l 983 588 l 1264 588 l 1264 394 l 983 394 l 983 200 l 1325 200 l 1325 0 l 697 0 l 697 967 l 1332 967 l 1303 768 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 624 l 446 986 l 667 932 l 533 594 l 383 624 z "},"Ἕ":{"ha":1374,"x_min":114,"x_max":1346,"o":"m 1317 768 l 997 768 l 997 588 l 1278 588 l 1278 394 l 997 394 l 997 200 l 1339 200 l 1339 0 l 711 0 l 711 967 l 1346 967 l 1317 768 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 681 932 l 547 594 l 397 624 l 460 986 l 681 932 z "},"Ὲ":{"ha":1133,"x_min":114,"x_max":1106,"o":"m 1076 768 l 757 768 l 757 588 l 1038 588 l 1038 394 l 757 394 l 757 200 l 1099 200 l 1099 0 l 471 0 l 471 967 l 1106 967 l 1076 768 m 429 653 l 254 624 l 114 967 l 376 1021 l 429 653 z "},"Έ":{"ha":1119,"x_min":114,"x_max":1092,"o":"m 1063 768 l 743 768 l 743 588 l 1024 588 l 1024 394 l 743 394 l 743 200 l 1085 200 l 1085 0 l 457 0 l 457 967 l 1092 967 l 1063 768 m 429 967 l 289 624 l 114 653 l 167 1021 l 429 967 z "},"Ἠ":{"ha":1269,"x_min":114,"x_max":1210,"o":"m 924 390 l 703 390 l 703 0 l 417 0 l 417 967 l 703 967 l 703 610 l 924 610 l 924 967 l 1210 967 l 1210 0 l 924 0 l 924 390 m 242 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 z "},"Ἡ":{"ha":1269,"x_min":114,"x_max":1210,"o":"m 924 390 l 703 390 l 703 0 l 417 0 l 417 967 l 703 967 l 703 610 l 924 610 l 924 967 l 1210 967 l 1210 0 l 924 0 l 924 390 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 z "},"Ἢ":{"ha":1564,"x_min":114,"x_max":1504,"o":"m 1218 390 l 997 390 l 997 0 l 711 0 l 711 967 l 997 967 l 997 610 l 1218 610 l 1218 967 l 1504 967 l 1504 0 l 1218 0 l 1218 390 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 932 l 604 986 l 667 624 l 517 594 l 383 932 z "},"Ἣ":{"ha":1564,"x_min":114,"x_max":1504,"o":"m 1218 390 l 997 390 l 997 0 l 711 0 l 711 967 l 997 967 l 997 610 l 1218 610 l 1218 967 l 1504 967 l 1504 0 l 1218 0 l 1218 390 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 667 624 l 517 594 l 383 932 l 604 986 l 667 624 z "},"Ἤ":{"ha":1550,"x_min":114,"x_max":1490,"o":"m 1204 390 l 983 390 l 983 0 l 697 0 l 697 967 l 983 967 l 983 610 l 1204 610 l 1204 967 l 1490 967 l 1490 0 l 1204 0 l 1204 390 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 624 l 446 986 l 667 932 l 533 594 l 383 624 z "},"Ἥ":{"ha":1564,"x_min":114,"x_max":1504,"o":"m 1218 390 l 997 390 l 997 0 l 711 0 l 711 967 l 997 967 l 997 610 l 1218 610 l 1218 967 l 1504 967 l 1504 0 l 1218 0 l 1218 390 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 681 932 l 547 594 l 397 624 l 460 986 l 681 932 z "},"Ἦ":{"ha":1546,"x_min":114,"x_max":1486,"o":"m 1200 390 l 979 390 l 979 0 l 693 0 l 693 967 l 979 967 l 979 610 l 1200 610 l 1200 967 l 1486 967 l 1486 0 l 1200 0 l 1200 390 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 335 499 q 265 603 265 533 q 301 692 265 656 q 393 729 338 729 q 485 693 449 729 q 521 603 521 657 q 511 547 521 572 q 479 481 501 521 l 442 414 l 321 414 l 335 499 z "},"Ἧ":{"ha":1546,"x_min":114,"x_max":1486,"o":"m 1200 390 l 979 390 l 979 0 l 693 0 l 693 967 l 979 967 l 979 610 l 1200 610 l 1200 967 l 1486 967 l 1486 0 l 1200 0 l 1200 390 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 344 414 l 307 481 q 275 547 285 521 q 265 603 265 572 q 301 693 265 657 q 393 729 338 729 q 485 692 449 729 q 521 603 521 656 q 454 499 521 535 l 465 414 l 344 414 z "},"Ὴ":{"ha":1324,"x_min":114,"x_max":1264,"o":"m 978 390 l 757 390 l 757 0 l 471 0 l 471 967 l 757 967 l 757 610 l 978 610 l 978 967 l 1264 967 l 1264 0 l 978 0 l 978 390 m 429 653 l 254 624 l 114 967 l 376 1021 l 429 653 z "},"Ή":{"ha":1310,"x_min":114,"x_max":1250,"o":"m 964 390 l 743 390 l 743 0 l 457 0 l 457 967 l 743 967 l 743 610 l 964 610 l 964 967 l 1250 967 l 1250 0 l 964 0 l 964 390 m 429 967 l 289 624 l 114 653 l 167 1021 l 429 967 z "},"ῌ":{"ha":913,"x_min":60,"x_max":853,"o":"m 567 390 l 346 390 l 346 0 l 60 0 l 60 967 l 346 967 l 346 610 l 567 610 l 567 967 l 853 967 l 853 0 l 567 0 l 567 390 m 564 -294 q 416 -240 468 -294 q 364 -99 364 -186 l 364 -61 l 549 -61 l 549 -93 q 601 -149 549 -149 q 668 -129 632 -149 l 731 -240 q 564 -294 663 -294 z "},"ᾘ":{"ha":1269,"x_min":114,"x_max":1210,"o":"m 924 390 l 703 390 l 703 0 l 417 0 l 417 967 l 703 967 l 703 610 l 924 610 l 924 967 l 1210 967 l 1210 0 l 924 0 l 924 390 m 242 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 m 921 -294 q 773 -240 825 -294 q 721 -99 721 -186 l 721 -61 l 906 -61 l 906 -93 q 958 -149 906 -149 q 1025 -129 989 -149 l 1088 -240 q 921 -294 1019 -294 z "},"ᾙ":{"ha":1269,"x_min":114,"x_max":1210,"o":"m 924 390 l 703 390 l 703 0 l 417 0 l 417 967 l 703 967 l 703 610 l 924 610 l 924 967 l 1210 967 l 1210 0 l 924 0 l 924 390 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 921 -294 q 773 -240 825 -294 q 721 -99 721 -186 l 721 -61 l 906 -61 l 906 -93 q 958 -149 906 -149 q 1025 -129 989 -149 l 1088 -240 q 921 -294 1019 -294 z "},"ᾚ":{"ha":1564,"x_min":114,"x_max":1504,"o":"m 1218 390 l 997 390 l 997 0 l 711 0 l 711 967 l 997 967 l 997 610 l 1218 610 l 1218 967 l 1504 967 l 1504 0 l 1218 0 l 1218 390 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 932 l 604 986 l 667 624 l 517 594 l 383 932 m 1215 -294 q 1067 -240 1119 -294 q 1015 -99 1015 -186 l 1015 -61 l 1200 -61 l 1200 -93 q 1253 -149 1200 -149 q 1319 -129 1283 -149 l 1382 -240 q 1215 -294 1314 -294 z "},"ᾛ":{"ha":1564,"x_min":114,"x_max":1504,"o":"m 1218 390 l 997 390 l 997 0 l 711 0 l 711 967 l 997 967 l 997 610 l 1218 610 l 1218 967 l 1504 967 l 1504 0 l 1218 0 l 1218 390 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 667 624 l 517 594 l 383 932 l 604 986 l 667 624 m 1215 -294 q 1067 -240 1119 -294 q 1015 -99 1015 -186 l 1015 -61 l 1200 -61 l 1200 -93 q 1253 -149 1200 -149 q 1319 -129 1283 -149 l 1382 -240 q 1215 -294 1314 -294 z "},"ᾜ":{"ha":1550,"x_min":114,"x_max":1490,"o":"m 1204 390 l 983 390 l 983 0 l 697 0 l 697 967 l 983 967 l 983 610 l 1204 610 l 1204 967 l 1490 967 l 1490 0 l 1204 0 l 1204 390 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 624 l 446 986 l 667 932 l 533 594 l 383 624 m 1201 -294 q 1053 -240 1106 -294 q 1001 -99 1001 -186 l 1001 -61 l 1186 -61 l 1186 -93 q 1239 -149 1186 -149 q 1306 -129 1269 -149 l 1368 -240 q 1201 -294 1300 -294 z "},"ᾝ":{"ha":1564,"x_min":114,"x_max":1504,"o":"m 1218 390 l 997 390 l 997 0 l 711 0 l 711 967 l 997 967 l 997 610 l 1218 610 l 1218 967 l 1504 967 l 1504 0 l 1218 0 l 1218 390 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 681 932 l 547 594 l 397 624 l 460 986 l 681 932 m 1215 -294 q 1067 -240 1119 -294 q 1015 -99 1015 -186 l 1015 -61 l 1200 -61 l 1200 -93 q 1253 -149 1200 -149 q 1319 -129 1283 -149 l 1382 -240 q 1215 -294 1314 -294 z "},"ᾞ":{"ha":1546,"x_min":114,"x_max":1486,"o":"m 1200 390 l 979 390 l 979 0 l 693 0 l 693 967 l 979 967 l 979 610 l 1200 610 l 1200 967 l 1486 967 l 1486 0 l 1200 0 l 1200 390 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 335 499 q 265 603 265 533 q 301 692 265 656 q 393 729 338 729 q 485 693 449 729 q 521 603 521 657 q 511 547 521 572 q 479 481 501 521 l 442 414 l 321 414 l 335 499 m 1197 -294 q 1049 -240 1101 -294 q 997 -99 997 -186 l 997 -61 l 1182 -61 l 1182 -93 q 1235 -149 1182 -149 q 1301 -129 1265 -149 l 1364 -240 q 1197 -294 1296 -294 z "},"ᾟ":{"ha":1546,"x_min":114,"x_max":1486,"o":"m 1200 390 l 979 390 l 979 0 l 693 0 l 693 967 l 979 967 l 979 610 l 1200 610 l 1200 967 l 1486 967 l 1486 0 l 1200 0 l 1200 390 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 344 414 l 307 481 q 275 547 285 521 q 265 603 265 572 q 301 693 265 657 q 393 729 338 729 q 485 692 449 729 q 521 603 521 656 q 454 499 521 535 l 465 414 l 344 414 m 1197 -294 q 1049 -240 1101 -294 q 997 -99 997 -186 l 997 -61 l 1182 -61 l 1182 -93 q 1235 -149 1182 -149 q 1301 -129 1265 -149 l 1364 -240 q 1197 -294 1296 -294 z "},"Ἰ":{"ha":763,"x_min":114,"x_max":703,"o":"m 703 0 l 417 0 l 417 967 l 703 967 l 703 0 m 242 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 z "},"Ἱ":{"ha":763,"x_min":114,"x_max":703,"o":"m 703 0 l 417 0 l 417 967 l 703 967 l 703 0 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 z "},"Ἲ":{"ha":1057,"x_min":114,"x_max":997,"o":"m 997 0 l 711 0 l 711 967 l 997 967 l 997 0 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 932 l 604 986 l 667 624 l 517 594 l 383 932 z "},"Ἳ":{"ha":1057,"x_min":114,"x_max":997,"o":"m 997 0 l 711 0 l 711 967 l 997 967 l 997 0 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 667 624 l 517 594 l 383 932 l 604 986 l 667 624 z "},"Ἴ":{"ha":1043,"x_min":114,"x_max":983,"o":"m 983 0 l 697 0 l 697 967 l 983 967 l 983 0 m 167 760 q 114 864 114 800 q 150 953 114 917 q 242 990 186 990 q 333 954 297 990 q 369 864 369 918 q 361 810 369 835 q 332 742 353 785 l 263 601 l 132 601 l 167 760 m 383 624 l 446 986 l 667 932 l 533 594 l 383 624 z "},"Ἵ":{"ha":1057,"x_min":114,"x_max":997,"o":"m 997 0 l 711 0 l 711 967 l 997 967 l 997 0 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 681 932 l 547 594 l 397 624 l 460 986 l 681 932 z "},"Ἶ":{"ha":1039,"x_min":114,"x_max":979,"o":"m 979 0 l 693 0 l 693 967 l 979 967 l 979 0 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 335 499 q 265 603 265 533 q 301 692 265 656 q 393 729 338 729 q 485 693 449 729 q 521 603 521 657 q 511 547 521 572 q 479 481 501 521 l 442 414 l 321 414 l 335 499 z "},"Ἷ":{"ha":1039,"x_min":114,"x_max":979,"o":"m 979 0 l 693 0 l 693 967 l 979 967 l 979 0 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 344 414 l 307 481 q 275 547 285 521 q 265 603 265 572 q 301 693 265 657 q 393 729 338 729 q 485 692 449 729 q 521 603 521 656 q 454 499 521 535 l 465 414 l 344 414 z "},"Ὶ":{"ha":817,"x_min":114,"x_max":757,"o":"m 757 0 l 471 0 l 471 967 l 757 967 l 757 0 m 429 653 l 254 624 l 114 967 l 376 1021 l 429 653 z "},"Ί":{"ha":803,"x_min":114,"x_max":743,"o":"m 743 0 l 457 0 l 457 967 l 743 967 l 743 0 m 429 967 l 289 624 l 114 653 l 167 1021 l 429 967 z "},"Ῐ":{"ha":406,"x_min":-54,"x_max":460,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 m 203 1036 q 21 1112 86 1036 q -54 1294 -44 1188 l 89 1318 q 130 1249 101 1276 q 203 1222 158 1222 q 276 1249 247 1222 q 317 1318 304 1276 l 460 1294 q 385 1112 450 1188 q 203 1036 319 1036 z "},"Ῑ":{"ha":406,"x_min":-24,"x_max":428,"o":"m 346 0 l 60 0 l 60 967 l 346 967 l 346 0 z "},"Ὀ":{"ha":1288,"x_min":100,"x_max":1260,"o":"m 228 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 m 808 994 q 1142 860 1025 994 q 1260 485 1260 726 q 1207 213 1260 328 q 1053 35 1154 97 q 808 -28 951 -28 q 474 108 592 -28 q 357 485 357 243 q 410 756 357 642 q 564 933 463 871 q 808 994 665 994 m 808 792 q 690 722 726 792 q 654 485 654 651 q 690 247 654 318 q 808 175 726 175 q 927 246 892 175 q 963 485 963 317 q 926 722 963 651 q 808 792 890 792 z "},"Ὁ":{"ha":1326,"x_min":100,"x_max":1299,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 847 994 q 1181 860 1064 994 q 1299 485 1299 726 q 1246 213 1299 328 q 1092 35 1193 97 q 847 -28 990 -28 q 513 108 631 -28 q 396 485 396 243 q 449 756 396 642 q 603 933 501 871 q 847 994 704 994 m 847 792 q 729 722 765 792 q 693 485 693 651 q 729 247 693 318 q 847 175 765 175 q 966 246 931 175 q 1001 485 1001 317 q 965 722 1001 651 q 847 792 929 792 z "},"Ὂ":{"ha":1639,"x_min":100,"x_max":1611,"o":"m 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 m 369 932 l 590 986 l 653 624 l 503 594 l 369 932 m 1160 994 q 1494 860 1376 994 q 1611 485 1611 726 q 1558 213 1611 328 q 1404 35 1506 97 q 1160 -28 1303 -28 q 826 108 943 -28 q 708 485 708 243 q 761 756 708 642 q 915 933 814 871 q 1160 994 1017 994 m 1160 792 q 1042 722 1078 792 q 1006 485 1006 651 q 1042 247 1006 318 q 1160 175 1078 175 q 1278 246 1243 175 q 1314 485 1314 317 q 1278 722 1314 651 q 1160 792 1242 792 z "},"Ὃ":{"ha":1639,"x_min":100,"x_max":1611,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 653 624 l 503 594 l 369 932 l 590 986 l 653 624 m 1160 994 q 1494 860 1376 994 q 1611 485 1611 726 q 1558 213 1611 328 q 1404 35 1506 97 q 1160 -28 1303 -28 q 826 108 943 -28 q 708 485 708 243 q 761 756 708 642 q 915 933 814 871 q 1160 994 1017 994 m 1160 792 q 1042 722 1078 792 q 1006 485 1006 651 q 1042 247 1006 318 q 1160 175 1078 175 q 1278 246 1243 175 q 1314 485 1314 317 q 1278 722 1314 651 q 1160 792 1242 792 z "},"Ὄ":{"ha":1513,"x_min":100,"x_max":1485,"o":"m 1033 994 q 1367 860 1250 994 q 1485 485 1485 726 q 1432 213 1485 328 q 1278 35 1379 97 q 1033 -28 1176 -28 q 699 108 817 -28 q 582 485 582 243 q 635 756 582 642 q 789 933 688 871 q 1033 994 890 994 m 1033 792 q 915 722 951 792 q 879 485 879 651 q 915 247 879 318 q 1033 175 951 175 q 1152 246 1117 175 q 1188 485 1188 317 q 1151 722 1188 651 q 1033 792 1115 792 m 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 m 369 624 l 432 986 l 653 932 l 519 594 l 369 624 z "},"Ὅ":{"ha":1526,"x_min":100,"x_max":1499,"o":"m 1047 994 q 1381 860 1264 994 q 1499 485 1499 726 q 1446 213 1499 328 q 1292 35 1393 97 q 1047 -28 1190 -28 q 713 108 831 -28 q 596 485 596 243 q 649 756 596 642 q 803 933 701 871 q 1047 994 904 994 m 1047 792 q 929 722 965 792 q 893 485 893 651 q 929 247 893 318 q 1047 175 965 175 q 1166 246 1131 175 q 1201 485 1201 317 q 1165 722 1201 651 q 1047 792 1129 792 m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 667 932 l 533 594 l 383 624 l 446 986 l 667 932 z "},"Ὸ":{"ha":1360,"x_min":100,"x_max":1332,"o":"m 415 653 l 240 624 l 100 967 l 363 1021 l 415 653 m 881 994 q 1215 860 1097 994 q 1332 485 1332 726 q 1279 213 1332 328 q 1125 35 1226 97 q 881 -28 1024 -28 q 547 108 664 -28 q 429 485 429 243 q 482 756 429 642 q 636 933 535 871 q 881 994 738 994 m 881 792 q 763 722 799 792 q 726 485 726 651 q 763 247 726 318 q 881 175 799 175 q 999 246 964 175 q 1035 485 1035 317 q 999 722 1035 651 q 881 792 963 792 z "},"Ό":{"ha":1272,"x_min":100,"x_max":1244,"o":"m 793 994 q 1127 860 1010 994 q 1244 485 1244 726 q 1192 213 1244 328 q 1038 35 1139 97 q 793 -28 936 -28 q 459 108 576 -28 q 342 485 342 243 q 394 756 342 642 q 549 933 447 871 q 793 994 650 994 m 793 792 q 675 722 711 792 q 639 485 639 651 q 675 247 639 318 q 793 175 711 175 q 912 246 876 175 q 947 485 947 317 q 911 722 947 651 q 793 792 875 792 m 415 967 l 275 624 l 100 653 l 153 1021 l 415 967 z "},"Ῥ":{"ha":1219,"x_min":114,"x_max":1199,"o":"m 779 967 q 1088 884 978 967 q 1199 642 1199 801 q 1094 389 1199 476 q 811 301 989 301 l 717 301 l 717 0 l 431 0 l 431 967 l 779 967 m 783 503 q 907 642 907 503 q 775 768 907 768 l 717 768 l 717 503 l 783 503 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 z "},"Ὑ":{"ha":1292,"x_min":114,"x_max":1313,"o":"m 1004 357 l 1004 0 l 718 0 l 718 356 l 410 967 l 722 967 l 865 572 l 1010 967 l 1313 967 l 1004 357 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 z "},"Ὓ":{"ha":1544,"x_min":114,"x_max":1565,"o":"m 1257 357 l 1257 0 l 971 0 l 971 356 l 663 967 l 975 967 l 1118 572 l 1263 967 l 1565 967 l 1257 357 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 667 624 l 517 594 l 383 932 l 604 986 l 667 624 z "},"Ὕ":{"ha":1572,"x_min":114,"x_max":1593,"o":"m 1285 357 l 1285 0 l 999 0 l 999 356 l 690 967 l 1003 967 l 1146 572 l 1290 967 l 1593 967 l 1285 357 m 242 990 q 333 953 297 990 q 369 864 369 917 q 317 760 369 800 l 351 601 l 221 601 l 151 742 q 122 810 131 785 q 114 864 114 835 q 150 954 114 918 q 242 990 186 990 m 681 932 l 547 594 l 397 624 l 460 986 l 681 932 z "},"Ὗ":{"ha":1554,"x_min":114,"x_max":1575,"o":"m 1267 357 l 1267 0 l 981 0 l 981 356 l 672 967 l 985 967 l 1128 572 l 1272 967 l 1575 967 l 1267 357 m 474 742 q 424 749 444 742 q 382 771 404 756 q 344 795 356 789 q 317 801 332 801 q 276 788 292 801 q 243 742 261 774 l 114 804 q 194 940 143 886 q 310 993 244 993 q 362 986 340 993 q 407 963 383 979 q 444 940 431 946 q 471 933 457 933 q 510 947 494 933 q 543 993 525 961 l 672 931 q 592 794 643 847 q 474 742 540 742 m 344 414 l 307 481 q 275 547 285 521 q 265 603 265 572 q 301 693 265 657 q 393 729 338 729 q 485 692 449 729 q 521 603 521 656 q 454 499 521 535 l 465 414 l 344 414 z "},"Ὺ":{"ha":1290,"x_min":114,"x_max":1311,"o":"m 1003 357 l 1003 0 l 717 0 l 717 356 l 408 967 l 721 967 l 864 572 l 1008 967 l 1311 967 l 1003 357 m 429 653 l 254 624 l 114 967 l 376 1021 l 429 653 z "},"Ύ":{"ha":1318,"x_min":114,"x_max":1339,"o":"m 1031 357 l 1031 0 l 744 0 l 744 356 l 436 967 l 749 967 l 892 572 l 1036 967 l 1339 967 l 1031 357 m 429 967 l 289 624 l 114 653 l 167 1021 l 429 967 z "},"Ῠ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 m 431 1036 q 249 1112 314 1036 q 174 1294 183 1188 l 317 1318 q 358 1249 329 1276 q 431 1222 386 1222 q 503 1249 475 1222 q 544 1318 532 1276 l 688 1294 q 613 1112 678 1188 q 431 1036 547 1036 z "},"Ῡ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Ὠ":{"ha":1290,"x_min":100,"x_max":1263,"o":"m 228 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 m 811 994 q 1053 933 951 994 q 1209 770 1156 872 q 1263 544 1263 668 q 1213 338 1263 426 q 1074 197 1164 249 l 1233 197 l 1233 0 l 850 0 l 850 183 q 928 254 904 210 q 959 361 953 299 q 965 544 965 424 q 811 792 965 792 q 657 544 657 792 q 663 362 657 424 q 694 256 669 300 q 772 183 718 211 l 772 0 l 389 0 l 389 197 l 549 197 q 409 338 458 249 q 360 544 360 426 q 413 770 360 668 q 569 933 467 872 q 811 994 671 994 z "},"Ὡ":{"ha":1342,"x_min":100,"x_max":1314,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 863 994 q 1105 933 1003 994 q 1260 770 1207 872 q 1314 544 1314 668 q 1265 338 1314 426 q 1125 197 1215 249 l 1285 197 l 1285 0 l 901 0 l 901 183 q 980 254 956 210 q 1010 361 1004 299 q 1017 544 1017 424 q 863 792 1017 792 q 708 544 708 792 q 715 362 708 424 q 745 256 721 300 q 824 183 769 211 l 824 0 l 440 0 l 440 197 l 600 197 q 460 338 510 249 q 411 544 411 426 q 465 770 411 668 q 620 933 518 872 q 863 994 722 994 z "},"Ὢ":{"ha":1639,"x_min":100,"x_max":1611,"o":"m 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 m 369 932 l 590 986 l 653 624 l 503 594 l 369 932 m 1160 994 q 1402 933 1300 994 q 1558 770 1504 872 q 1611 544 1611 668 q 1562 338 1611 426 q 1422 197 1513 249 l 1582 197 l 1582 0 l 1199 0 l 1199 183 q 1277 254 1253 210 q 1308 361 1301 299 q 1314 544 1314 424 q 1160 792 1314 792 q 1006 544 1006 792 q 1012 362 1006 424 q 1042 256 1018 300 q 1121 183 1067 211 l 1121 0 l 738 0 l 738 197 l 897 197 q 758 338 807 249 q 708 544 708 426 q 762 770 708 668 q 917 933 815 872 q 1160 994 1019 994 z "},"Ὣ":{"ha":1611,"x_min":100,"x_max":1583,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 653 624 l 503 594 l 369 932 l 590 986 l 653 624 m 1132 994 q 1374 933 1272 994 q 1530 770 1476 872 q 1583 544 1583 668 q 1534 338 1583 426 q 1394 197 1485 249 l 1554 197 l 1554 0 l 1171 0 l 1171 183 q 1249 254 1225 210 q 1280 361 1274 299 q 1286 544 1286 424 q 1132 792 1286 792 q 978 544 978 792 q 984 362 978 424 q 1015 256 990 300 q 1093 183 1039 211 l 1093 0 l 710 0 l 710 197 l 869 197 q 730 338 779 249 q 681 544 681 426 q 734 770 681 668 q 890 933 788 872 q 1132 994 992 994 z "},"Ὤ":{"ha":1576,"x_min":100,"x_max":1549,"o":"m 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 m 369 624 l 432 986 l 653 932 l 519 594 l 369 624 m 1097 994 q 1340 933 1238 994 q 1495 770 1442 872 q 1549 544 1549 668 q 1499 338 1549 426 q 1360 197 1450 249 l 1519 197 l 1519 0 l 1136 0 l 1136 183 q 1215 254 1190 210 q 1245 361 1239 299 q 1251 544 1251 424 q 1097 792 1251 792 q 943 544 943 792 q 949 362 943 424 q 980 256 956 300 q 1058 183 1004 211 l 1058 0 l 675 0 l 675 197 l 835 197 q 695 338 744 249 q 646 544 646 426 q 699 770 646 668 q 855 933 753 872 q 1097 994 957 994 z "},"Ὥ":{"ha":1590,"x_min":100,"x_max":1563,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 667 932 l 533 594 l 383 624 l 446 986 l 667 932 m 1111 994 q 1353 933 1251 994 q 1509 770 1456 872 q 1563 544 1563 668 q 1513 338 1563 426 q 1374 197 1464 249 l 1533 197 l 1533 0 l 1150 0 l 1150 183 q 1228 254 1204 210 q 1259 361 1253 299 q 1265 544 1265 424 q 1111 792 1265 792 q 957 544 957 792 q 963 362 957 424 q 994 256 969 300 q 1072 183 1018 211 l 1072 0 l 689 0 l 689 197 l 849 197 q 709 338 758 249 q 660 544 660 426 q 713 770 660 668 q 869 933 767 872 q 1111 994 971 994 z "},"Ὦ":{"ha":1492,"x_min":100,"x_max":1464,"o":"m 460 742 q 410 749 431 742 q 368 771 390 756 q 330 795 342 789 q 303 801 318 801 q 263 788 278 801 q 229 742 247 774 l 100 804 q 180 940 129 886 q 296 993 231 993 q 348 986 326 993 q 393 963 369 979 q 430 940 417 946 q 457 933 443 933 q 496 947 481 933 q 529 993 511 961 l 658 931 q 578 794 629 847 q 460 742 526 742 m 321 499 q 251 603 251 533 q 288 692 251 656 q 379 729 324 729 q 471 693 435 729 q 507 603 507 657 q 497 547 507 572 q 465 481 488 521 l 428 414 l 307 414 l 321 499 m 1013 994 q 1255 933 1153 994 q 1410 770 1357 872 q 1464 544 1464 668 q 1415 338 1464 426 q 1275 197 1365 249 l 1435 197 l 1435 0 l 1051 0 l 1051 183 q 1130 254 1106 210 q 1160 361 1154 299 q 1167 544 1167 424 q 1013 792 1167 792 q 858 544 858 792 q 865 362 858 424 q 895 256 871 300 q 974 183 919 211 l 974 0 l 590 0 l 590 197 l 750 197 q 610 338 660 249 q 561 544 561 426 q 615 770 561 668 q 770 933 668 872 q 1013 994 872 994 z "},"Ὧ":{"ha":1492,"x_min":100,"x_max":1464,"o":"m 460 742 q 410 749 431 742 q 368 771 390 756 q 330 795 342 789 q 303 801 318 801 q 263 788 278 801 q 229 742 247 774 l 100 804 q 180 940 129 886 q 296 993 231 993 q 348 986 326 993 q 393 963 369 979 q 430 940 417 946 q 457 933 443 933 q 496 947 481 933 q 529 993 511 961 l 658 931 q 578 794 629 847 q 460 742 526 742 m 331 414 l 293 481 q 261 547 271 521 q 251 603 251 572 q 288 693 251 657 q 379 729 324 729 q 471 692 435 729 q 507 603 507 656 q 440 499 507 535 l 451 414 l 331 414 m 1013 994 q 1255 933 1153 994 q 1410 770 1357 872 q 1464 544 1464 668 q 1415 338 1464 426 q 1275 197 1365 249 l 1435 197 l 1435 0 l 1051 0 l 1051 183 q 1130 254 1106 210 q 1160 361 1154 299 q 1167 544 1167 424 q 1013 792 1167 792 q 858 544 858 792 q 865 362 858 424 q 895 256 871 300 q 974 183 919 211 l 974 0 l 590 0 l 590 197 l 750 197 q 610 338 660 249 q 561 544 561 426 q 615 770 561 668 q 770 933 668 872 q 1013 994 872 994 z "},"Ὼ":{"ha":1360,"x_min":100,"x_max":1332,"o":"m 415 653 l 240 624 l 100 967 l 363 1021 l 415 653 m 881 994 q 1123 933 1021 994 q 1278 770 1225 872 q 1332 544 1332 668 q 1283 338 1332 426 q 1143 197 1233 249 l 1303 197 l 1303 0 l 919 0 l 919 183 q 998 254 974 210 q 1028 361 1022 299 q 1035 544 1035 424 q 881 792 1035 792 q 726 544 726 792 q 733 362 726 424 q 763 256 739 300 q 842 183 788 211 l 842 0 l 458 0 l 458 197 l 618 197 q 478 338 528 249 q 429 544 429 426 q 483 770 429 668 q 638 933 536 872 q 881 994 740 994 z "},"Ώ":{"ha":1275,"x_min":100,"x_max":1247,"o":"m 415 967 l 275 624 l 100 653 l 153 1021 l 415 967 m 796 994 q 1038 933 936 994 q 1194 770 1140 872 q 1247 544 1247 668 q 1198 338 1247 426 q 1058 197 1149 249 l 1218 197 l 1218 0 l 835 0 l 835 183 q 913 254 889 210 q 944 361 938 299 q 950 544 950 424 q 796 792 950 792 q 642 544 642 792 q 648 362 642 424 q 678 256 654 300 q 757 183 703 211 l 757 0 l 374 0 l 374 197 l 533 197 q 394 338 443 249 q 344 544 344 426 q 398 770 344 668 q 553 933 451 872 q 796 994 656 994 z "},"ῼ":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 722 933 619 994 q 877 770 824 872 q 931 544 931 668 q 881 338 931 426 q 742 197 832 249 l 901 197 l 901 0 l 518 0 l 518 183 q 597 254 572 210 q 627 361 621 299 q 633 544 633 424 q 479 792 633 792 q 325 544 325 792 q 331 362 325 424 q 362 256 338 300 q 440 183 386 211 l 440 0 l 57 0 l 57 197 l 217 197 q 77 338 126 249 q 28 544 28 426 q 81 770 28 668 q 237 933 135 872 q 479 994 339 994 m 586 -294 q 438 -240 490 -294 q 386 -99 386 -186 l 386 -61 l 571 -61 l 571 -93 q 624 -149 571 -149 q 690 -129 654 -149 l 753 -240 q 586 -294 685 -294 z "},"ᾨ":{"ha":1290,"x_min":100,"x_max":1263,"o":"m 228 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 m 811 994 q 1053 933 951 994 q 1209 770 1156 872 q 1263 544 1263 668 q 1213 338 1263 426 q 1074 197 1164 249 l 1233 197 l 1233 0 l 850 0 l 850 183 q 928 254 904 210 q 959 361 953 299 q 965 544 965 424 q 811 792 965 792 q 657 544 657 792 q 663 362 657 424 q 694 256 669 300 q 772 183 718 211 l 772 0 l 389 0 l 389 197 l 549 197 q 409 338 458 249 q 360 544 360 426 q 413 770 360 668 q 569 933 467 872 q 811 994 671 994 m 918 -294 q 770 -240 822 -294 q 718 -99 718 -186 l 718 -61 l 903 -61 l 903 -93 q 956 -149 903 -149 q 1022 -129 986 -149 l 1085 -240 q 918 -294 1017 -294 z "},"ᾩ":{"ha":1342,"x_min":100,"x_max":1314,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 863 994 q 1105 933 1003 994 q 1260 770 1207 872 q 1314 544 1314 668 q 1265 338 1314 426 q 1125 197 1215 249 l 1285 197 l 1285 0 l 901 0 l 901 183 q 980 254 956 210 q 1010 361 1004 299 q 1017 544 1017 424 q 863 792 1017 792 q 708 544 708 792 q 715 362 708 424 q 745 256 721 300 q 824 183 769 211 l 824 0 l 440 0 l 440 197 l 600 197 q 460 338 510 249 q 411 544 411 426 q 465 770 411 668 q 620 933 518 872 q 863 994 722 994 m 969 -294 q 822 -240 874 -294 q 769 -99 769 -186 l 769 -61 l 954 -61 l 954 -93 q 1007 -149 954 -149 q 1074 -129 1038 -149 l 1136 -240 q 969 -294 1068 -294 z "},"ᾪ":{"ha":1639,"x_min":100,"x_max":1611,"o":"m 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 m 369 932 l 590 986 l 653 624 l 503 594 l 369 932 m 1160 994 q 1402 933 1300 994 q 1558 770 1504 872 q 1611 544 1611 668 q 1562 338 1611 426 q 1422 197 1513 249 l 1582 197 l 1582 0 l 1199 0 l 1199 183 q 1277 254 1253 210 q 1308 361 1301 299 q 1314 544 1314 424 q 1160 792 1314 792 q 1006 544 1006 792 q 1012 362 1006 424 q 1042 256 1018 300 q 1121 183 1067 211 l 1121 0 l 738 0 l 738 197 l 897 197 q 758 338 807 249 q 708 544 708 426 q 762 770 708 668 q 917 933 815 872 q 1160 994 1019 994 m 1267 -294 q 1119 -240 1171 -294 q 1067 -99 1067 -186 l 1067 -61 l 1251 -61 l 1251 -93 q 1304 -149 1251 -149 q 1371 -129 1335 -149 l 1433 -240 q 1267 -294 1365 -294 z "},"ᾫ":{"ha":1611,"x_min":100,"x_max":1583,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 653 624 l 503 594 l 369 932 l 590 986 l 653 624 m 1132 994 q 1374 933 1272 994 q 1530 770 1476 872 q 1583 544 1583 668 q 1534 338 1583 426 q 1394 197 1485 249 l 1554 197 l 1554 0 l 1171 0 l 1171 183 q 1249 254 1225 210 q 1280 361 1274 299 q 1286 544 1286 424 q 1132 792 1286 792 q 978 544 978 792 q 984 362 978 424 q 1015 256 990 300 q 1093 183 1039 211 l 1093 0 l 710 0 l 710 197 l 869 197 q 730 338 779 249 q 681 544 681 426 q 734 770 681 668 q 890 933 788 872 q 1132 994 992 994 m 1239 -294 q 1091 -240 1143 -294 q 1039 -99 1039 -186 l 1039 -61 l 1224 -61 l 1224 -93 q 1276 -149 1224 -149 q 1343 -129 1307 -149 l 1406 -240 q 1239 -294 1338 -294 z "},"ᾬ":{"ha":1576,"x_min":100,"x_max":1549,"o":"m 153 760 q 100 864 100 800 q 136 953 100 917 q 228 990 172 990 q 319 954 283 990 q 356 864 356 918 q 347 810 356 835 q 318 742 339 785 l 249 601 l 118 601 l 153 760 m 369 624 l 432 986 l 653 932 l 519 594 l 369 624 m 1097 994 q 1340 933 1238 994 q 1495 770 1442 872 q 1549 544 1549 668 q 1499 338 1549 426 q 1360 197 1450 249 l 1519 197 l 1519 0 l 1136 0 l 1136 183 q 1215 254 1190 210 q 1245 361 1239 299 q 1251 544 1251 424 q 1097 792 1251 792 q 943 544 943 792 q 949 362 943 424 q 980 256 956 300 q 1058 183 1004 211 l 1058 0 l 675 0 l 675 197 l 835 197 q 695 338 744 249 q 646 544 646 426 q 699 770 646 668 q 855 933 753 872 q 1097 994 957 994 m 1204 -294 q 1056 -240 1108 -294 q 1004 -99 1004 -186 l 1004 -61 l 1189 -61 l 1189 -93 q 1242 -149 1189 -149 q 1308 -129 1272 -149 l 1371 -240 q 1204 -294 1303 -294 z "},"ᾭ":{"ha":1590,"x_min":100,"x_max":1563,"o":"m 228 990 q 319 953 283 990 q 356 864 356 917 q 303 760 356 800 l 338 601 l 207 601 l 138 742 q 108 810 117 785 q 100 864 100 835 q 136 954 100 918 q 228 990 172 990 m 667 932 l 533 594 l 383 624 l 446 986 l 667 932 m 1111 994 q 1353 933 1251 994 q 1509 770 1456 872 q 1563 544 1563 668 q 1513 338 1563 426 q 1374 197 1464 249 l 1533 197 l 1533 0 l 1150 0 l 1150 183 q 1228 254 1204 210 q 1259 361 1253 299 q 1265 544 1265 424 q 1111 792 1265 792 q 957 544 957 792 q 963 362 957 424 q 994 256 969 300 q 1072 183 1018 211 l 1072 0 l 689 0 l 689 197 l 849 197 q 709 338 758 249 q 660 544 660 426 q 713 770 660 668 q 869 933 767 872 q 1111 994 971 994 m 1218 -294 q 1070 -240 1122 -294 q 1018 -99 1018 -186 l 1018 -61 l 1203 -61 l 1203 -93 q 1256 -149 1203 -149 q 1322 -129 1286 -149 l 1385 -240 q 1218 -294 1317 -294 z "},"ᾮ":{"ha":1492,"x_min":100,"x_max":1464,"o":"m 460 742 q 410 749 431 742 q 368 771 390 756 q 330 795 342 789 q 303 801 318 801 q 263 788 278 801 q 229 742 247 774 l 100 804 q 180 940 129 886 q 296 993 231 993 q 348 986 326 993 q 393 963 369 979 q 430 940 417 946 q 457 933 443 933 q 496 947 481 933 q 529 993 511 961 l 658 931 q 578 794 629 847 q 460 742 526 742 m 321 499 q 251 603 251 533 q 288 692 251 656 q 379 729 324 729 q 471 693 435 729 q 507 603 507 657 q 497 547 507 572 q 465 481 488 521 l 428 414 l 307 414 l 321 499 m 1013 994 q 1255 933 1153 994 q 1410 770 1357 872 q 1464 544 1464 668 q 1415 338 1464 426 q 1275 197 1365 249 l 1435 197 l 1435 0 l 1051 0 l 1051 183 q 1130 254 1106 210 q 1160 361 1154 299 q 1167 544 1167 424 q 1013 792 1167 792 q 858 544 858 792 q 865 362 858 424 q 895 256 871 300 q 974 183 919 211 l 974 0 l 590 0 l 590 197 l 750 197 q 610 338 660 249 q 561 544 561 426 q 615 770 561 668 q 770 933 668 872 q 1013 994 872 994 m 1119 -294 q 972 -240 1024 -294 q 919 -99 919 -186 l 919 -61 l 1104 -61 l 1104 -93 q 1157 -149 1104 -149 q 1224 -129 1188 -149 l 1286 -240 q 1119 -294 1218 -294 z "},"ᾯ":{"ha":1492,"x_min":100,"x_max":1464,"o":"m 460 742 q 410 749 431 742 q 368 771 390 756 q 330 795 342 789 q 303 801 318 801 q 263 788 278 801 q 229 742 247 774 l 100 804 q 180 940 129 886 q 296 993 231 993 q 348 986 326 993 q 393 963 369 979 q 430 940 417 946 q 457 933 443 933 q 496 947 481 933 q 529 993 511 961 l 658 931 q 578 794 629 847 q 460 742 526 742 m 331 414 l 293 481 q 261 547 271 521 q 251 603 251 572 q 288 693 251 657 q 379 729 324 729 q 471 692 435 729 q 507 603 507 656 q 440 499 507 535 l 451 414 l 331 414 m 1013 994 q 1255 933 1153 994 q 1410 770 1357 872 q 1464 544 1464 668 q 1415 338 1464 426 q 1275 197 1365 249 l 1435 197 l 1435 0 l 1051 0 l 1051 183 q 1130 254 1106 210 q 1160 361 1154 299 q 1167 544 1167 424 q 1013 792 1167 792 q 858 544 858 792 q 865 362 858 424 q 895 256 871 300 q 974 183 919 211 l 974 0 l 590 0 l 590 197 l 750 197 q 610 338 660 249 q 561 544 561 426 q 615 770 561 668 q 770 933 668 872 q 1013 994 872 994 m 1119 -294 q 972 -240 1024 -294 q 919 -99 919 -186 l 919 -61 l 1104 -61 l 1104 -93 q 1157 -149 1104 -149 q 1224 -129 1188 -149 l 1286 -240 q 1119 -294 1218 -294 z "},"α":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 z "},"β":{"ha":847,"x_min":58,"x_max":828,"o":"m 564 564 q 750 493 672 553 q 828 292 828 433 q 788 126 828 199 q 676 13 747 54 q 511 -28 604 -28 q 321 26 404 -28 l 321 -278 l 58 -315 l 58 763 q 103 923 58 856 q 228 1026 149 990 q 408 1061 308 1061 q 592 1026 515 1061 q 708 931 668 992 q 747 794 747 871 q 702 647 747 707 q 564 564 657 588 m 426 179 q 518 213 485 179 q 551 319 551 247 q 513 432 551 401 q 413 463 475 463 l 368 463 l 382 642 l 394 642 q 459 674 438 642 q 481 767 481 706 q 403 874 481 874 q 342 847 364 874 q 321 765 321 819 l 321 199 q 426 179 363 179 z "},"γ":{"ha":726,"x_min":-35,"x_max":747,"o":"m 211 769 q 365 268 322 644 l 476 768 l 747 708 l 496 43 q 464 -60 474 -15 q 454 -154 454 -106 q 468 -292 454 -214 l 249 -315 q 214 -226 225 -267 q 203 -144 203 -186 q 236 18 203 -76 q 110 415 186 235 q -35 686 35 596 l 211 769 z "},"δ":{"ha":800,"x_min":24,"x_max":776,"o":"m 478 735 q 707 585 638 672 q 776 349 776 497 q 730 146 776 231 q 599 17 683 61 q 400 -28 514 -28 q 124 69 224 -28 q 24 336 24 165 q 238 635 24 538 q 125 728 153 683 q 97 836 97 774 q 178 998 97 935 q 428 1061 260 1061 q 585 1036 514 1061 q 704 971 657 1011 l 583 832 q 443 876 513 876 q 356 828 356 876 q 363 797 356 810 q 397 771 371 785 q 478 735 422 757 m 399 169 q 471 212 447 169 q 494 350 494 254 q 486 452 494 417 q 452 514 478 488 q 372 568 426 540 q 316 476 329 525 q 303 350 303 426 q 326 212 303 254 q 399 169 349 169 z "},"ε":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 z "},"ζ":{"ha":608,"x_min":14,"x_max":636,"o":"m 636 897 q 367 606 439 731 q 296 368 296 481 q 329 265 296 303 q 451 188 363 226 q 584 101 542 147 q 626 -29 626 54 q 560 -189 626 -121 q 354 -315 494 -257 l 256 -158 q 326 -106 306 -126 q 347 -56 347 -85 q 330 -12 347 -29 q 254 32 313 4 q 110 117 161 76 q 37 213 60 157 q 14 356 14 268 q 110 615 14 483 q 403 872 207 747 q 322 851 372 860 q 226 842 271 842 l 39 842 l 68 1033 l 600 1033 l 636 897 z "},"η":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 z "},"θ":{"ha":772,"x_min":24,"x_max":749,"o":"m 386 1061 q 656 925 563 1061 q 749 518 749 789 q 656 108 749 244 q 386 -28 564 -28 q 116 108 208 -28 q 24 518 24 244 q 117 925 24 789 q 386 1061 210 1061 m 386 869 q 326 849 349 869 q 290 768 303 828 q 275 593 278 708 l 494 593 q 480 768 492 708 q 446 849 468 828 q 386 869 424 869 m 386 164 q 444 186 422 164 q 478 269 465 208 q 494 446 492 331 l 275 446 q 292 269 278 331 q 328 186 306 208 q 386 164 350 164 z "},"ι":{"ha":388,"x_min":49,"x_max":381,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 z "},"κ":{"ha":789,"x_min":38,"x_max":810,"o":"m 629 397 l 756 219 q 779 194 767 203 q 810 179 792 185 l 715 -28 q 583 10 638 -21 q 490 117 529 42 l 344 390 l 557 767 l 796 671 l 629 397 m 292 761 q 327 655 315 717 q 339 485 339 593 l 339 0 l 64 0 l 64 551 q 56 644 64 594 q 38 728 49 694 l 292 761 z "},"λ":{"ha":768,"x_min":0,"x_max":796,"o":"m 111 1058 q 340 1006 253 1040 q 487 896 428 971 q 578 686 546 821 q 685 281 643 407 q 796 56 726 156 l 528 -28 q 435 201 467 82 q 374 529 403 319 l 274 -28 l 0 33 l 219 742 l 308 742 q 260 814 286 789 q 194 853 235 839 q 81 876 154 867 l 111 1058 z "},"μ":{"ha":804,"x_min":58,"x_max":767,"o":"m 515 -28 q 498 17 504 -4 q 485 79 492 39 q 358 -8 429 -8 q 295 3 324 -8 q 242 44 267 14 q 298 -58 281 -14 q 315 -171 315 -101 l 315 -287 l 58 -312 l 58 742 l 333 742 l 333 240 q 379 181 333 181 q 420 196 399 181 q 460 242 442 211 l 460 742 l 735 742 l 735 256 q 767 0 735 110 l 515 -28 z "},"ν":{"ha":726,"x_min":-35,"x_max":747,"o":"m 211 769 q 303 569 263 711 q 361 217 343 426 l 482 768 l 747 708 l 515 0 l 197 0 q -35 686 97 554 l 211 769 z "},"ξ":{"ha":636,"x_min":21,"x_max":671,"o":"m 392 1061 q 547 1040 481 1061 q 671 974 614 1018 l 556 831 q 494 863 521 853 q 433 874 468 874 q 374 850 396 874 q 353 785 353 826 q 378 713 353 739 q 450 688 403 688 l 529 688 l 504 515 l 449 515 q 343 479 383 515 q 303 382 303 443 q 321 302 303 333 q 379 246 339 271 q 496 188 419 221 q 628 101 586 147 q 671 -29 671 54 q 605 -189 671 -121 q 399 -315 539 -257 l 300 -158 q 371 -106 350 -126 q 392 -56 392 -85 q 374 -12 392 -29 q 299 32 357 4 q 144 113 199 78 q 55 206 89 149 q 21 356 21 264 q 251 618 21 567 q 76 826 76 668 q 118 948 76 894 q 232 1031 160 1001 q 392 1061 304 1061 z "},"ο":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"π":{"ha":864,"x_min":-14,"x_max":840,"o":"m 771 542 l 771 281 q 783 209 771 233 q 828 168 796 185 l 750 -28 q 561 55 626 -10 q 496 244 496 119 l 496 542 l 386 542 l 386 0 l 117 0 l 117 542 q 35 526 69 538 l -14 703 q 81 733 29 724 q 225 742 132 742 l 840 742 l 840 542 l 771 542 z "},"ρ":{"ha":815,"x_min":42,"x_max":785,"o":"m 408 769 q 688 669 590 769 q 785 374 785 568 q 748 167 785 258 q 644 24 711 76 q 489 -28 576 -28 q 395 -8 438 -28 q 317 56 353 11 l 317 -287 l 42 -315 l 42 385 q 133 670 42 571 q 408 769 224 769 m 404 168 q 503 369 503 168 q 478 531 503 489 q 408 574 454 574 q 338 526 358 574 q 317 365 317 479 l 317 228 q 356 181 335 194 q 404 168 376 168 z "},"ς":{"ha":672,"x_min":24,"x_max":679,"o":"m 410 769 q 679 671 568 769 l 565 511 q 435 563 501 563 q 342 522 375 563 q 310 386 310 481 q 323 301 310 335 q 369 242 336 268 q 467 188 403 215 q 598 101 557 147 q 639 -29 639 54 q 573 -189 639 -121 q 367 -315 507 -257 l 268 -158 q 339 -106 318 -126 q 360 -56 360 -85 q 342 -12 360 -29 q 267 32 325 4 q 133 111 185 69 q 53 219 82 153 q 24 386 24 285 q 73 582 24 494 q 210 719 122 669 q 410 769 297 769 z "},"σ":{"ha":851,"x_min":24,"x_max":851,"o":"m 851 546 l 718 554 q 771 472 754 519 q 788 356 788 425 q 741 155 788 242 q 608 20 694 68 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 126 654 24 553 q 435 756 229 756 q 851 742 582 756 l 851 546 m 406 169 q 481 215 457 169 q 506 356 506 260 q 498 489 506 440 q 475 563 490 538 q 371 549 406 563 q 321 495 336 536 q 306 371 306 454 q 329 216 306 263 q 406 169 353 169 z "},"τ":{"ha":688,"x_min":-14,"x_max":688,"o":"m 486 542 l 486 281 q 499 209 486 233 q 543 168 511 185 l 465 -28 q 276 55 342 -10 q 211 244 211 119 l 211 542 l 161 542 q 88 539 111 542 q 35 526 64 536 l -14 703 q 78 733 29 724 q 211 742 128 742 l 688 742 l 688 542 l 486 542 z "},"υ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 z "},"φ":{"ha":1065,"x_min":28,"x_max":1035,"o":"m 1035 376 q 944 93 1035 190 q 660 -25 853 -4 l 660 -287 l 406 -315 l 406 -25 q 122 90 217 -4 q 28 335 28 183 q 113 742 28 529 l 371 742 q 311 532 331 618 q 292 356 292 446 q 317 217 292 264 q 406 157 342 171 l 406 440 q 483 682 406 594 q 710 769 561 769 q 954 669 874 769 q 1035 376 1035 568 m 660 157 q 730 188 706 165 q 763 254 754 211 q 772 374 772 297 q 766 513 772 465 q 747 576 760 560 q 713 592 735 592 q 682 581 693 592 q 665 540 671 569 q 660 453 660 511 l 660 157 z "},"χ":{"ha":708,"x_min":-44,"x_max":743,"o":"m 743 -269 l 469 -315 l 350 42 l 246 -315 l -36 -287 l 214 250 q 74 523 128 429 q -44 685 21 617 l 225 763 q 294 625 271 685 q 356 428 318 565 l 428 761 l 710 733 l 493 257 l 743 -269 z "},"ψ":{"ha":1104,"x_min":49,"x_max":1069,"o":"m 1069 336 q 967 85 1069 178 q 686 -24 864 -7 l 686 -287 l 425 -315 l 425 -25 q 144 75 240 -8 q 49 285 49 158 l 49 742 l 317 742 l 317 299 q 342 208 317 242 q 425 163 367 175 l 425 742 l 686 742 l 686 165 q 774 223 746 179 q 801 343 801 267 q 764 742 801 517 l 1026 742 q 1069 336 1069 544 z "},"ω":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 z "},"ί":{"ha":388,"x_min":49,"x_max":381,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 343 1165 l 271 828 l 101 828 l 83 1185 l 343 1165 z "},"ϊ":{"ha":388,"x_min":-117,"x_max":488,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 15 1136 q 109 1099 71 1136 q 147 1008 147 1061 q 109 917 147 954 q 15 879 71 879 q -78 917 -39 879 q -117 1008 -117 954 q -78 1099 -117 1061 q 15 1136 -39 1136 m 356 1136 q 449 1099 411 1136 q 488 1008 488 1061 q 449 917 488 954 q 356 879 411 879 q 263 917 301 879 q 224 1008 224 954 q 263 1099 224 1061 q 356 1136 301 1136 z "},"ΐ":{"ha":388,"x_min":-151,"x_max":522,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 318 1329 l 256 1039 l 110 1039 l 94 1346 l 318 1329 m -19 1072 q 74 1035 35 1072 q 113 944 113 997 q 74 853 113 890 q -19 815 35 815 q -113 853 -75 815 q -151 944 -151 890 q -113 1035 -151 997 q -19 1072 -75 1072 m 390 1072 q 483 1035 444 1072 q 522 944 522 997 q 483 853 522 890 q 390 815 444 815 q 297 853 335 815 q 258 944 258 890 q 297 1035 258 997 q 390 1072 335 1072 z "},"ύ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 535 1165 l 463 828 l 293 828 l 275 1185 l 535 1165 z "},"ϋ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 207 1136 q 301 1099 263 1136 q 339 1008 339 1061 q 301 917 339 954 q 207 879 263 879 q 114 917 153 879 q 75 1008 75 954 q 114 1099 75 1061 q 207 1136 153 1136 m 547 1136 q 641 1099 603 1136 q 679 1008 679 1061 q 641 917 679 954 q 547 879 603 879 q 454 917 493 879 q 415 1008 415 954 q 454 1099 415 1061 q 547 1136 493 1136 z "},"ΰ":{"ha":776,"x_min":40,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 510 1329 l 447 1039 l 301 1039 l 286 1346 l 510 1329 m 172 1072 q 265 1035 226 1072 q 304 944 304 997 q 265 853 304 890 q 172 815 226 815 q 78 853 117 815 q 40 944 40 890 q 78 1035 40 997 q 172 1072 117 1072 m 582 1072 q 675 1035 636 1072 q 714 944 714 997 q 675 853 714 890 q 582 815 636 815 q 488 853 526 815 q 450 944 450 890 q 488 1035 450 997 q 582 1072 526 1072 z "},"ό":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 563 1165 l 490 828 l 321 828 l 303 1185 l 563 1165 z "},"ώ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 693 1165 l 621 828 l 451 828 l 433 1185 l 693 1165 z "},"ά":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 550 1165 l 478 828 l 308 828 l 290 1185 l 550 1165 z "},"έ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 521 1165 l 449 828 l 279 828 l 261 1185 l 521 1165 z "},"ή":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 557 1165 l 485 828 l 315 828 l 297 1185 l 557 1165 z "},"ͱ":{"ha":664,"x_min":38,"x_max":643,"o":"m 643 272 l 339 272 l 339 0 l 64 0 l 64 551 q 56 644 64 594 q 38 728 49 694 l 292 761 q 327 655 315 717 q 339 485 339 593 l 339 479 l 643 479 l 643 272 z "},"ͳ":{"ha":743,"x_min":-14,"x_max":743,"o":"m 743 542 l 514 542 l 514 -287 l 239 -315 l 239 542 l 161 542 q 88 539 111 542 q 35 526 64 536 l -14 703 q 81 733 29 724 q 225 742 132 742 l 743 742 l 743 542 z "},"ͷ":{"ha":810,"x_min":58,"x_max":803,"o":"m 746 281 q 757 210 746 233 q 803 169 768 186 l 725 -28 q 499 200 499 15 q 564 547 499 317 l 325 0 l 58 0 l 58 742 l 318 742 l 318 514 q 279 247 318 381 l 504 742 l 746 742 l 746 281 z "},"ι":{"ha":558,"x_min":42,"x_max":408,"o":"m 242 -294 q 94 -240 146 -294 q 42 -99 42 -186 l 42 -61 l 226 -61 l 226 -93 q 279 -149 226 -149 q 346 -129 310 -149 l 408 -240 q 242 -294 340 -294 z "},"ͻ":{"ha":714,"x_min":-14,"x_max":690,"o":"m 292 769 q 503 720 413 769 q 642 580 593 671 q 690 365 690 489 q 640 156 690 244 q 496 19 589 67 q 278 -28 403 -28 q 118 -4 186 -28 q -14 64 50 19 l 104 229 q 181 195 149 206 q 258 185 214 185 q 365 226 326 185 q 404 365 404 267 q 265 563 404 563 q 100 511 179 563 l -14 671 q 124 745 54 721 q 292 769 194 769 z "},"ͼ":{"ha":714,"x_min":24,"x_max":728,"o":"m 433 769 q 594 746 528 769 q 728 671 661 722 l 614 511 q 536 551 571 539 q 460 563 501 563 q 310 365 310 563 q 349 226 310 267 q 456 185 388 185 q 533 195 500 185 q 610 229 565 206 l 728 64 q 596 -4 664 19 q 436 -28 528 -28 q 218 19 311 -28 q 74 156 125 67 q 24 365 24 244 q 76 574 24 482 q 222 717 128 665 q 433 769 315 769 m 474 483 q 563 449 528 483 q 597 365 597 415 q 563 282 597 315 q 474 249 528 249 q 385 282 419 249 q 350 365 350 315 q 385 449 350 415 q 474 483 419 483 z "},"ͽ":{"ha":714,"x_min":-14,"x_max":690,"o":"m 292 769 q 503 720 413 769 q 642 580 593 671 q 690 365 690 489 q 640 156 690 244 q 496 19 589 67 q 278 -28 403 -28 q 118 -4 186 -28 q -14 64 50 19 l 104 229 q 181 195 149 206 q 258 185 214 185 q 365 226 326 185 q 404 365 404 267 q 265 563 404 563 q 100 511 179 563 l -14 671 q 124 745 54 721 q 292 769 194 769 m 244 483 q 333 449 299 483 q 368 365 368 415 q 333 282 368 315 q 244 249 299 249 q 156 282 190 249 q 121 365 121 315 q 156 449 121 415 q 244 483 190 483 z "},"ϙ":{"ha":811,"x_min":24,"x_max":788,"o":"m 788 369 q 719 122 788 222 q 526 -12 650 21 l 526 -287 l 285 -315 l 285 -14 q 92 118 161 19 q 24 372 24 217 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 q 685 665 583 769 q 788 369 788 561 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ϛ":{"ha":679,"x_min":24,"x_max":686,"o":"m 268 -158 q 339 -105 318 -125 q 360 -54 360 -85 q 339 -10 360 -26 q 247 42 318 7 q 131 106 172 79 q 57 192 90 133 q 24 347 24 251 q 91 568 24 494 q 275 672 158 642 q 352 691 289 675 q 440 738 415 707 q 464 821 464 768 l 686 801 q 665 650 686 701 q 606 576 643 599 q 490 528 568 554 q 383 486 418 503 q 329 440 349 469 q 310 360 310 411 q 326 285 310 314 q 374 236 343 256 q 467 188 406 217 q 558 137 525 160 q 615 75 592 114 q 639 -25 639 36 q 573 -189 639 -122 q 367 -315 507 -256 l 268 -158 z "},"ϝ":{"ha":635,"x_min":49,"x_max":649,"o":"m 385 536 q 315 457 315 536 l 315 360 l 400 360 q 579 315 513 360 l 517 142 q 456 158 485 153 q 386 164 426 164 l 315 164 l 315 -278 l 49 -317 l 49 465 q 124 664 49 586 q 342 742 199 742 l 649 742 l 622 536 l 385 536 z "},"ϟ":{"ha":714,"x_min":0,"x_max":714,"o":"m 714 513 l 596 265 q 528 108 550 171 q 493 -28 507 44 l 249 31 q 290 198 250 106 q 417 426 331 290 l 67 325 l 0 501 l 128 768 q 195 926 174 863 q 231 1061 217 989 l 475 1003 q 431 828 474 925 q 294 588 388 732 l 650 690 l 714 513 z "},"ϡ":{"ha":933,"x_min":-28,"x_max":910,"o":"m 165 1061 q 587 858 425 975 q 829 562 749 740 q 910 121 910 383 q 893 -98 910 24 q 851 -314 876 -219 l 638 -283 q 681 114 681 -81 q 669 296 681 210 l 539 0 l 299 0 l 586 550 q 543 610 567 582 l 218 0 l -28 0 l 369 758 q 90 894 261 825 l 165 1061 z "},"ϗ":{"ha":768,"x_min":7,"x_max":761,"o":"m 703 281 q 714 199 703 225 q 761 153 725 172 l 761 -35 q 682 -253 761 -179 q 457 -328 603 -328 q 328 -311 388 -328 q 231 -265 269 -294 l 319 -106 q 376 -126 350 -119 q 439 -133 403 -133 q 505 -114 482 -133 q 528 -57 528 -94 l 529 44 q 456 200 456 96 q 556 547 456 308 l 251 -18 l 64 42 l 64 460 q 53 531 64 507 q 7 571 42 554 l 85 768 q 311 540 311 725 q 211 193 311 432 l 515 758 l 703 699 l 703 281 z "},"ϐ":{"ha":783,"x_min":24,"x_max":767,"o":"m 551 593 q 706 524 644 593 q 767 326 767 454 q 719 139 767 219 q 587 15 672 58 q 390 -28 501 -28 q 113 104 203 -28 q 24 476 24 236 q 76 785 24 653 q 222 989 128 917 q 436 1061 315 1061 q 630 999 563 1061 q 697 843 697 936 q 643 690 697 754 q 464 582 589 626 q 551 593 510 593 m 413 872 q 340 814 371 872 q 299 621 308 756 l 329 631 q 461 817 461 674 q 448 858 461 843 q 413 872 435 872 m 392 167 q 485 318 485 167 q 458 435 485 394 q 389 475 432 475 q 319 461 364 475 l 294 453 q 324 227 299 288 q 392 167 349 167 z "},"ϑ":{"ha":771,"x_min":28,"x_max":757,"o":"m 757 557 l 711 557 q 676 226 711 353 q 560 35 642 99 q 338 -28 478 -28 q 122 43 201 -28 q 42 265 42 114 l 42 493 l 303 493 l 303 238 q 315 181 303 199 q 351 164 326 164 q 403 197 385 164 q 429 315 421 231 q 438 554 438 399 l 438 556 l 335 556 q 103 617 178 556 q 28 793 28 679 q 66 926 28 864 q 174 1024 104 988 q 336 1061 244 1061 q 697 731 640 1061 l 757 731 l 757 557 m 429 731 q 395 840 418 810 q 335 869 372 869 q 283 851 301 869 q 264 800 264 832 q 284 749 264 768 q 344 731 304 731 l 429 731 z "},"ϕ":{"ha":950,"x_min":19,"x_max":931,"o":"m 931 375 q 841 115 931 204 q 611 8 751 25 l 610 -287 l 335 -315 l 336 8 q 109 110 199 25 q 19 367 19 196 q 108 626 19 536 q 335 732 196 715 l 335 1033 l 610 1061 l 610 733 q 840 633 750 718 q 931 375 931 547 m 582 174 q 648 228 626 181 q 669 375 669 275 q 647 519 669 476 q 582 569 625 561 l 582 174 m 281 367 q 364 174 281 197 l 364 567 q 301 513 322 560 q 281 367 281 467 z "},"ϖ":{"ha":1067,"x_min":-7,"x_max":1060,"o":"m 1060 556 l 950 556 q 1031 311 1031 435 q 957 62 1031 151 q 760 -28 883 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 115 61 188 -28 q 42 311 42 150 q 122 554 42 436 q 42 540 76 553 l -7 703 q 88 733 36 724 q 232 742 139 742 l 1060 742 l 1060 556 m 764 342 q 731 556 764 449 l 342 556 q 308 342 308 449 q 322 210 308 251 q 365 169 336 169 q 399 188 388 169 q 410 264 410 207 l 410 396 l 663 429 l 663 264 q 675 189 663 208 q 708 169 688 169 q 751 209 739 169 q 764 342 764 249 z "},"ϰ":{"ha":767,"x_min":7,"x_max":760,"o":"m 703 281 q 714 210 703 233 q 760 169 725 186 l 682 -28 q 456 200 456 15 q 556 547 456 308 l 251 -18 l 64 42 l 64 460 q 53 531 64 507 q 7 571 42 554 l 85 768 q 311 540 311 725 q 211 193 311 432 l 515 758 l 703 699 l 703 281 z "},"ϱ":{"ha":815,"x_min":42,"x_max":785,"o":"m 486 -83 q 642 -141 589 -99 q 715 -269 694 -183 l 482 -315 q 458 -280 474 -292 q 413 -260 443 -268 q 317 -244 382 -253 q 110 -152 178 -226 q 42 72 42 -78 l 42 385 q 133 670 42 571 q 408 769 224 769 q 687 674 589 769 q 785 401 785 578 q 747 215 785 300 q 642 78 710 129 q 489 28 575 28 q 395 47 438 28 q 317 111 353 67 l 317 24 q 333 -29 317 -10 q 384 -61 349 -49 q 486 -83 419 -74 m 411 574 q 338 527 360 574 q 317 365 317 481 l 317 283 q 356 237 335 250 q 404 224 376 224 q 476 267 449 224 q 503 397 503 310 q 478 536 503 499 q 411 574 454 574 z "},"ϲ":{"ha":714,"x_min":24,"x_max":728,"o":"m 433 769 q 594 746 528 769 q 728 671 661 722 l 614 511 q 536 551 571 539 q 460 563 501 563 q 310 365 310 563 q 349 226 310 267 q 456 185 388 185 q 533 195 500 185 q 610 229 565 206 l 728 64 q 596 -4 664 19 q 436 -28 528 -28 q 218 19 311 -28 q 74 156 125 67 q 24 365 24 244 q 76 574 24 482 q 222 717 128 665 q 433 769 315 769 z "},"ϳ":{"ha":392,"x_min":-97,"x_max":350,"o":"m 333 107 q 244 -169 333 -74 q -3 -315 156 -264 l -97 -115 q -11 -67 -43 -90 q 40 -6 21 -43 q 58 90 58 32 l 58 742 l 333 742 l 333 107 m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 z "},"ϵ":{"ha":679,"x_min":24,"x_max":679,"o":"m 431 167 q 498 178 467 167 q 565 218 529 190 l 679 64 q 560 -4 622 19 q 421 -28 497 -28 q 209 22 299 -28 q 72 160 119 71 q 24 365 24 250 q 72 574 24 482 q 207 717 119 665 q 410 769 294 769 q 679 671 568 769 l 565 524 q 428 575 501 575 q 335 545 368 575 q 299 449 303 515 l 542 449 l 542 304 l 299 304 q 338 199 301 231 q 431 167 374 167 z "},"ϸ":{"ha":825,"x_min":58,"x_max":801,"o":"m 518 769 q 731 666 660 769 q 801 374 801 563 q 765 167 801 258 q 660 24 728 76 q 506 -28 593 -28 q 333 46 400 -28 l 333 -287 l 58 -315 l 58 1033 l 333 1061 l 333 683 q 424 749 375 729 q 518 769 472 769 m 415 168 q 519 369 519 168 q 508 499 519 456 q 476 558 496 543 q 425 572 457 572 q 333 503 372 572 l 333 219 q 371 180 351 192 q 415 168 390 168 z "},"ϻ":{"ha":933,"x_min":-11,"x_max":919,"o":"m 919 0 l 661 0 l 656 214 q 654 299 654 243 q 667 507 654 394 l 576 71 l 357 71 l 265 507 q 278 310 278 403 q 275 214 278 281 l 244 -299 l -11 -315 l 75 742 l 390 742 l 467 294 l 539 742 l 857 742 l 919 0 z "},"ϼ":{"ha":815,"x_min":-21,"x_max":785,"o":"m 489 -28 q 395 -8 438 -28 q 317 56 353 11 l 317 -64 l 499 -64 l 499 -211 l 317 -211 l 317 -287 l 42 -315 l 42 -211 l -21 -211 l -21 -64 l 42 -64 l 42 385 q 133 670 42 571 q 408 769 224 769 q 688 669 590 769 q 785 374 785 568 q 748 167 785 258 q 644 24 711 76 q 489 -28 576 -28 m 408 574 q 338 526 358 574 q 317 365 317 479 l 317 228 q 356 181 335 194 q 404 168 376 168 q 503 369 503 168 q 478 531 503 489 q 408 574 454 574 z "},"ἀ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 z "},"ἁ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 351 1192 q 443 1155 407 1192 q 479 1065 479 1118 q 426 961 479 1001 l 461 803 l 331 803 l 261 943 q 232 1011 240 986 q 224 1065 224 1036 q 260 1156 224 1119 q 351 1192 296 1192 z "},"ἂ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 236 1192 q 328 1156 292 1192 q 364 1065 364 1119 q 356 1011 364 1036 q 326 943 347 986 l 257 803 l 126 803 l 161 961 q 108 1065 108 1001 q 144 1155 108 1118 q 236 1192 181 1192 m 661 825 l 511 796 l 378 1133 l 599 1188 l 661 825 z "},"ἃ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 217 1192 q 308 1155 272 1192 q 344 1065 344 1118 q 292 961 344 1001 l 326 803 l 196 803 l 126 943 q 97 1011 106 986 q 89 1065 89 1036 q 125 1156 89 1119 q 217 1192 161 1192 m 642 825 l 492 796 l 358 1133 l 579 1188 l 642 825 z "},"ἄ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 282 1192 q 374 1156 338 1192 q 410 1065 410 1119 q 401 1011 410 1036 q 372 943 393 986 l 303 803 l 172 803 l 207 961 q 154 1065 154 1001 q 190 1155 154 1118 q 282 1192 226 1192 m 707 1133 l 574 796 l 424 825 l 486 1188 l 707 1133 z "},"ἅ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 244 1192 q 336 1155 300 1192 q 372 1065 372 1118 q 319 961 372 1001 l 354 803 l 224 803 l 154 943 q 125 1011 133 986 q 117 1065 117 1036 q 153 1156 117 1119 q 244 1192 189 1192 m 683 1133 l 550 796 l 400 825 l 463 1188 l 683 1133 z "},"ἆ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 474 1138 q 424 1144 444 1138 q 382 1167 404 1151 q 344 1191 356 1185 q 317 1197 332 1197 q 276 1183 292 1197 q 243 1138 261 1169 l 114 1200 q 194 1335 143 1282 q 310 1389 244 1389 q 362 1382 340 1389 q 407 1358 383 1375 q 444 1335 431 1342 q 471 1329 457 1329 q 510 1343 494 1329 q 543 1389 525 1357 l 672 1326 q 592 1190 643 1243 q 474 1138 540 1138 m 335 894 q 265 999 265 929 q 301 1088 265 1051 q 393 1125 338 1125 q 485 1089 449 1125 q 521 999 521 1053 q 511 942 521 968 q 479 876 501 917 l 442 810 l 321 810 l 335 894 z "},"ἇ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 474 1138 q 424 1144 444 1138 q 382 1167 404 1151 q 344 1191 356 1185 q 317 1197 332 1197 q 276 1183 292 1197 q 243 1138 261 1169 l 114 1200 q 194 1335 143 1282 q 310 1389 244 1389 q 362 1382 340 1389 q 407 1358 383 1375 q 444 1335 431 1342 q 471 1329 457 1329 q 510 1343 494 1329 q 543 1389 525 1357 l 672 1326 q 592 1190 643 1243 q 474 1138 540 1138 m 344 810 l 307 876 q 275 942 285 917 q 265 999 265 968 q 301 1089 265 1053 q 393 1125 338 1125 q 485 1088 449 1125 q 521 999 521 1051 q 454 894 521 931 l 465 810 l 344 810 z "},"ὰ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 481 838 l 306 808 l 165 1151 l 428 1206 l 481 838 z "},"ά":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 624 1151 l 483 808 l 308 838 l 361 1206 l 624 1151 z "},"ᾶ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 z "},"ᾰ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 393 869 q 210 947 275 869 q 136 1142 146 1025 l 279 1165 q 320 1085 292 1114 q 393 1056 349 1056 q 466 1085 438 1056 q 507 1165 494 1114 l 650 1142 q 576 947 640 1025 q 393 869 511 869 z "},"ᾱ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 167 900 l 167 1086 l 618 1086 l 618 900 l 167 900 z "},"ᾳ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾲ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 481 838 l 306 808 l 165 1151 l 428 1206 l 481 838 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾴ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 624 1151 l 483 808 l 308 838 l 361 1206 l 624 1151 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾀ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾁ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 351 1192 q 443 1155 407 1192 q 479 1065 479 1118 q 426 961 479 1001 l 461 803 l 331 803 l 261 943 q 232 1011 240 986 q 224 1065 224 1036 q 260 1156 224 1119 q 351 1192 296 1192 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾂ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 236 1192 q 328 1156 292 1192 q 364 1065 364 1119 q 356 1011 364 1036 q 326 943 347 986 l 257 803 l 126 803 l 161 961 q 108 1065 108 1001 q 144 1155 108 1118 q 236 1192 181 1192 m 661 825 l 511 796 l 378 1133 l 599 1188 l 661 825 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾃ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 217 1192 q 308 1155 272 1192 q 344 1065 344 1118 q 292 961 344 1001 l 326 803 l 196 803 l 126 943 q 97 1011 106 986 q 89 1065 89 1036 q 125 1156 89 1119 q 217 1192 161 1192 m 642 825 l 492 796 l 358 1133 l 579 1188 l 642 825 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾄ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 282 1192 q 374 1156 338 1192 q 410 1065 410 1119 q 401 1011 410 1036 q 372 943 393 986 l 303 803 l 172 803 l 207 961 q 154 1065 154 1001 q 190 1155 154 1118 q 282 1192 226 1192 m 707 1133 l 574 796 l 424 825 l 486 1188 l 707 1133 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾅ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 244 1192 q 336 1155 300 1192 q 372 1065 372 1118 q 319 961 372 1001 l 354 803 l 224 803 l 154 943 q 125 1011 133 986 q 117 1065 117 1036 q 153 1156 117 1119 q 244 1192 189 1192 m 683 1133 l 550 796 l 400 825 l 463 1188 l 683 1133 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾆ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 474 1138 q 424 1144 444 1138 q 382 1167 404 1151 q 344 1191 356 1185 q 317 1197 332 1197 q 276 1183 292 1197 q 243 1138 261 1169 l 114 1200 q 194 1335 143 1282 q 310 1389 244 1389 q 362 1382 340 1389 q 407 1358 383 1375 q 444 1335 431 1342 q 471 1329 457 1329 q 510 1343 494 1329 q 543 1389 525 1357 l 672 1326 q 592 1190 643 1243 q 474 1138 540 1138 m 335 894 q 265 999 265 929 q 301 1088 265 1051 q 393 1125 338 1125 q 485 1089 449 1125 q 521 999 521 1053 q 511 942 521 968 q 479 876 501 917 l 442 810 l 321 810 l 335 894 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾇ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 474 1138 q 424 1144 444 1138 q 382 1167 404 1151 q 344 1191 356 1185 q 317 1197 332 1197 q 276 1183 292 1197 q 243 1138 261 1169 l 114 1200 q 194 1335 143 1282 q 310 1389 244 1389 q 362 1382 340 1389 q 407 1358 383 1375 q 444 1335 431 1342 q 471 1329 457 1329 q 510 1343 494 1329 q 543 1389 525 1357 l 672 1326 q 592 1190 643 1243 q 474 1138 540 1138 m 344 810 l 307 876 q 275 942 285 917 q 265 999 265 968 q 301 1089 265 1053 q 393 1125 338 1125 q 485 1088 449 1125 q 521 999 521 1051 q 454 894 521 931 l 465 810 l 344 810 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ᾷ":{"ha":832,"x_min":24,"x_max":818,"o":"m 343 769 q 485 723 431 769 q 557 597 539 676 l 572 742 l 803 742 l 694 369 l 732 247 q 764 192 743 210 q 818 172 785 175 l 732 -26 q 611 13 656 -18 q 551 103 567 43 l 543 136 q 450 11 506 50 q 314 -28 394 -28 q 103 75 182 -28 q 24 365 24 178 q 63 575 24 483 q 174 718 101 667 q 343 769 246 769 m 385 574 q 322 522 346 574 q 297 365 297 471 q 322 215 297 261 q 381 168 346 168 q 447 215 422 168 q 492 382 472 261 q 448 533 471 492 q 385 574 425 574 m 465 -294 q 317 -240 369 -294 q 265 -99 265 -186 l 265 -61 l 450 -61 l 450 -93 q 503 -149 450 -149 q 569 -129 533 -149 l 632 -240 q 465 -294 564 -294 z "},"ἐ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 z "},"ἑ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 322 1192 q 414 1155 378 1192 q 450 1065 450 1118 q 397 961 450 1001 l 432 803 l 301 803 l 232 943 q 203 1011 211 986 q 194 1065 194 1036 q 231 1156 194 1119 q 322 1192 267 1192 z "},"ἒ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 207 1192 q 299 1156 263 1192 q 335 1065 335 1119 q 326 1011 335 1036 q 297 943 318 986 l 228 803 l 97 803 l 132 961 q 79 1065 79 1001 q 115 1155 79 1118 q 207 1192 151 1192 m 632 825 l 482 796 l 349 1133 l 569 1188 l 632 825 z "},"ἓ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 188 1192 q 279 1155 243 1192 q 315 1065 315 1118 q 263 961 315 1001 l 297 803 l 167 803 l 97 943 q 68 1011 76 986 q 60 1065 60 1036 q 96 1156 60 1119 q 188 1192 132 1192 m 613 825 l 463 796 l 329 1133 l 550 1188 l 613 825 z "},"ἔ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 253 1192 q 344 1156 308 1192 q 381 1065 381 1119 q 372 1011 381 1036 q 343 943 364 986 l 274 803 l 143 803 l 178 961 q 125 1065 125 1001 q 161 1155 125 1118 q 253 1192 197 1192 m 678 1133 l 544 796 l 394 825 l 457 1188 l 678 1133 z "},"ἕ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 215 1192 q 307 1155 271 1192 q 343 1065 343 1118 q 290 961 343 1001 l 325 803 l 194 803 l 125 943 q 96 1011 104 986 q 88 1065 88 1036 q 124 1156 88 1119 q 215 1192 160 1192 m 654 1133 l 521 796 l 371 825 l 433 1188 l 654 1133 z "},"ὲ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 451 838 l 276 808 l 136 1151 l 399 1206 l 451 838 z "},"έ":{"ha":675,"x_min":21,"x_max":682,"o":"m 364 769 q 663 676 540 769 l 556 540 q 478 575 514 564 q 403 586 443 586 q 347 571 368 586 q 325 528 325 556 q 344 479 325 497 q 404 461 364 461 l 501 461 l 476 294 l 393 294 q 324 277 346 294 q 303 229 303 260 q 404 161 303 161 q 481 173 442 161 q 571 213 519 185 l 682 63 q 358 -28 558 -28 q 115 33 208 -28 q 21 204 21 93 q 226 394 21 369 q 49 564 49 431 q 135 714 49 658 q 364 769 222 769 m 594 1151 l 454 808 l 279 838 l 332 1206 l 594 1151 z "},"ἠ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 z "},"ἡ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 358 1192 q 450 1155 414 1192 q 486 1065 486 1118 q 433 961 486 1001 l 468 803 l 338 803 l 268 943 q 239 1011 247 986 q 231 1065 231 1036 q 267 1156 231 1119 q 358 1192 303 1192 z "},"ἢ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 243 1192 q 335 1156 299 1192 q 371 1065 371 1119 q 363 1011 371 1036 q 333 943 354 986 l 264 803 l 133 803 l 168 961 q 115 1065 115 1001 q 151 1155 115 1118 q 243 1192 188 1192 m 668 825 l 518 796 l 385 1133 l 606 1188 l 668 825 z "},"ἣ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 224 1192 q 315 1155 279 1192 q 351 1065 351 1118 q 299 961 351 1001 l 333 803 l 203 803 l 133 943 q 104 1011 113 986 q 96 1065 96 1036 q 132 1156 96 1119 q 224 1192 168 1192 m 649 825 l 499 796 l 365 1133 l 586 1188 l 649 825 z "},"ἤ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 289 1192 q 381 1156 344 1192 q 417 1065 417 1119 q 408 1011 417 1036 q 379 943 400 986 l 310 803 l 179 803 l 214 961 q 161 1065 161 1001 q 197 1155 161 1118 q 289 1192 233 1192 m 714 1133 l 581 796 l 431 825 l 493 1188 l 714 1133 z "},"ἥ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 251 1192 q 343 1155 307 1192 q 379 1065 379 1118 q 326 961 379 1001 l 361 803 l 231 803 l 161 943 q 132 1011 140 986 q 124 1065 124 1036 q 160 1156 124 1119 q 251 1192 196 1192 m 690 1133 l 557 796 l 407 825 l 469 1188 l 690 1133 z "},"ἦ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 481 1138 q 431 1144 451 1138 q 389 1167 411 1151 q 351 1191 363 1185 q 324 1197 339 1197 q 283 1183 299 1197 q 250 1138 268 1169 l 121 1200 q 201 1335 150 1282 q 317 1389 251 1389 q 369 1382 347 1389 q 414 1358 390 1375 q 451 1335 438 1342 q 478 1329 464 1329 q 517 1343 501 1329 q 550 1389 532 1357 l 679 1326 q 599 1190 650 1243 q 481 1138 547 1138 m 342 894 q 272 999 272 929 q 308 1088 272 1051 q 400 1125 344 1125 q 492 1089 456 1125 q 528 999 528 1053 q 518 942 528 968 q 486 876 508 917 l 449 810 l 328 810 l 342 894 z "},"ἧ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 481 1138 q 431 1144 451 1138 q 389 1167 411 1151 q 351 1191 363 1185 q 324 1197 339 1197 q 283 1183 299 1197 q 250 1138 268 1169 l 121 1200 q 201 1335 150 1282 q 317 1389 251 1389 q 369 1382 347 1389 q 414 1358 390 1375 q 451 1335 438 1342 q 478 1329 464 1329 q 517 1343 501 1329 q 550 1389 532 1357 l 679 1326 q 599 1190 650 1243 q 481 1138 547 1138 m 351 810 l 314 876 q 282 942 292 917 q 272 999 272 968 q 308 1089 272 1053 q 400 1125 344 1125 q 492 1088 456 1125 q 528 999 528 1051 q 461 894 528 931 l 472 810 l 351 810 z "},"ὴ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 488 838 l 313 808 l 172 1151 l 435 1206 l 488 838 z "},"ή":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 631 1151 l 490 808 l 315 838 l 368 1206 l 631 1151 z "},"ῆ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 z "},"ῃ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ῂ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 488 838 l 313 808 l 172 1151 l 435 1206 l 488 838 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ῄ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 631 1151 l 490 808 l 315 838 l 368 1206 l 631 1151 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾐ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾑ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 358 1192 q 450 1155 414 1192 q 486 1065 486 1118 q 433 961 486 1001 l 468 803 l 338 803 l 268 943 q 239 1011 247 986 q 231 1065 231 1036 q 267 1156 231 1119 q 358 1192 303 1192 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾒ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 243 1192 q 335 1156 299 1192 q 371 1065 371 1119 q 363 1011 371 1036 q 333 943 354 986 l 264 803 l 133 803 l 168 961 q 115 1065 115 1001 q 151 1155 115 1118 q 243 1192 188 1192 m 668 825 l 518 796 l 385 1133 l 606 1188 l 668 825 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾓ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 224 1192 q 315 1155 279 1192 q 351 1065 351 1118 q 299 961 351 1001 l 333 803 l 203 803 l 133 943 q 104 1011 113 986 q 96 1065 96 1036 q 132 1156 96 1119 q 224 1192 168 1192 m 649 825 l 499 796 l 365 1133 l 586 1188 l 649 825 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾔ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 289 1192 q 381 1156 344 1192 q 417 1065 417 1119 q 408 1011 417 1036 q 379 943 400 986 l 310 803 l 179 803 l 214 961 q 161 1065 161 1001 q 197 1155 161 1118 q 289 1192 233 1192 m 714 1133 l 581 796 l 431 825 l 493 1188 l 714 1133 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾕ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 251 1192 q 343 1155 307 1192 q 379 1065 379 1118 q 326 961 379 1001 l 361 803 l 231 803 l 161 943 q 132 1011 140 986 q 124 1065 124 1036 q 160 1156 124 1119 q 251 1192 196 1192 m 690 1133 l 557 796 l 407 825 l 469 1188 l 690 1133 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾖ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 481 1138 q 431 1144 451 1138 q 389 1167 411 1151 q 351 1191 363 1185 q 324 1197 339 1197 q 283 1183 299 1197 q 250 1138 268 1169 l 121 1200 q 201 1335 150 1282 q 317 1389 251 1389 q 369 1382 347 1389 q 414 1358 390 1375 q 451 1335 438 1342 q 478 1329 464 1329 q 517 1343 501 1329 q 550 1389 532 1357 l 679 1326 q 599 1190 650 1243 q 481 1138 547 1138 m 342 894 q 272 999 272 929 q 308 1088 272 1051 q 400 1125 344 1125 q 492 1089 456 1125 q 528 999 528 1053 q 518 942 528 968 q 486 876 508 917 l 449 810 l 328 810 l 342 894 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ᾗ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 481 1138 q 431 1144 451 1138 q 389 1167 411 1151 q 351 1191 363 1185 q 324 1197 339 1197 q 283 1183 299 1197 q 250 1138 268 1169 l 121 1200 q 201 1335 150 1282 q 317 1389 251 1389 q 369 1382 347 1389 q 414 1358 390 1375 q 451 1335 438 1342 q 478 1329 464 1329 q 517 1343 501 1329 q 550 1389 532 1357 l 679 1326 q 599 1190 650 1243 q 481 1138 547 1138 m 351 810 l 314 876 q 282 942 292 917 q 272 999 272 968 q 308 1089 272 1053 q 400 1125 344 1125 q 492 1088 456 1125 q 528 999 528 1051 q 461 894 528 931 l 472 810 l 351 810 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ῇ":{"ha":792,"x_min":38,"x_max":743,"o":"m 543 769 q 690 710 636 769 q 743 543 743 651 l 743 -315 l 468 -287 l 468 497 q 458 554 468 539 q 426 569 447 569 q 339 503 382 569 l 339 0 l 64 0 l 64 551 q 38 728 64 650 l 292 761 q 322 669 310 733 q 425 746 372 722 q 543 769 478 769 m 264 -294 q 116 -240 168 -294 q 64 -99 64 -186 l 64 -61 l 249 -61 l 249 -93 q 301 -149 249 -149 q 368 -129 332 -149 l 431 -240 q 264 -294 363 -294 z "},"ἰ":{"ha":388,"x_min":49,"x_max":381,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 z "},"ἱ":{"ha":388,"x_min":17,"x_max":381,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 144 1192 q 236 1155 200 1192 q 272 1065 272 1118 q 219 961 272 1001 l 254 803 l 124 803 l 54 943 q 25 1011 33 986 q 17 1065 17 1036 q 53 1156 17 1119 q 144 1192 89 1192 z "},"ἲ":{"ha":388,"x_min":-99,"x_max":454,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 29 1192 q 121 1156 85 1192 q 157 1065 157 1119 q 149 1011 157 1036 q 119 943 140 986 l 50 803 l -81 803 l -46 961 q -99 1065 -99 1001 q -62 1155 -99 1118 q 29 1192 -26 1192 m 454 825 l 304 796 l 171 1133 l 392 1188 l 454 825 z "},"ἳ":{"ha":388,"x_min":-118,"x_max":435,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 10 1192 q 101 1155 65 1192 q 138 1065 138 1118 q 85 961 138 1001 l 119 803 l -11 803 l -81 943 q -110 1011 -101 986 q -118 1065 -118 1036 q -82 1156 -118 1119 q 10 1192 -46 1192 m 435 825 l 285 796 l 151 1133 l 372 1188 l 435 825 z "},"ἴ":{"ha":388,"x_min":-53,"x_max":500,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 75 1192 q 167 1156 131 1192 q 203 1065 203 1119 q 194 1011 203 1036 q 165 943 186 986 l 96 803 l -35 803 l 0 961 q -53 1065 -53 1001 q -17 1155 -53 1118 q 75 1192 19 1192 m 500 1133 l 367 796 l 217 825 l 279 1188 l 500 1133 z "},"ἵ":{"ha":388,"x_min":-90,"x_max":476,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 38 1192 q 129 1155 93 1192 q 165 1065 165 1118 q 113 961 165 1001 l 147 803 l 17 803 l -53 943 q -82 1011 -74 986 q -90 1065 -90 1036 q -54 1156 -90 1119 q 38 1192 -18 1192 m 476 1133 l 343 796 l 193 825 l 256 1188 l 476 1133 z "},"ἶ":{"ha":388,"x_min":-93,"x_max":465,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 267 1138 q 217 1144 238 1138 q 175 1167 197 1151 q 137 1191 149 1185 q 110 1197 125 1197 q 69 1183 85 1197 q 36 1138 54 1169 l -93 1200 q -13 1335 -64 1282 q 103 1389 38 1389 q 155 1382 133 1389 q 200 1358 176 1375 q 237 1335 224 1342 q 264 1329 250 1329 q 303 1343 288 1329 q 336 1389 318 1357 l 465 1326 q 385 1190 436 1243 q 267 1138 333 1138 m 128 894 q 58 999 58 929 q 94 1088 58 1051 q 186 1125 131 1125 q 278 1089 242 1125 q 314 999 314 1053 q 304 942 314 968 q 272 876 294 917 l 235 810 l 114 810 l 128 894 z "},"ἷ":{"ha":388,"x_min":-93,"x_max":465,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 267 1138 q 217 1144 238 1138 q 175 1167 197 1151 q 137 1191 149 1185 q 110 1197 125 1197 q 69 1183 85 1197 q 36 1138 54 1169 l -93 1200 q -13 1335 -64 1282 q 103 1389 38 1389 q 155 1382 133 1389 q 200 1358 176 1375 q 237 1335 224 1342 q 264 1329 250 1329 q 303 1343 288 1329 q 336 1389 318 1357 l 465 1326 q 385 1190 436 1243 q 267 1138 333 1138 m 138 810 l 100 876 q 68 942 78 917 q 58 999 58 968 q 94 1089 58 1053 q 186 1125 131 1125 q 278 1088 242 1125 q 314 999 314 1051 q 247 894 314 931 l 258 810 l 138 810 z "},"ὶ":{"ha":388,"x_min":-42,"x_max":381,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 274 838 l 99 808 l -42 1151 l 221 1206 l 274 838 z "},"ί":{"ha":388,"x_min":49,"x_max":417,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 417 1151 l 276 808 l 101 838 l 154 1206 l 417 1151 z "},"ῖ":{"ha":388,"x_min":-93,"x_max":465,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 z "},"ῐ":{"ha":388,"x_min":-71,"x_max":443,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 186 869 q 3 947 68 869 q -71 1142 -61 1025 l 72 1165 q 113 1085 85 1114 q 186 1056 142 1056 q 259 1085 231 1056 q 300 1165 288 1114 l 443 1142 q 369 947 433 1025 q 186 869 304 869 z "},"ῑ":{"ha":388,"x_min":-40,"x_max":411,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m -40 900 l -40 1086 l 411 1086 l 411 900 l -40 900 z "},"ῒ":{"ha":388,"x_min":-131,"x_max":501,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 293 1108 l 192 1018 l -46 1225 l 99 1367 l 293 1108 m 1 1072 q 95 1035 57 1072 q 133 944 133 997 q 95 853 133 890 q 1 815 57 815 q -92 853 -53 815 q -131 944 -131 890 q -92 1035 -131 997 q 1 1072 -53 1072 m 369 1072 q 463 1035 425 1072 q 501 944 501 997 q 463 853 501 890 q 369 815 425 815 q 276 853 315 815 q 238 944 238 890 q 276 1035 238 997 q 369 1072 315 1072 z "},"ΐ":{"ha":388,"x_min":-131,"x_max":501,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 m 419 1225 l 182 1018 l 81 1108 l 275 1367 l 419 1225 m 1 1072 q 94 1035 56 1072 q 133 944 133 997 q 94 853 133 890 q 1 815 56 815 q -92 853 -54 815 q -131 944 -131 890 q -92 1035 -131 997 q 1 1072 -54 1072 m 369 1072 q 463 1035 424 1072 q 501 944 501 997 q 463 853 501 890 q 369 815 424 815 q 276 853 314 815 q 238 944 238 890 q 276 1035 238 997 q 369 1072 314 1072 z "},"ῗ":{"ha":388,"x_min":-121,"x_max":483,"o":"m 324 281 q 336 209 324 233 q 381 168 349 185 l 303 -28 q 114 55 179 -10 q 49 244 49 119 l 49 742 l 324 742 l 324 281 z "},"ὀ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 z "},"ὁ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 364 1192 q 456 1155 419 1192 q 492 1065 492 1118 q 439 961 492 1001 l 474 803 l 343 803 l 274 943 q 244 1011 253 986 q 236 1065 236 1036 q 272 1156 236 1119 q 364 1192 308 1192 z "},"ὂ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 249 1192 q 340 1156 304 1192 q 376 1065 376 1119 q 368 1011 376 1036 q 339 943 360 986 l 269 803 l 139 803 l 174 961 q 121 1065 121 1001 q 157 1155 121 1118 q 249 1192 193 1192 m 674 825 l 524 796 l 390 1133 l 611 1188 l 674 825 z "},"ὃ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 229 1192 q 321 1155 285 1192 q 357 1065 357 1118 q 304 961 357 1001 l 339 803 l 208 803 l 139 943 q 110 1011 118 986 q 101 1065 101 1036 q 138 1156 101 1119 q 229 1192 174 1192 m 654 825 l 504 796 l 371 1133 l 592 1188 l 654 825 z "},"ὄ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 294 1192 q 386 1156 350 1192 q 422 1065 422 1119 q 414 1011 422 1036 q 385 943 406 986 l 315 803 l 185 803 l 219 961 q 167 1065 167 1001 q 203 1155 167 1118 q 294 1192 239 1192 m 719 1133 l 586 796 l 436 825 l 499 1188 l 719 1133 z "},"ὅ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 257 1192 q 349 1155 313 1192 q 385 1065 385 1118 q 332 961 385 1001 l 367 803 l 236 803 l 167 943 q 138 1011 146 986 q 129 1065 129 1036 q 165 1156 129 1119 q 257 1192 201 1192 m 696 1133 l 563 796 l 413 825 l 475 1188 l 696 1133 z "},"ὸ":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 493 838 l 318 808 l 178 1151 l 440 1206 l 493 838 z "},"ό":{"ha":811,"x_min":24,"x_max":788,"o":"m 406 769 q 685 665 583 769 q 788 369 788 561 q 741 160 788 250 q 608 21 694 69 q 406 -28 522 -28 q 126 76 228 -28 q 24 372 24 181 q 70 582 24 492 q 203 721 117 672 q 406 769 289 769 m 406 572 q 329 525 353 572 q 306 372 306 478 q 329 216 306 263 q 406 169 353 169 q 482 217 458 169 q 506 369 506 264 q 482 526 506 479 q 406 572 458 572 m 636 1151 l 496 808 l 321 838 l 374 1206 l 636 1151 z "},"ῤ":{"ha":815,"x_min":42,"x_max":785,"o":"m 408 769 q 688 669 590 769 q 785 374 785 568 q 748 167 785 258 q 644 24 711 76 q 489 -28 576 -28 q 395 -8 438 -28 q 317 56 353 11 l 317 -287 l 42 -315 l 42 385 q 133 670 42 571 q 408 769 224 769 m 404 168 q 503 369 503 168 q 478 531 503 489 q 408 574 454 574 q 338 526 358 574 q 317 365 317 479 l 317 228 q 356 181 335 194 q 404 168 376 168 z "},"ῥ":{"ha":815,"x_min":42,"x_max":785,"o":"m 408 769 q 688 669 590 769 q 785 374 785 568 q 748 167 785 258 q 644 24 711 76 q 489 -28 576 -28 q 395 -8 438 -28 q 317 56 353 11 l 317 -287 l 42 -315 l 42 385 q 133 670 42 571 q 408 769 224 769 m 404 168 q 503 369 503 168 q 478 531 503 489 q 408 574 454 574 q 338 526 358 574 q 317 365 317 479 l 317 228 q 356 181 335 194 q 404 168 376 168 m 367 1192 q 458 1155 422 1192 q 494 1065 494 1118 q 442 961 494 1001 l 476 803 l 346 803 l 276 943 q 247 1011 256 986 q 239 1065 239 1036 q 275 1156 239 1119 q 367 1192 311 1192 z "},"ὐ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 z "},"ὑ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 336 1192 q 428 1155 392 1192 q 464 1065 464 1118 q 411 961 464 1001 l 446 803 l 315 803 l 246 943 q 217 1011 225 986 q 208 1065 208 1036 q 244 1156 208 1119 q 336 1192 281 1192 z "},"ὒ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 221 1192 q 313 1156 276 1192 q 349 1065 349 1119 q 340 1011 349 1036 q 311 943 332 986 l 242 803 l 111 803 l 146 961 q 93 1065 93 1001 q 129 1155 93 1118 q 221 1192 165 1192 m 646 825 l 496 796 l 363 1133 l 583 1188 l 646 825 z "},"ὓ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 201 1192 q 293 1155 257 1192 q 329 1065 329 1118 q 276 961 329 1001 l 311 803 l 181 803 l 111 943 q 82 1011 90 986 q 74 1065 74 1036 q 110 1156 74 1119 q 201 1192 146 1192 m 626 825 l 476 796 l 343 1133 l 564 1188 l 626 825 z "},"ὔ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 267 1192 q 358 1156 322 1192 q 394 1065 394 1119 q 386 1011 394 1036 q 357 943 378 986 l 288 803 l 157 803 l 192 961 q 139 1065 139 1001 q 175 1155 139 1118 q 267 1192 211 1192 m 692 1133 l 558 796 l 408 825 l 471 1188 l 692 1133 z "},"ὕ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 229 1192 q 321 1155 285 1192 q 357 1065 357 1118 q 304 961 357 1001 l 339 803 l 208 803 l 139 943 q 110 1011 118 986 q 101 1065 101 1036 q 138 1156 101 1119 q 229 1192 174 1192 m 668 1133 l 535 796 l 385 825 l 447 1188 l 668 1133 z "},"ὖ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 458 1138 q 409 1144 429 1138 q 367 1167 389 1151 q 328 1191 340 1185 q 301 1197 317 1197 q 261 1183 276 1197 q 228 1138 246 1169 l 99 1200 q 178 1335 128 1282 q 294 1389 229 1389 q 347 1382 325 1389 q 392 1358 368 1375 q 428 1335 415 1342 q 456 1329 442 1329 q 494 1343 479 1329 q 528 1389 510 1357 l 657 1326 q 576 1190 628 1243 q 458 1138 525 1138 m 319 894 q 250 999 250 929 q 286 1088 250 1051 q 378 1125 322 1125 q 469 1089 433 1125 q 506 999 506 1053 q 496 942 506 968 q 464 876 486 917 l 426 810 l 306 810 l 319 894 z "},"ὗ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 458 1138 q 409 1144 429 1138 q 367 1167 389 1151 q 328 1191 340 1185 q 301 1197 317 1197 q 261 1183 276 1197 q 228 1138 246 1169 l 99 1200 q 178 1335 128 1282 q 294 1389 229 1389 q 347 1382 325 1389 q 392 1358 368 1375 q 428 1335 415 1342 q 456 1329 442 1329 q 494 1343 479 1329 q 528 1389 510 1357 l 657 1326 q 576 1190 628 1243 q 458 1138 525 1138 m 329 810 l 292 876 q 260 942 269 917 q 250 999 250 968 q 286 1089 250 1053 q 378 1125 322 1125 q 469 1088 433 1125 q 506 999 506 1051 q 439 894 506 931 l 450 810 l 329 810 z "},"ὺ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 465 838 l 290 808 l 150 1151 l 413 1206 l 465 838 z "},"ύ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 608 1151 l 468 808 l 293 838 l 346 1206 l 608 1151 z "},"ῦ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 z "},"ῠ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 378 869 q 195 947 260 869 q 121 1142 131 1025 l 264 1165 q 305 1085 276 1114 q 378 1056 333 1056 q 451 1085 422 1056 q 492 1165 479 1114 l 635 1142 q 560 947 625 1025 q 378 869 496 869 z "},"ῡ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 151 900 l 151 1086 l 603 1086 l 603 900 l 151 900 z "},"ῢ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 485 1108 l 383 1018 l 146 1225 l 290 1367 l 485 1108 m 193 1072 q 287 1035 249 1072 q 325 944 325 997 q 287 853 325 890 q 193 815 249 815 q 100 853 139 815 q 61 944 61 890 q 100 1035 61 997 q 193 1072 139 1072 m 561 1072 q 655 1035 617 1072 q 693 944 693 997 q 655 853 693 890 q 561 815 617 815 q 468 853 507 815 q 429 944 429 890 q 468 1035 429 997 q 561 1072 507 1072 z "},"ΰ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 m 611 1225 l 374 1018 l 272 1108 l 467 1367 l 611 1225 m 193 1072 q 286 1035 247 1072 q 325 944 325 997 q 286 853 325 890 q 193 815 247 815 q 99 853 138 815 q 61 944 61 890 q 99 1035 61 997 q 193 1072 138 1072 m 561 1072 q 654 1035 615 1072 q 693 944 693 997 q 654 853 693 890 q 561 815 615 815 q 467 853 506 815 q 429 944 429 890 q 467 1035 429 997 q 561 1072 506 1072 z "},"ῧ":{"ha":776,"x_min":49,"x_max":742,"o":"m 699 742 q 730 544 718 640 q 742 339 742 447 q 688 131 742 214 q 547 10 633 49 q 358 -28 460 -28 q 136 44 224 -28 q 49 265 49 117 l 49 742 l 324 742 l 324 264 q 338 190 324 211 q 381 169 353 169 q 443 215 419 169 q 467 360 467 261 q 429 742 467 517 l 699 742 z "},"ὠ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 z "},"ὡ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 494 1192 q 586 1155 550 1192 q 622 1065 622 1118 q 569 961 622 1001 l 604 803 l 474 803 l 404 943 q 375 1011 383 986 q 367 1065 367 1036 q 403 1156 367 1119 q 494 1192 439 1192 z "},"ὢ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 379 1192 q 471 1156 435 1192 q 507 1065 507 1119 q 499 1011 507 1036 q 469 943 490 986 l 400 803 l 269 803 l 304 961 q 251 1065 251 1001 q 288 1155 251 1118 q 379 1192 324 1192 m 804 825 l 654 796 l 521 1133 l 742 1188 l 804 825 z "},"ὣ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 360 1192 q 451 1155 415 1192 q 488 1065 488 1118 q 435 961 488 1001 l 469 803 l 339 803 l 269 943 q 240 1011 249 986 q 232 1065 232 1036 q 268 1156 232 1119 q 360 1192 304 1192 m 785 825 l 635 796 l 501 1133 l 722 1188 l 785 825 z "},"ὤ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 425 1192 q 517 1156 481 1192 q 553 1065 553 1119 q 544 1011 553 1036 q 515 943 536 986 l 446 803 l 315 803 l 350 961 q 297 1065 297 1001 q 333 1155 297 1118 q 425 1192 369 1192 m 850 1133 l 717 796 l 567 825 l 629 1188 l 850 1133 z "},"ὥ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 388 1192 q 479 1155 443 1192 q 515 1065 515 1118 q 463 961 515 1001 l 497 803 l 367 803 l 297 943 q 268 1011 276 986 q 260 1065 260 1036 q 296 1156 260 1119 q 388 1192 332 1192 m 826 1133 l 693 796 l 543 825 l 606 1188 l 826 1133 z "},"ὦ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 617 1138 q 567 1144 588 1138 q 525 1167 547 1151 q 487 1191 499 1185 q 460 1197 475 1197 q 419 1183 435 1197 q 386 1138 404 1169 l 257 1200 q 337 1335 286 1282 q 453 1389 388 1389 q 505 1382 483 1389 q 550 1358 526 1375 q 587 1335 574 1342 q 614 1329 600 1329 q 653 1343 638 1329 q 686 1389 668 1357 l 815 1326 q 735 1190 786 1243 q 617 1138 683 1138 m 478 894 q 408 999 408 929 q 444 1088 408 1051 q 536 1125 481 1125 q 628 1089 592 1125 q 664 999 664 1053 q 654 942 664 968 q 622 876 644 917 l 585 810 l 464 810 l 478 894 z "},"ὧ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 617 1138 q 567 1144 588 1138 q 525 1167 547 1151 q 487 1191 499 1185 q 460 1197 475 1197 q 419 1183 435 1197 q 386 1138 404 1169 l 257 1200 q 337 1335 286 1282 q 453 1389 388 1389 q 505 1382 483 1389 q 550 1358 526 1375 q 587 1335 574 1342 q 614 1329 600 1329 q 653 1343 638 1329 q 686 1389 668 1357 l 815 1326 q 735 1190 786 1243 q 617 1138 683 1138 m 488 810 l 450 876 q 418 942 428 917 q 408 999 408 968 q 444 1089 408 1053 q 536 1125 481 1125 q 628 1088 592 1125 q 664 999 664 1051 q 597 894 664 931 l 608 810 l 488 810 z "},"ὼ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 624 838 l 449 808 l 308 1151 l 571 1206 l 624 838 z "},"ώ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 767 1151 l 626 808 l 451 838 l 504 1206 l 767 1151 z "},"ῶ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 z "},"ῳ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ῲ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 624 838 l 449 808 l 308 1151 l 571 1206 l 624 838 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ῴ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 767 1151 l 626 808 l 451 838 l 504 1206 l 767 1151 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾠ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾡ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 494 1192 q 586 1155 550 1192 q 622 1065 622 1118 q 569 961 622 1001 l 604 803 l 474 803 l 404 943 q 375 1011 383 986 q 367 1065 367 1036 q 403 1156 367 1119 q 494 1192 439 1192 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾢ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 379 1192 q 471 1156 435 1192 q 507 1065 507 1119 q 499 1011 507 1036 q 469 943 490 986 l 400 803 l 269 803 l 304 961 q 251 1065 251 1001 q 288 1155 251 1118 q 379 1192 324 1192 m 804 825 l 654 796 l 521 1133 l 742 1188 l 804 825 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾣ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 360 1192 q 451 1155 415 1192 q 488 1065 488 1118 q 435 961 488 1001 l 469 803 l 339 803 l 269 943 q 240 1011 249 986 q 232 1065 232 1036 q 268 1156 232 1119 q 360 1192 304 1192 m 785 825 l 635 796 l 501 1133 l 722 1188 l 785 825 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾤ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 425 1192 q 517 1156 481 1192 q 553 1065 553 1119 q 544 1011 553 1036 q 515 943 536 986 l 446 803 l 315 803 l 350 961 q 297 1065 297 1001 q 333 1155 297 1118 q 425 1192 369 1192 m 850 1133 l 717 796 l 567 825 l 629 1188 l 850 1133 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾥ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 388 1192 q 479 1155 443 1192 q 515 1065 515 1118 q 463 961 515 1001 l 497 803 l 367 803 l 297 943 q 268 1011 276 986 q 260 1065 260 1036 q 296 1156 260 1119 q 388 1192 332 1192 m 826 1133 l 693 796 l 543 825 l 606 1188 l 826 1133 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾦ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 617 1138 q 567 1144 588 1138 q 525 1167 547 1151 q 487 1191 499 1185 q 460 1197 475 1197 q 419 1183 435 1197 q 386 1138 404 1169 l 257 1200 q 337 1335 286 1282 q 453 1389 388 1389 q 505 1382 483 1389 q 550 1358 526 1375 q 587 1335 574 1342 q 614 1329 600 1329 q 653 1343 638 1329 q 686 1389 668 1357 l 815 1326 q 735 1190 786 1243 q 617 1138 683 1138 m 478 894 q 408 999 408 929 q 444 1088 408 1051 q 536 1125 481 1125 q 628 1089 592 1125 q 664 999 664 1053 q 654 942 664 968 q 622 876 644 917 l 585 810 l 464 810 l 478 894 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ᾧ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 617 1138 q 567 1144 588 1138 q 525 1167 547 1151 q 487 1191 499 1185 q 460 1197 475 1197 q 419 1183 435 1197 q 386 1138 404 1169 l 257 1200 q 337 1335 286 1282 q 453 1389 388 1389 q 505 1382 483 1389 q 550 1358 526 1375 q 587 1335 574 1342 q 614 1329 600 1329 q 653 1343 638 1329 q 686 1389 668 1357 l 815 1326 q 735 1190 786 1243 q 617 1138 683 1138 m 488 810 l 450 876 q 418 942 428 917 q 408 999 408 968 q 444 1089 408 1053 q 536 1125 481 1125 q 628 1088 592 1125 q 664 999 664 1051 q 597 894 664 931 l 608 810 l 488 810 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ῷ":{"ha":1072,"x_min":28,"x_max":1044,"o":"m 956 742 q 1044 339 1044 554 q 967 65 1044 157 q 760 -28 890 -28 q 611 10 665 -28 q 535 138 557 49 q 458 10 510 49 q 315 -28 407 -28 q 103 64 179 -28 q 28 339 28 156 q 117 742 28 554 l 360 742 q 311 535 328 624 q 294 356 294 447 q 311 213 294 257 q 361 169 328 169 q 398 188 386 169 q 410 264 410 207 l 410 493 l 663 526 l 663 264 q 676 188 663 207 q 715 169 689 169 q 763 213 747 169 q 778 356 778 256 q 761 536 778 447 q 713 742 744 625 l 956 742 m 644 -294 q 497 -240 549 -294 q 444 -99 444 -186 l 444 -61 l 629 -61 l 629 -93 q 682 -149 629 -149 q 749 -129 713 -149 l 811 -240 q 644 -294 743 -294 z "},"ͺ":{"ha":558,"x_min":42,"x_max":408,"o":"m 242 -294 q 94 -240 146 -294 q 42 -99 42 -186 l 42 -61 l 226 -61 l 226 -93 q 279 -149 226 -149 q 346 -129 310 -149 l 408 -240 q 242 -294 340 -294 z "},"ℊ":{"ha":822,"x_min":21,"x_max":767,"o":"m 767 742 l 767 44 q 660 -225 767 -135 q 365 -315 554 -315 q 65 -242 190 -315 l 146 -76 q 235 -108 185 -96 q 338 -121 285 -121 q 453 -90 414 -121 q 492 6 492 -60 l 492 79 q 310 0 421 0 q 94 105 167 0 q 21 389 21 210 q 60 583 21 496 q 168 719 99 669 q 324 769 238 769 q 514 690 436 769 l 526 742 l 767 742 m 399 197 q 492 263 454 197 l 492 531 q 449 563 469 553 q 403 574 428 574 q 303 386 303 574 q 328 235 303 274 q 399 197 353 197 z "},"ᵊ":{"ha":458,"x_min":42,"x_max":417,"o":"m 226 935 q 367 885 317 935 q 417 740 417 835 q 366 595 417 647 q 225 543 315 543 q 91 592 140 543 q 42 735 42 640 q 44 779 42 760 l 306 779 q 224 850 299 850 q 115 822 167 850 l 76 889 q 226 935 140 935 m 225 629 q 307 707 301 629 l 147 707 l 147 699 q 225 629 147 629 z "},"ᶿ":{"ha":463,"x_min":42,"x_max":421,"o":"m 233 1082 q 421 813 421 1082 q 376 613 421 682 q 228 543 332 543 q 86 612 131 543 q 42 810 42 681 q 88 1013 42 944 q 233 1082 135 1082 m 233 994 q 175 963 192 994 q 156 850 158 931 l 307 850 q 289 963 304 932 q 233 994 274 994 m 228 631 q 286 665 268 631 q 307 775 304 699 l 154 775 q 174 665 157 700 q 228 631 192 631 z "},"₀":{"ha":556,"x_min":19,"x_max":535,"o":"m 278 317 q 468 236 401 317 q 535 6 535 156 q 467 -225 535 -143 q 278 -307 400 -307 q 87 -225 154 -307 q 19 6 19 -143 q 87 236 19 156 q 278 317 154 317 m 278 174 q 245 160 256 174 q 230 111 235 146 q 225 6 225 76 q 230 -100 225 -65 q 245 -149 235 -135 q 278 -162 256 -162 q 310 -150 299 -162 q 326 -102 321 -137 q 331 6 331 -67 q 326 115 331 79 q 310 162 321 150 q 278 174 300 174 z "},"₁":{"ha":556,"x_min":33,"x_max":438,"o":"m 438 -287 l 243 -287 l 243 121 l 121 43 l 33 172 l 258 301 l 438 301 l 438 -287 z "},"₂":{"ha":556,"x_min":35,"x_max":519,"o":"m 269 317 q 400 292 346 317 q 481 226 454 267 q 507 138 507 185 q 490 60 507 96 q 426 -24 474 24 q 283 -140 378 -71 l 519 -140 l 500 -287 l 63 -287 l 63 -153 q 214 -16 164 -65 q 283 63 264 33 q 303 119 303 93 q 288 158 303 144 q 246 172 272 172 q 192 158 217 172 q 144 115 168 144 l 35 201 q 134 285 74 254 q 269 317 194 317 z "},"₃":{"ha":556,"x_min":29,"x_max":526,"o":"m 278 317 q 445 273 386 317 q 504 160 504 229 q 472 76 504 113 q 369 22 439 39 q 484 -17 442 18 q 526 -119 526 -53 q 497 -213 526 -171 q 410 -281 468 -256 q 267 -307 351 -307 q 29 -207 115 -307 l 136 -104 q 190 -146 163 -133 q 251 -158 217 -158 q 301 -146 282 -158 q 321 -106 321 -133 q 301 -60 321 -75 q 240 -46 282 -46 l 185 -46 l 207 85 l 246 85 q 313 129 313 85 q 296 163 313 151 q 250 174 279 174 q 136 126 188 174 l 39 226 q 278 317 133 317 z "},"₄":{"ha":556,"x_min":19,"x_max":535,"o":"m 535 -181 l 475 -181 l 475 -287 l 290 -287 l 290 -181 l 19 -181 l 19 -51 l 182 317 l 347 257 l 221 -39 l 292 -39 l 333 83 l 475 83 l 475 -39 l 535 -39 l 535 -181 z "},"₅":{"ha":556,"x_min":29,"x_max":525,"o":"m 469 171 l 249 171 l 249 90 q 346 111 301 111 q 474 59 424 111 q 525 -86 525 7 q 453 -247 525 -186 q 258 -307 381 -307 q 29 -201 113 -307 l 139 -104 q 246 -161 182 -161 q 321 -86 321 -161 q 305 -31 321 -47 q 258 -14 289 -14 q 199 -35 231 -14 l 69 -35 l 69 301 l 490 301 l 469 171 z "},"₆":{"ha":556,"x_min":22,"x_max":532,"o":"m 349 113 q 482 60 432 113 q 532 -85 532 7 q 503 -192 532 -142 q 417 -275 474 -243 q 282 -307 361 -307 q 88 -232 153 -307 q 22 -26 22 -157 q 103 223 22 129 q 325 317 185 317 q 478 275 417 317 l 407 161 q 370 177 386 172 q 332 182 354 182 q 232 72 244 182 q 349 113 283 113 m 285 -169 q 331 -86 331 -169 q 320 -26 331 -42 q 283 -10 310 -10 q 235 -22 257 -10 q 244 -139 233 -108 q 285 -169 254 -169 z "},"₇":{"ha":556,"x_min":58,"x_max":496,"o":"m 496 172 l 274 -307 l 99 -240 l 296 160 l 58 160 l 58 301 l 496 301 l 496 172 z "},"₈":{"ha":556,"x_min":15,"x_max":540,"o":"m 419 28 q 512 -41 483 -3 q 540 -126 540 -79 q 510 -215 540 -174 q 419 -281 479 -256 q 274 -307 360 -307 q 133 -282 192 -307 q 45 -217 75 -257 q 15 -129 15 -176 q 44 -47 15 -82 q 128 10 74 -11 q 39 151 39 63 q 67 234 39 196 q 150 294 96 272 q 278 317 204 317 q 454 274 390 317 q 518 163 518 232 q 494 92 518 128 q 419 28 469 56 m 279 193 q 229 149 229 193 q 268 90 229 107 l 292 81 q 320 113 314 97 q 326 150 326 129 q 314 181 326 169 q 279 193 301 193 m 281 -172 q 330 -158 314 -172 q 346 -124 346 -144 q 332 -87 346 -100 q 286 -61 318 -74 l 246 -47 q 220 -78 229 -60 q 211 -117 211 -97 q 230 -157 211 -142 q 281 -172 249 -172 z "},"₉":{"ha":556,"x_min":18,"x_max":536,"o":"m 276 317 q 469 253 401 317 q 536 89 536 190 q 430 -188 536 -89 q 100 -318 324 -287 l 60 -182 q 237 -132 182 -160 q 322 -44 292 -104 q 265 -76 292 -67 q 199 -86 238 -86 q 70 -36 122 -86 q 18 104 18 14 q 51 214 18 165 q 144 290 85 263 q 276 317 203 317 m 219 117 q 233 49 219 65 q 269 32 246 32 q 329 61 306 32 q 320 160 331 135 q 275 186 310 186 q 235 169 250 186 q 219 117 219 153 z "},"⁰":{"ha":556,"x_min":19,"x_max":535,"o":"m 278 1049 q 468 968 401 1049 q 535 738 535 888 q 467 507 535 589 q 278 425 400 425 q 87 507 154 425 q 19 738 19 589 q 87 968 19 888 q 278 1049 154 1049 m 278 906 q 245 892 256 906 q 230 843 235 878 q 225 738 225 808 q 230 632 225 667 q 245 583 235 597 q 278 569 256 569 q 310 582 299 569 q 326 630 321 594 q 331 738 331 665 q 326 847 331 811 q 310 894 321 882 q 278 906 300 906 z "},"¹":{"ha":556,"x_min":33,"x_max":438,"o":"m 438 444 l 243 444 l 243 853 l 121 775 l 33 904 l 258 1033 l 438 1033 l 438 444 z "},"²":{"ha":556,"x_min":35,"x_max":519,"o":"m 269 1049 q 400 1024 346 1049 q 481 958 454 999 q 507 869 507 917 q 490 792 507 828 q 426 708 474 756 q 283 592 378 661 l 519 592 l 500 444 l 63 444 l 63 579 q 214 716 164 667 q 283 795 264 765 q 303 851 303 825 q 288 890 303 876 q 246 904 272 904 q 192 890 217 904 q 144 847 168 876 l 35 933 q 134 1017 74 986 q 269 1049 194 1049 z "},"³":{"ha":556,"x_min":29,"x_max":526,"o":"m 278 1049 q 445 1005 386 1049 q 504 892 504 961 q 472 808 504 844 q 369 754 439 771 q 484 715 442 750 q 526 613 526 679 q 497 519 526 561 q 410 451 468 476 q 267 425 351 425 q 29 525 115 425 l 136 628 q 190 586 163 599 q 251 574 217 574 q 301 586 282 574 q 321 626 321 599 q 301 672 321 657 q 240 686 282 686 l 185 686 l 207 817 l 246 817 q 313 861 313 817 q 296 894 313 883 q 250 906 279 906 q 136 858 188 906 l 39 958 q 278 1049 133 1049 z "},"⁴":{"ha":556,"x_min":19,"x_max":535,"o":"m 535 551 l 475 551 l 475 444 l 290 444 l 290 551 l 19 551 l 19 681 l 182 1049 l 347 989 l 221 693 l 292 693 l 333 815 l 475 815 l 475 693 l 535 693 l 535 551 z "},"⁵":{"ha":556,"x_min":29,"x_max":525,"o":"m 469 903 l 249 903 l 249 822 q 346 843 301 843 q 474 791 424 843 q 525 646 525 739 q 453 485 525 546 q 258 425 381 425 q 29 531 113 425 l 139 628 q 246 571 182 571 q 321 646 321 571 q 305 701 321 685 q 258 718 289 718 q 199 697 231 718 l 69 697 l 69 1033 l 490 1033 l 469 903 z "},"⁶":{"ha":556,"x_min":22,"x_max":532,"o":"m 349 844 q 482 792 432 844 q 532 647 532 739 q 503 540 532 590 q 417 457 474 489 q 282 425 361 425 q 88 500 153 425 q 22 706 22 575 q 103 955 22 861 q 325 1049 185 1049 q 478 1007 417 1049 l 407 893 q 370 909 386 904 q 332 914 354 914 q 232 804 244 914 q 349 844 283 844 m 285 563 q 331 646 331 563 q 320 706 331 690 q 283 722 310 722 q 235 710 257 722 q 244 593 233 624 q 285 563 254 563 z "},"⁷":{"ha":556,"x_min":58,"x_max":496,"o":"m 496 904 l 274 425 l 99 492 l 296 892 l 58 892 l 58 1033 l 496 1033 l 496 904 z "},"⁸":{"ha":556,"x_min":15,"x_max":540,"o":"m 419 760 q 512 691 483 729 q 540 606 540 653 q 510 517 540 558 q 419 451 479 476 q 274 425 360 425 q 133 450 192 425 q 45 515 75 475 q 15 603 15 556 q 44 685 15 650 q 128 742 74 721 q 39 883 39 794 q 67 966 39 928 q 150 1026 96 1004 q 278 1049 204 1049 q 454 1006 390 1049 q 518 894 518 964 q 494 824 518 860 q 419 760 469 788 m 279 925 q 229 881 229 925 q 268 822 229 839 l 292 813 q 320 845 314 829 q 326 882 326 861 q 314 913 326 901 q 279 925 301 925 m 281 560 q 330 574 314 560 q 346 608 346 588 q 332 645 346 632 q 286 671 318 658 l 246 685 q 220 653 229 672 q 211 615 211 635 q 230 575 211 590 q 281 560 249 560 z "},"⁹":{"ha":556,"x_min":18,"x_max":536,"o":"m 276 1049 q 469 985 401 1049 q 536 821 536 922 q 430 544 536 643 q 100 414 324 444 l 60 550 q 237 600 182 572 q 322 688 292 628 q 265 656 292 665 q 199 646 238 646 q 70 696 122 646 q 18 836 18 746 q 51 946 18 897 q 144 1022 85 994 q 276 1049 203 1049 m 219 849 q 233 781 219 797 q 269 764 246 764 q 329 793 306 764 q 320 892 331 867 q 275 918 310 918 q 235 901 250 918 q 219 849 219 885 z "},"⁄":{"ha":265,"x_min":-232,"x_max":497,"o":"m 497 985 l -78 -125 l -232 -49 l 343 1061 l 497 985 z "},"⅟":{"ha":821,"x_min":33,"x_max":1053,"o":"m 438 378 l 243 378 l 243 786 l 121 708 l 33 838 l 258 967 l 438 967 l 438 378 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 z "},"½":{"ha":1376,"x_min":33,"x_max":1340,"o":"m 438 378 l 243 378 l 243 786 l 121 708 l 33 838 l 258 967 l 438 967 l 438 378 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1090 604 q 1221 579 1167 604 q 1301 513 1275 554 q 1328 425 1328 472 q 1311 347 1328 383 q 1247 264 1294 311 q 1104 147 1199 217 l 1340 147 l 1321 0 l 883 0 l 883 135 q 1035 272 985 222 q 1104 351 1085 321 q 1124 407 1124 381 q 1108 446 1124 432 q 1067 460 1093 460 q 1013 446 1038 460 q 965 403 989 432 l 856 489 q 955 573 894 542 q 1090 604 1015 604 z "},"⅓":{"ha":1376,"x_min":33,"x_max":1347,"o":"m 438 378 l 243 378 l 243 786 l 121 708 l 33 838 l 258 967 l 438 967 l 438 378 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1099 604 q 1266 560 1207 604 q 1325 447 1325 517 q 1292 363 1325 400 q 1190 310 1260 326 q 1305 270 1263 306 q 1347 168 1347 235 q 1318 74 1347 117 q 1231 6 1289 32 q 1088 -19 1172 -19 q 850 81 936 -19 l 957 183 q 1010 142 983 154 q 1072 129 1038 129 q 1122 142 1103 129 q 1142 182 1142 154 q 1122 227 1142 213 q 1061 242 1103 242 l 1006 242 l 1028 372 l 1067 372 q 1133 417 1133 372 q 1117 450 1133 439 q 1071 461 1100 461 q 957 414 1008 461 l 860 514 q 1099 604 954 604 z "},"⅔":{"ha":1376,"x_min":35,"x_max":1347,"o":"m 269 989 q 400 964 346 989 q 481 898 454 939 q 507 810 507 857 q 490 732 507 768 q 426 649 474 696 q 283 532 378 601 l 519 532 l 500 385 l 63 385 l 63 519 q 214 656 164 607 q 283 735 264 706 q 303 792 303 765 q 288 831 303 817 q 246 844 272 844 q 192 831 217 844 q 144 788 168 817 l 35 874 q 134 958 74 926 q 269 989 194 989 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1099 604 q 1266 560 1207 604 q 1325 447 1325 517 q 1292 363 1325 400 q 1190 310 1260 326 q 1305 270 1263 306 q 1347 168 1347 235 q 1318 74 1347 117 q 1231 6 1289 32 q 1088 -19 1172 -19 q 850 81 936 -19 l 957 183 q 1010 142 983 154 q 1072 129 1038 129 q 1122 142 1103 129 q 1142 182 1142 154 q 1122 227 1142 213 q 1061 242 1103 242 l 1006 242 l 1028 372 l 1067 372 q 1133 417 1133 372 q 1117 450 1133 439 q 1071 461 1100 461 q 957 414 1008 461 l 860 514 q 1099 604 954 604 z "},"¼":{"ha":1376,"x_min":33,"x_max":1356,"o":"m 438 378 l 243 378 l 243 786 l 121 708 l 33 838 l 258 967 l 438 967 l 438 378 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1356 107 l 1296 107 l 1296 0 l 1111 0 l 1111 107 l 840 107 l 840 236 l 1003 604 l 1168 544 l 1042 249 l 1113 249 l 1154 371 l 1296 371 l 1296 249 l 1356 249 l 1356 107 z "},"¾":{"ha":1376,"x_min":29,"x_max":1356,"o":"m 278 982 q 445 938 386 982 q 504 825 504 894 q 472 741 504 778 q 369 688 439 704 q 484 648 442 683 q 526 546 526 613 q 497 452 526 494 q 410 384 468 410 q 267 358 351 358 q 29 458 115 358 l 136 561 q 190 519 163 532 q 251 507 217 507 q 301 519 282 507 q 321 560 321 532 q 301 605 321 590 q 240 619 282 619 l 185 619 l 207 750 l 246 750 q 313 794 313 750 q 296 828 313 817 q 250 839 279 839 q 136 792 188 839 l 39 892 q 278 982 133 982 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1356 107 l 1296 107 l 1296 0 l 1111 0 l 1111 107 l 840 107 l 840 236 l 1003 604 l 1168 544 l 1042 249 l 1113 249 l 1154 371 l 1296 371 l 1296 249 l 1356 249 l 1356 107 z "},"⅕":{"ha":1376,"x_min":33,"x_max":1346,"o":"m 438 378 l 243 378 l 243 786 l 121 708 l 33 838 l 258 967 l 438 967 l 438 378 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1290 458 l 1069 458 l 1069 378 q 1167 399 1122 399 q 1295 347 1244 399 q 1346 201 1346 294 q 1274 41 1346 101 q 1079 -19 1201 -19 q 850 86 933 -19 l 960 183 q 1067 126 1003 126 q 1142 201 1142 126 q 1126 257 1142 240 q 1079 274 1110 274 q 1019 253 1051 274 l 890 253 l 890 589 l 1311 589 l 1290 458 z "},"⅖":{"ha":1376,"x_min":35,"x_max":1346,"o":"m 269 989 q 400 964 346 989 q 481 898 454 939 q 507 810 507 857 q 490 732 507 768 q 426 649 474 696 q 283 532 378 601 l 519 532 l 500 385 l 63 385 l 63 519 q 214 656 164 607 q 283 735 264 706 q 303 792 303 765 q 288 831 303 817 q 246 844 272 844 q 192 831 217 844 q 144 788 168 817 l 35 874 q 134 958 74 926 q 269 989 194 989 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1290 458 l 1069 458 l 1069 378 q 1167 399 1122 399 q 1295 347 1244 399 q 1346 201 1346 294 q 1274 41 1346 101 q 1079 -19 1201 -19 q 850 86 933 -19 l 960 183 q 1067 126 1003 126 q 1142 201 1142 126 q 1126 257 1142 240 q 1079 274 1110 274 q 1019 253 1051 274 l 890 253 l 890 589 l 1311 589 l 1290 458 z "},"⅗":{"ha":1376,"x_min":29,"x_max":1346,"o":"m 278 982 q 445 938 386 982 q 504 825 504 894 q 472 741 504 778 q 369 688 439 704 q 484 648 442 683 q 526 546 526 613 q 497 452 526 494 q 410 384 468 410 q 267 358 351 358 q 29 458 115 358 l 136 561 q 190 519 163 532 q 251 507 217 507 q 301 519 282 507 q 321 560 321 532 q 301 605 321 590 q 240 619 282 619 l 185 619 l 207 750 l 246 750 q 313 794 313 750 q 296 828 313 817 q 250 839 279 839 q 136 792 188 839 l 39 892 q 278 982 133 982 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1290 458 l 1069 458 l 1069 378 q 1167 399 1122 399 q 1295 347 1244 399 q 1346 201 1346 294 q 1274 41 1346 101 q 1079 -19 1201 -19 q 850 86 933 -19 l 960 183 q 1067 126 1003 126 q 1142 201 1142 126 q 1126 257 1142 240 q 1079 274 1110 274 q 1019 253 1051 274 l 890 253 l 890 589 l 1311 589 l 1290 458 z "},"⅘":{"ha":1376,"x_min":19,"x_max":1346,"o":"m 535 485 l 475 485 l 475 378 l 290 378 l 290 485 l 19 485 l 19 614 l 182 982 l 347 922 l 221 626 l 292 626 l 333 749 l 475 749 l 475 626 l 535 626 l 535 485 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1290 458 l 1069 458 l 1069 378 q 1167 399 1122 399 q 1295 347 1244 399 q 1346 201 1346 294 q 1274 41 1346 101 q 1079 -19 1201 -19 q 850 86 933 -19 l 960 183 q 1067 126 1003 126 q 1142 201 1142 126 q 1126 257 1142 240 q 1079 274 1110 274 q 1019 253 1051 274 l 890 253 l 890 589 l 1311 589 l 1290 458 z "},"⅙":{"ha":1376,"x_min":33,"x_max":1353,"o":"m 438 378 l 243 378 l 243 786 l 121 708 l 33 838 l 258 967 l 438 967 l 438 378 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1169 400 q 1303 347 1253 400 q 1353 203 1353 294 q 1324 95 1353 146 q 1238 13 1294 44 q 1103 -19 1182 -19 q 908 56 974 -19 q 843 261 843 131 q 924 510 843 417 q 1146 604 1006 604 q 1299 563 1238 604 l 1228 449 q 1191 465 1207 460 q 1153 469 1175 469 q 1053 360 1065 469 q 1169 400 1104 400 m 1106 118 q 1151 201 1151 118 q 1141 262 1151 246 q 1104 278 1131 278 q 1056 265 1078 278 q 1065 149 1054 179 q 1106 118 1075 118 z "},"⅚":{"ha":1376,"x_min":29,"x_max":1353,"o":"m 469 836 l 249 836 l 249 756 q 346 776 301 776 q 474 724 424 776 q 525 579 525 672 q 453 419 525 479 q 258 358 381 358 q 29 464 113 358 l 139 561 q 246 504 182 504 q 321 579 321 504 q 305 635 321 618 q 258 651 289 651 q 199 631 231 651 l 69 631 l 69 967 l 490 967 l 469 836 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1169 400 q 1303 347 1253 400 q 1353 203 1353 294 q 1324 95 1353 146 q 1238 13 1294 44 q 1103 -19 1182 -19 q 908 56 974 -19 q 843 261 843 131 q 924 510 843 417 q 1146 604 1006 604 q 1299 563 1238 604 l 1228 449 q 1191 465 1207 460 q 1153 469 1175 469 q 1053 360 1065 469 q 1169 400 1104 400 m 1106 118 q 1151 201 1151 118 q 1141 262 1151 246 q 1104 278 1131 278 q 1056 265 1078 278 q 1065 149 1054 179 q 1106 118 1075 118 z "},"⅛":{"ha":1376,"x_min":33,"x_max":1361,"o":"m 438 378 l 243 378 l 243 786 l 121 708 l 33 838 l 258 967 l 438 967 l 438 378 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1240 315 q 1333 247 1304 285 q 1361 161 1361 208 q 1331 73 1361 114 q 1240 6 1300 32 q 1094 -19 1181 -19 q 954 6 1013 -19 q 866 71 896 31 q 836 158 836 111 q 865 241 836 206 q 949 297 894 276 q 860 439 860 350 q 888 522 860 483 q 971 582 917 560 q 1099 604 1025 604 q 1275 562 1211 604 q 1339 450 1339 519 q 1315 379 1339 415 q 1240 315 1290 343 m 1100 481 q 1050 436 1050 481 q 1089 378 1050 394 l 1113 368 q 1141 401 1135 385 q 1147 438 1147 417 q 1135 469 1147 457 q 1100 481 1122 481 m 1101 115 q 1151 129 1135 115 q 1167 164 1167 143 q 1153 201 1167 188 q 1107 226 1139 214 l 1067 240 q 1041 209 1050 228 q 1032 171 1032 190 q 1051 131 1032 146 q 1101 115 1069 115 z "},"⅜":{"ha":1376,"x_min":29,"x_max":1361,"o":"m 278 982 q 445 938 386 982 q 504 825 504 894 q 472 741 504 778 q 369 688 439 704 q 484 648 442 683 q 526 546 526 613 q 497 452 526 494 q 410 384 468 410 q 267 358 351 358 q 29 458 115 358 l 136 561 q 190 519 163 532 q 251 507 217 507 q 301 519 282 507 q 321 560 321 532 q 301 605 321 590 q 240 619 282 619 l 185 619 l 207 750 l 246 750 q 313 794 313 750 q 296 828 313 817 q 250 839 279 839 q 136 792 188 839 l 39 892 q 278 982 133 982 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1240 315 q 1333 247 1304 285 q 1361 161 1361 208 q 1331 73 1361 114 q 1240 6 1300 32 q 1094 -19 1181 -19 q 954 6 1013 -19 q 866 71 896 31 q 836 158 836 111 q 865 241 836 206 q 949 297 894 276 q 860 439 860 350 q 888 522 860 483 q 971 582 917 560 q 1099 604 1025 604 q 1275 562 1211 604 q 1339 450 1339 519 q 1315 379 1339 415 q 1240 315 1290 343 m 1100 481 q 1050 436 1050 481 q 1089 378 1050 394 l 1113 368 q 1141 401 1135 385 q 1147 438 1147 417 q 1135 469 1147 457 q 1100 481 1122 481 m 1101 115 q 1151 129 1135 115 q 1167 164 1167 143 q 1153 201 1167 188 q 1107 226 1139 214 l 1067 240 q 1041 209 1050 228 q 1032 171 1032 190 q 1051 131 1032 146 q 1101 115 1069 115 z "},"⅝":{"ha":1376,"x_min":29,"x_max":1361,"o":"m 469 836 l 249 836 l 249 756 q 346 776 301 776 q 474 724 424 776 q 525 579 525 672 q 453 419 525 479 q 258 358 381 358 q 29 464 113 358 l 139 561 q 246 504 182 504 q 321 579 321 504 q 305 635 321 618 q 258 651 289 651 q 199 631 231 651 l 69 631 l 69 967 l 490 967 l 469 836 m 1053 985 l 478 -125 l 324 -49 l 899 1061 l 1053 985 m 1240 315 q 1333 247 1304 285 q 1361 161 1361 208 q 1331 73 1361 114 q 1240 6 1300 32 q 1094 -19 1181 -19 q 954 6 1013 -19 q 866 71 896 31 q 836 158 836 111 q 865 241 836 206 q 949 297 894 276 q 860 439 860 350 q 888 522 860 483 q 971 582 917 560 q 1099 604 1025 604 q 1275 562 1211 604 q 1339 450 1339 519 q 1315 379 1339 415 q 1240 315 1290 343 m 1100 481 q 1050 436 1050 481 q 1089 378 1050 394 l 1113 368 q 1141 401 1135 385 q 1147 438 1147 417 q 1135 469 1147 457 q 1100 481 1122 481 m 1101 115 q 1151 129 1135 115 q 1167 164 1167 143 q 1153 201 1167 188 q 1107 226 1139 214 l 1067 240 q 1041 209 1050 228 q 1032 171 1032 190 q 1051 131 1032 146 q 1101 115 1069 115 z "},"⅞":{"ha":1276,"x_min":58,"x_max":1261,"o":"m 496 838 l 274 358 l 99 425 l 296 825 l 58 825 l 58 967 l 496 967 l 496 838 m 956 985 l 381 -125 l 226 -49 l 801 1061 l 956 985 m 1140 315 q 1233 247 1204 285 q 1261 161 1261 208 q 1231 73 1261 114 q 1140 6 1200 32 q 994 -19 1081 -19 q 854 6 913 -19 q 766 71 796 31 q 736 158 736 111 q 765 241 736 206 q 849 297 794 276 q 760 439 760 350 q 788 522 760 483 q 871 582 817 560 q 999 604 925 604 q 1175 562 1111 604 q 1239 450 1239 519 q 1215 379 1239 415 q 1140 315 1190 343 m 1000 481 q 950 436 950 481 q 989 378 950 394 l 1013 368 q 1041 401 1035 385 q 1047 438 1047 417 q 1035 469 1047 457 q 1000 481 1022 481 m 1001 115 q 1051 129 1035 115 q 1067 164 1067 143 q 1053 201 1067 188 q 1007 226 1039 214 l 967 240 q 941 209 950 228 q 932 171 932 190 q 951 131 932 146 q 1001 115 969 115 z "},".":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 258 q 268 216 226 258 q 310 115 310 174 q 268 15 310 57 q 167 -28 226 -28 q 65 15 107 -28 q 24 115 24 57 q 65 216 24 174 q 167 258 107 258 z "},",":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 258 q 269 217 228 258 q 310 115 310 176 q 298 47 310 82 q 254 -61 286 11 l 168 -256 l 26 -256 l 88 -1 q 40 49 57 18 q 24 117 24 79 q 65 218 24 178 q 167 258 106 258 z "},":":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 258 q 268 216 226 258 q 310 115 310 174 q 268 15 310 57 q 167 -28 226 -28 q 65 15 107 -28 q 24 115 24 57 q 65 216 24 174 q 167 258 107 258 m 167 719 q 268 677 226 719 q 310 576 310 635 q 268 476 310 518 q 167 433 226 433 q 65 476 107 433 q 24 576 24 518 q 65 677 24 635 q 167 719 107 719 z "},";":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 258 q 269 217 228 258 q 310 115 310 176 q 298 47 310 82 q 254 -61 286 11 l 168 -256 l 26 -256 l 88 -1 q 40 49 57 18 q 24 117 24 79 q 65 218 24 178 q 167 258 106 258 m 167 719 q 268 677 226 719 q 310 576 310 635 q 268 476 310 518 q 167 433 226 433 q 65 476 107 433 q 24 576 24 518 q 65 677 24 635 q 167 719 107 719 z "},"…":{"ha":1000,"x_min":24,"x_max":976,"o":"m 500 258 q 601 216 560 258 q 643 115 643 174 q 601 15 643 57 q 500 -28 560 -28 q 399 15 440 -28 q 357 115 357 57 q 399 216 357 174 q 500 258 440 258 m 833 258 q 935 216 893 258 q 976 115 976 174 q 935 15 976 57 q 833 -28 893 -28 q 732 15 774 -28 q 690 115 690 57 q 732 216 690 174 q 833 258 774 258 m 167 258 q 268 216 226 258 q 310 115 310 174 q 268 15 310 57 q 167 -28 226 -28 q 65 15 107 -28 q 24 115 24 57 q 65 216 24 174 q 167 258 107 258 z "},"!":{"ha":333,"x_min":22,"x_max":311,"o":"m 275 375 l 58 375 l 22 967 l 311 967 l 275 375 m 167 258 q 268 216 226 258 q 310 115 310 174 q 268 15 310 57 q 167 -28 226 -28 q 65 15 107 -28 q 24 115 24 57 q 65 216 24 174 q 167 258 107 258 z "},"¡":{"ha":333,"x_min":22,"x_max":311,"o":"m 167 719 q 268 677 226 719 q 310 576 310 635 q 268 476 310 518 q 167 433 226 433 q 65 476 107 433 q 24 576 24 518 q 65 677 24 635 q 167 719 107 719 m 311 -299 l 22 -299 l 58 317 l 275 317 l 311 -299 z "},"?":{"ha":688,"x_min":7,"x_max":681,"o":"m 353 994 q 533 962 458 994 q 644 874 607 929 q 681 753 681 819 q 660 651 681 693 q 610 583 639 610 q 533 525 581 557 q 456 460 481 488 q 432 393 432 433 l 432 375 l 188 375 l 188 401 q 208 518 188 471 q 257 592 229 565 q 326 647 285 619 q 378 687 363 671 q 393 726 393 703 q 375 767 393 753 q 322 781 357 781 q 178 706 249 781 l 7 839 q 353 994 139 994 m 311 258 q 413 216 371 258 q 454 115 454 174 q 413 15 454 57 q 311 -28 371 -28 q 210 15 251 -28 q 168 115 168 57 q 210 216 168 174 q 311 258 251 258 z "},"¿":{"ha":688,"x_min":7,"x_max":681,"o":"m 376 433 q 275 476 317 433 q 233 576 233 518 q 275 677 233 635 q 376 719 317 719 q 478 677 436 719 q 519 576 519 635 q 478 476 519 518 q 376 433 436 433 m 335 -315 q 155 -283 229 -315 q 44 -195 81 -250 q 7 -74 7 -140 q 28 28 7 -14 q 78 96 49 69 q 154 154 107 122 q 231 219 207 192 q 256 286 256 246 l 256 318 l 500 318 l 500 278 q 479 161 500 208 q 431 87 458 114 q 361 32 403 60 q 310 -8 326 8 q 294 -47 294 -24 q 313 -87 294 -74 q 365 -101 331 -101 q 510 -26 439 -101 l 681 -160 q 335 -315 549 -315 z "},"·":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 568 q 268 526 226 568 q 310 425 310 483 q 268 324 310 367 q 167 282 226 282 q 65 324 107 282 q 24 425 24 367 q 65 526 24 483 q 167 568 107 568 z "},"•":{"ha":500,"x_min":36,"x_max":464,"o":"m 250 688 q 359 660 310 688 q 436 583 408 632 q 464 474 464 533 q 436 365 464 414 q 359 289 408 317 q 250 261 310 261 q 141 290 190 261 q 64 367 92 318 q 36 475 36 415 q 64 583 36 535 q 141 660 92 632 q 250 688 190 688 z "},"*":{"ha":632,"x_min":0,"x_max":632,"o":"m 446 697 l 583 568 l 399 433 l 317 604 l 236 432 l 51 567 l 188 697 l 0 721 l 71 933 l 236 844 l 203 1033 l 431 1033 l 397 844 l 561 935 l 632 722 l 446 697 z "},"‖":{"ha":840,"x_min":121,"x_max":719,"o":"m 379 -149 l 121 -149 l 121 1128 l 379 1128 l 379 -149 m 719 -149 l 461 -149 l 461 1128 l 719 1128 l 719 -149 z "},"#":{"ha":806,"x_min":21,"x_max":785,"o":"m 694 606 l 661 357 l 733 357 l 733 182 l 638 182 l 614 0 l 388 0 l 411 182 l 317 182 l 293 0 l 67 0 l 90 182 l 21 182 l 21 357 l 114 357 l 147 606 l 72 606 l 72 781 l 169 781 l 192 944 l 418 944 l 396 781 l 490 781 l 513 944 l 739 944 l 717 781 l 785 781 l 785 606 l 694 606 m 468 606 l 374 606 l 340 357 l 435 357 l 468 606 z "},"/":{"ha":722,"x_min":75,"x_max":647,"o":"m 647 1086 l 318 -162 l 75 -107 l 406 1142 l 647 1086 z "},"\\\\":{"ha":722,"x_min":75,"x_max":647,"o":"m 647 -107 l 404 -162 l 75 1086 l 317 1142 l 647 -107 z "},"⁊":{"ha":774,"x_min":42,"x_max":704,"o":"m 704 554 l 361 -300 l 113 -217 l 415 532 l 42 532 l 42 742 l 704 742 l 704 554 z "},"‿":{"ha":958,"x_min":0,"x_max":958,"o":"m 958 -151 q 742 -276 854 -231 q 479 -322 631 -322 q 216 -276 328 -322 q 0 -151 104 -231 l 78 -37 q 479 -124 279 -124 q 879 -37 678 -124 l 958 -151 z "},"₍":{"ha":553,"x_min":132,"x_max":421,"o":"m 421 368 q 344 192 369 286 q 318 -18 318 99 q 344 -228 318 -135 q 421 -404 369 -322 l 304 -482 q 177 -263 222 -368 q 132 -18 132 -158 q 177 227 132 122 q 304 446 222 332 l 421 368 z "},"₎":{"ha":553,"x_min":132,"x_max":421,"o":"m 249 446 q 376 227 331 332 q 421 -18 421 122 q 376 -263 421 -158 q 249 -482 331 -368 l 132 -404 q 209 -228 183 -322 q 235 -18 235 -135 q 209 192 235 99 q 132 368 183 286 l 249 446 z "},"(":{"ha":451,"x_min":7,"x_max":458,"o":"m 458 1086 q 322 809 363 953 q 282 486 282 665 q 322 163 282 307 q 458 -114 363 19 l 282 -232 q 137 -16 193 -111 q 44 205 81 79 q 7 486 7 331 q 44 767 7 642 q 137 988 81 893 q 282 1204 193 1083 l 458 1086 z "},")":{"ha":451,"x_min":-7,"x_max":444,"o":"m 169 1204 q 315 988 258 1083 q 408 767 371 893 q 444 486 444 642 q 408 205 444 331 q 315 -16 371 79 q 169 -232 258 -111 l -7 -114 q 129 163 89 19 q 169 486 169 307 q 129 809 169 665 q -7 1086 89 953 l 169 1204 z "},"{":{"ha":451,"x_min":0,"x_max":431,"o":"m 431 983 q 358 967 375 983 q 342 908 342 951 l 342 694 q 301 550 342 596 q 174 485 260 504 q 300 422 257 471 q 343 278 343 374 l 343 64 q 360 5 343 21 q 431 -11 376 -11 l 431 -197 q 217 -169 292 -197 q 114 -90 142 -142 q 86 44 86 -39 l 86 257 q 69 348 86 322 q 0 374 51 374 l 0 599 q 69 624 51 599 q 86 715 86 650 l 86 928 q 114 1063 86 1011 q 217 1142 142 1115 q 431 1169 292 1169 l 431 983 z "},"}":{"ha":451,"x_min":21,"x_max":451,"o":"m 21 1169 q 235 1142 160 1169 q 338 1063 310 1115 q 365 928 365 1011 l 365 715 q 383 624 365 650 q 451 599 400 599 l 451 374 q 383 348 400 374 q 365 257 365 322 l 365 44 q 338 -90 365 -39 q 235 -169 310 -142 q 21 -197 160 -197 l 21 -11 q 92 5 75 -11 q 108 64 108 21 l 108 278 q 151 422 108 374 q 278 485 194 471 q 151 550 192 504 q 110 694 110 596 l 110 908 q 93 967 110 951 q 21 983 76 983 l 21 1169 z "},"[":{"ha":451,"x_min":21,"x_max":438,"o":"m 438 950 l 282 950 l 282 21 l 438 21 l 438 -176 l 21 -176 l 21 1149 l 438 1149 l 438 950 z "},"]":{"ha":451,"x_min":14,"x_max":431,"o":"m 431 -176 l 14 -176 l 14 22 l 169 22 l 169 951 l 14 951 l 14 1149 l 431 1149 l 431 -176 z "},"⁽":{"ha":553,"x_min":132,"x_max":421,"o":"m 421 1040 q 344 865 369 958 q 318 654 318 771 q 344 444 318 538 q 421 268 369 350 l 304 190 q 177 409 222 304 q 132 654 132 514 q 177 899 132 794 q 304 1118 222 1004 l 421 1040 z "},"⁾":{"ha":553,"x_min":132,"x_max":421,"o":"m 249 1118 q 376 899 331 1004 q 421 654 421 794 q 376 409 421 514 q 249 190 331 304 l 132 268 q 209 444 183 350 q 235 654 235 538 q 209 865 235 771 q 132 1040 183 958 l 249 1118 z "},"-":{"ha":569,"x_min":49,"x_max":521,"o":"m 49 539 l 521 539 l 521 331 l 49 331 l 49 539 z "},"­":{"ha":569,"x_min":49,"x_max":521,"o":"m 49 539 l 521 539 l 521 331 l 49 331 l 49 539 z "},"–":{"ha":722,"x_min":21,"x_max":701,"o":"m 21 539 l 701 539 l 701 331 l 21 331 l 21 539 z "},"—":{"ha":1111,"x_min":21,"x_max":1090,"o":"m 21 539 l 1090 539 l 1090 331 l 21 331 l 21 539 z "},"‒":{"ha":778,"x_min":14,"x_max":764,"o":"m 14 567 l 764 567 l 764 358 l 14 358 l 14 567 z "},"―":{"ha":722,"x_min":21,"x_max":701,"o":"m 21 539 l 701 539 l 701 331 l 21 331 l 21 539 z "},"‐":{"ha":569,"x_min":49,"x_max":521,"o":"m 49 539 l 521 539 l 521 331 l 49 331 l 49 539 z "},"‑":{"ha":569,"x_min":49,"x_max":521,"o":"m 49 539 l 521 539 l 521 331 l 49 331 l 49 539 z "},"_":{"ha":722,"x_min":7,"x_max":715,"o":"m 7 -53 l 715 -53 l 715 -261 l 7 -261 l 7 -53 z "},"‚":{"ha":350,"x_min":35,"x_max":301,"o":"m 169 228 q 264 192 226 228 q 301 100 301 156 q 290 31 301 67 q 251 -60 279 -4 l 167 -233 l 36 -233 l 94 -10 q 35 101 35 32 q 74 192 35 156 q 169 228 113 228 z "},"„":{"ha":658,"x_min":35,"x_max":610,"o":"m 169 228 q 264 192 226 228 q 301 100 301 156 q 290 31 301 67 q 251 -60 279 -4 l 167 -233 l 36 -233 l 94 -10 q 35 101 35 32 q 74 192 35 156 q 169 228 113 228 m 478 228 q 572 192 535 228 q 610 100 610 156 q 599 31 610 67 q 560 -60 588 -4 l 475 -233 l 344 -233 l 403 -10 q 343 101 343 32 q 382 192 343 156 q 478 228 421 228 z "},"“":{"ha":658,"x_min":49,"x_max":624,"o":"m 181 615 q 86 651 124 615 q 49 743 49 688 q 60 812 49 776 q 99 903 71 847 l 183 1076 l 314 1076 l 256 853 q 315 742 315 811 q 276 651 315 688 q 181 615 238 615 m 489 615 q 394 651 432 615 q 357 743 357 688 q 368 812 357 776 q 407 903 379 847 l 492 1076 l 622 1076 l 564 853 q 624 742 624 811 q 585 651 624 688 q 489 615 546 615 z "},"”":{"ha":658,"x_min":35,"x_max":610,"o":"m 169 1075 q 264 1039 226 1075 q 301 947 301 1003 q 290 878 301 914 q 251 788 279 843 l 167 614 l 36 614 l 94 838 q 35 949 35 879 q 74 1039 35 1003 q 169 1075 113 1075 m 478 1075 q 572 1039 535 1075 q 610 947 610 1003 q 599 878 610 914 q 560 788 588 843 l 475 614 l 344 614 l 403 838 q 343 949 343 879 q 382 1039 343 1003 q 478 1075 421 1075 z "},"‘":{"ha":350,"x_min":49,"x_max":315,"o":"m 181 615 q 86 651 124 615 q 49 743 49 688 q 60 812 49 776 q 99 903 71 847 l 183 1076 l 314 1076 l 256 853 q 315 742 315 811 q 276 651 315 688 q 181 615 238 615 z "},"’":{"ha":350,"x_min":35,"x_max":301,"o":"m 169 1075 q 264 1039 226 1075 q 301 947 301 1003 q 290 878 301 914 q 251 788 279 843 l 167 614 l 36 614 l 94 838 q 35 949 35 879 q 74 1039 35 1003 q 169 1075 113 1075 z "},"«":{"ha":917,"x_min":35,"x_max":882,"o":"m 481 678 l 307 393 l 481 108 l 310 -4 l 35 308 l 35 478 l 310 790 l 481 678 m 882 678 l 708 393 l 882 108 l 711 -4 l 436 308 l 436 478 l 711 790 l 882 678 z "},"»":{"ha":918,"x_min":35,"x_max":883,"o":"m 481 478 l 481 308 l 206 -4 l 35 108 l 208 393 l 35 678 l 206 790 l 481 478 m 883 478 l 883 308 l 608 -4 l 438 108 l 611 393 l 438 678 l 608 790 l 883 478 z "},"‹":{"ha":515,"x_min":35,"x_max":481,"o":"m 481 678 l 307 393 l 481 108 l 310 -4 l 35 308 l 35 478 l 310 790 l 481 678 z "},"›":{"ha":515,"x_min":35,"x_max":481,"o":"m 481 478 l 481 308 l 206 -4 l 35 108 l 208 393 l 35 678 l 206 790 l 481 478 z "},"\\"":{"ha":644,"x_min":56,"x_max":589,"o":"m 56 967 l 292 967 l 261 564 l 86 564 l 56 967 m 353 967 l 589 967 l 558 564 l 383 564 l 353 967 z "},"\'":{"ha":347,"x_min":56,"x_max":292,"o":"m 56 967 l 292 967 l 261 564 l 86 564 l 56 967 z "},"·":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 568 q 268 526 226 568 q 310 425 310 483 q 268 324 310 367 q 167 282 226 282 q 65 324 107 282 q 24 425 24 367 q 65 526 24 483 q 167 568 107 568 z "},";":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 258 q 269 217 228 258 q 310 115 310 176 q 298 47 310 82 q 254 -61 286 11 l 168 -256 l 26 -256 l 88 -1 q 40 49 57 18 q 24 117 24 79 q 65 218 24 178 q 167 258 106 258 m 167 719 q 268 677 226 719 q 310 576 310 635 q 268 476 310 518 q 167 433 226 433 q 65 476 107 433 q 24 576 24 518 q 65 677 24 635 q 167 719 107 719 z "}," ":{"ha":778,"x_min":0,"x_max":0,"o":""}," ":{"ha":333,"x_min":0,"x_max":0,"o":""}," ":{"ha":306,"x_min":0,"x_max":0,"o":""},"​":{"ha":0,"x_min":0,"x_max":0,"o":""},"‎":{"ha":0,"x_min":-11,"x_max":178,"o":"m 178 1042 l 101 942 l 83 954 l 143 1031 l 11 1031 l 11 -208 l -11 -208 l -11 1053 l 143 1053 l 83 1129 l 101 1142 l 178 1042 z "},"‏":{"ha":0,"x_min":-178,"x_max":11,"o":"m -83 1129 l -143 1053 l 11 1053 l 11 -208 l -11 -208 l -11 1031 l -143 1031 l -83 954 l -101 942 l -178 1042 l -101 1142 l -83 1129 z "},"‍":{"ha":0,"x_min":-94,"x_max":94,"o":"m 90 1117 l 15 1042 l 94 963 l 79 947 l 11 1015 l 11 -208 l -11 -208 l -11 1015 l -79 947 l -94 963 l -15 1042 l -90 1117 l -75 1132 l 0 1057 l 75 1132 l 90 1117 z "},"‌":{"ha":0,"x_min":-11,"x_max":11,"o":"m 11 -208 l -11 -208 l -11 1042 l 11 1042 l 11 -208 z "},"\ufeff":{"ha":0,"x_min":0,"x_max":0,"o":""},"฿":{"ha":840,"x_min":60,"x_max":819,"o":"m 819 281 q 736 83 819 146 q 499 4 653 19 l 499 -229 l 311 -229 l 311 0 l 60 0 l 60 943 l 311 943 l 311 1158 l 499 1158 l 499 935 q 708 862 636 918 q 781 701 781 806 q 732 567 781 615 q 610 500 683 518 q 761 430 703 479 q 819 281 819 381 m 499 672 q 471 734 499 715 q 378 753 443 753 l 338 753 l 338 578 l 383 578 q 473 600 447 578 q 499 672 499 622 m 390 196 q 497 217 461 196 q 533 299 533 239 q 500 378 533 353 q 401 403 467 403 l 338 403 l 338 196 l 390 196 z "},"¢":{"ha":665,"x_min":24,"x_max":679,"o":"m 679 64 q 494 -21 596 -4 l 494 -229 l 307 -229 l 307 -15 q 99 117 174 15 q 24 365 24 218 q 100 622 24 515 q 308 758 176 728 l 308 967 l 494 967 l 494 763 q 679 671 599 743 l 565 511 q 435 563 501 563 q 340 518 371 563 q 310 365 310 474 q 341 223 310 261 q 432 185 372 185 q 492 195 464 185 q 561 232 519 206 l 679 64 z "},"₡":{"ha":788,"x_min":28,"x_max":788,"o":"m 788 104 q 674 21 740 56 q 532 -24 608 -14 l 510 -229 l 426 -229 l 449 -25 q 408 -22 433 -25 l 386 -229 l 303 -229 l 326 -6 q 108 158 186 36 q 28 472 29 281 q 78 724 28 617 q 219 893 128 832 q 429 965 310 954 l 450 1158 l 533 1158 l 513 965 l 553 961 l 574 1158 l 657 1158 l 633 940 q 778 856 714 911 l 650 718 q 613 743 632 732 l 553 176 q 667 243 601 192 l 788 104 m 429 176 q 468 169 442 172 l 533 776 q 493 781 515 781 l 429 176 m 289 472 q 351 225 289 299 l 408 765 q 318 668 347 740 q 289 472 289 596 z "},"¤":{"ha":778,"x_min":14,"x_max":765,"o":"m 704 475 q 661 314 704 385 l 765 210 l 656 100 l 547 206 q 390 167 476 167 q 233 206 304 167 l 124 100 l 14 210 l 119 314 q 76 475 76 388 q 119 635 76 561 l 14 742 l 124 851 l 232 744 q 390 783 303 783 q 549 743 479 783 l 656 851 l 765 742 l 661 636 q 704 475 704 563 m 390 343 q 476 377 447 343 q 504 475 504 411 q 476 571 504 538 q 390 604 447 604 q 306 571 335 604 q 276 475 276 538 q 306 378 276 413 q 390 343 335 343 z "},"$":{"ha":778,"x_min":0,"x_max":757,"o":"m 757 289 q 688 103 757 181 q 497 0 619 26 l 497 -229 l 310 -229 l 310 -10 q 0 126 122 7 l 133 272 q 360 183 238 183 q 445 206 417 183 q 474 265 474 228 q 461 312 474 293 q 417 346 449 331 q 325 381 386 361 q 102 501 165 431 q 39 678 39 572 q 113 860 39 788 q 310 951 188 932 l 310 1158 l 497 1158 l 497 950 q 733 833 639 928 l 614 692 q 417 765 521 765 q 343 748 368 765 q 318 700 318 731 q 332 661 318 676 q 378 632 346 646 q 483 596 411 618 q 692 479 628 549 q 757 289 757 410 z "},"₫":{"ha":849,"x_min":24,"x_max":849,"o":"m 849 918 l 849 778 l 769 778 l 769 0 l 525 0 l 515 74 q 306 -26 438 -26 q 94 75 165 -26 q 24 356 24 176 q 63 549 24 464 q 172 683 101 635 q 333 731 242 731 q 494 676 429 731 l 494 778 l 329 778 l 329 918 l 494 918 l 494 1008 l 769 982 l 769 918 l 849 918 m 399 161 q 494 224 456 161 l 494 506 q 455 535 474 525 q 413 544 436 544 q 335 499 364 544 q 306 354 306 454 q 330 200 306 239 q 399 161 354 161 m 194 -94 l 646 -94 l 646 -281 l 194 -281 l 194 -94 z "},"₯":{"ha":1856,"x_min":0,"x_max":1825,"o":"m 518 953 q 885 851 746 953 q 1025 482 1025 749 q 535 0 1025 0 l 172 0 l 172 192 q 251 227 226 206 q 283 274 276 249 q 289 346 289 300 l 289 668 l 558 665 l 558 374 q 537 276 558 315 q 451 201 515 238 l 551 201 q 653 228 614 201 q 712 315 693 254 q 731 482 731 376 q 688 694 731 633 q 553 754 644 754 l 271 754 q 214 703 214 754 q 219 665 214 683 q 235 618 224 646 l 64 546 q 17 634 35 592 q 0 722 0 676 q 78 892 0 831 q 286 953 157 953 l 518 953 m 1449 769 q 1728 669 1631 769 q 1825 374 1825 568 q 1788 167 1825 258 q 1684 24 1751 76 q 1529 -28 1617 -28 q 1435 -8 1478 -28 q 1357 56 1393 11 l 1357 -287 l 1082 -315 l 1082 385 q 1173 670 1082 571 q 1449 769 1264 769 m 1444 168 q 1543 369 1543 168 q 1519 531 1543 489 q 1449 574 1494 574 q 1378 526 1399 574 q 1357 365 1357 479 l 1357 228 q 1396 181 1375 194 q 1444 168 1417 168 z "},"€":{"ha":833,"x_min":0,"x_max":833,"o":"m 393 296 q 576 164 435 164 q 681 180 628 164 q 783 225 735 196 l 783 24 q 669 -16 722 -4 q 554 -28 615 -28 q 269 58 383 -28 q 118 296 156 144 l 0 296 l 35 428 l 111 428 l 111 511 l 0 511 l 35 643 l 121 643 q 285 879 165 792 q 563 967 404 967 q 713 944 649 967 q 833 886 778 922 l 739 725 q 572 776 665 776 q 465 742 511 776 q 396 643 419 708 l 719 643 l 685 511 l 383 511 l 383 428 l 667 428 l 632 296 l 393 296 z "},"ƒ":{"ha":542,"x_min":-51,"x_max":658,"o":"m 469 864 q 398 844 417 864 q 379 771 379 824 l 379 742 l 551 742 l 521 556 l 379 556 l 379 107 q 290 -169 379 -74 q 43 -315 201 -264 l -51 -115 q 35 -67 3 -90 q 85 -6 67 -43 q 104 90 104 32 l 104 556 l -7 556 l -7 742 l 104 742 l 104 785 q 185 983 104 906 q 418 1061 265 1061 q 547 1047 485 1061 q 658 1010 610 1032 l 586 836 q 469 864 524 864 z "},"₴":{"ha":833,"x_min":14,"x_max":819,"o":"m 693 501 q 614 451 663 476 l 819 451 l 819 325 l 351 325 q 331 257 331 300 q 356 194 331 217 q 449 172 382 172 q 679 264 572 172 l 815 114 q 438 -28 665 -28 q 231 11 317 -28 q 100 119 144 50 q 56 279 56 188 q 58 325 56 297 l 14 325 l 14 451 l 121 451 q 192 501 150 479 l 14 501 l 14 628 l 467 628 q 497 658 489 642 q 504 701 504 675 q 482 752 504 735 q 403 769 460 769 q 201 693 297 769 l 79 838 q 425 967 211 967 q 603 931 522 967 q 730 831 683 896 q 776 679 776 765 q 772 628 776 653 l 819 628 l 819 501 l 693 501 z "},"₺":{"ha":840,"x_min":28,"x_max":840,"o":"m 840 294 q 701 74 807 149 q 418 0 594 0 l 156 0 l 156 238 l 81 203 l 28 318 l 156 378 l 156 454 l 82 419 l 28 535 l 156 594 l 156 944 l 425 944 l 425 719 l 600 801 l 653 686 l 425 579 l 425 504 l 599 585 l 653 469 l 425 364 l 425 204 l 464 204 q 585 242 539 204 q 660 358 632 281 l 840 294 z "},"₦":{"ha":904,"x_min":14,"x_max":890,"o":"m 833 501 l 833 451 l 890 451 l 890 339 l 833 339 l 833 0 l 500 0 l 392 339 l 297 339 l 297 292 l 297 0 l 72 0 l 72 339 l 14 339 l 14 451 l 72 451 l 72 501 l 14 501 l 14 614 l 72 614 l 72 944 l 399 944 l 507 614 l 606 614 l 606 638 l 606 944 l 833 944 l 833 614 l 890 614 l 890 501 l 833 501 m 279 614 l 304 614 l 267 733 l 279 614 m 357 451 l 340 501 l 289 501 l 293 451 l 357 451 m 613 451 q 610 501 610 485 l 543 501 l 560 451 l 613 451 m 633 253 q 624 339 629 283 l 596 339 l 639 208 l 633 253 z "},"₽":{"ha":857,"x_min":42,"x_max":836,"o":"m 403 279 l 617 279 l 617 147 l 403 147 l 403 0 l 131 0 l 131 147 l 42 147 l 42 279 l 131 279 l 131 349 l 42 349 l 42 501 l 131 501 l 131 944 l 444 944 q 729 865 622 944 q 836 640 836 785 q 733 420 836 492 q 449 349 629 349 l 403 349 l 403 279 m 403 760 l 403 501 l 449 501 q 528 538 499 501 q 558 638 558 575 q 528 728 558 696 q 440 760 499 760 l 403 760 z "},"₹":{"ha":761,"x_min":56,"x_max":733,"o":"m 733 813 l 533 813 q 636 707 606 782 l 733 707 l 733 575 l 654 575 q 607 455 649 507 q 486 363 565 403 l 721 0 l 418 0 l 232 322 l 56 322 l 56 468 l 247 468 q 337 490 307 468 q 375 575 367 513 l 56 575 l 56 707 l 371 707 q 329 778 360 757 q 247 799 299 799 l 56 799 l 56 944 l 733 944 l 733 813 z "},"₪":{"ha":1307,"x_min":38,"x_max":1269,"o":"m 324 597 q 317 417 317 551 l 317 0 l 82 0 l 82 308 q 192 597 82 507 l 38 597 l 38 793 l 547 793 q 777 763 692 793 q 903 658 863 732 q 943 450 943 583 l 943 292 l 721 290 l 721 394 q 702 527 721 483 q 647 584 683 571 q 542 597 611 597 l 324 597 m 1269 793 l 1269 343 q 1239 149 1269 222 q 1129 38 1208 75 q 906 0 1050 0 l 406 0 l 406 503 l 631 503 l 631 196 l 864 196 q 963 211 926 196 q 1015 265 999 226 q 1032 372 1032 303 l 1032 793 l 1269 793 z "},"£":{"ha":765,"x_min":28,"x_max":765,"o":"m 414 365 q 395 270 414 308 q 322 203 376 232 l 738 203 l 707 0 l 28 0 l 28 193 q 107 228 82 207 q 138 276 132 250 q 144 347 144 301 l 144 422 l 49 422 l 49 554 l 144 554 l 144 660 q 226 882 144 797 q 461 967 307 967 q 639 929 565 967 q 765 815 713 892 l 600 696 q 551 751 576 735 q 493 767 525 767 q 432 738 450 767 q 414 657 414 710 l 414 554 l 651 554 l 651 422 l 414 422 l 414 365 z "},"₩":{"ha":1199,"x_min":21,"x_max":1178,"o":"m 1128 600 l 1178 600 l 1178 488 l 1113 488 l 1104 438 l 1178 438 l 1178 325 l 1089 325 l 1042 0 l 681 0 l 640 325 l 549 325 l 504 0 l 151 0 l 107 325 l 21 325 l 21 438 l 90 438 l 83 488 l 21 488 l 21 600 l 68 600 l 21 944 l 299 944 l 326 600 l 411 600 l 457 944 l 747 944 l 786 600 l 874 600 l 911 944 l 1178 944 l 1128 600 m 586 600 l 607 600 l 597 681 l 586 600 m 339 438 l 390 438 l 396 488 l 335 488 l 339 438 m 626 438 l 621 488 l 571 488 l 564 438 l 626 438 m 861 488 l 799 488 l 804 438 l 856 438 l 861 488 m 375 325 l 349 325 l 358 201 l 375 325 m 844 325 l 817 325 l 831 201 l 844 325 z "},"¥":{"ha":817,"x_min":-21,"x_max":838,"o":"m 603 494 l 726 494 l 726 363 l 546 363 l 546 279 l 726 279 l 726 147 l 546 147 l 546 0 l 274 0 l 274 147 l 96 147 l 96 279 l 274 279 l 274 363 l 96 363 l 96 494 l 215 494 l -21 944 l 268 944 l 414 565 l 556 944 l 838 944 l 603 494 z "},"∙":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 568 q 268 526 226 568 q 310 425 310 483 q 268 324 310 367 q 167 282 226 282 q 65 324 107 282 q 24 425 24 367 q 65 526 24 483 q 167 568 107 568 z "},"∕":{"ha":265,"x_min":-232,"x_max":497,"o":"m 497 985 l -78 -125 l -232 -49 l 343 1061 l 497 985 z "},"⋅":{"ha":333,"x_min":24,"x_max":310,"o":"m 167 568 q 268 526 226 568 q 310 425 310 483 q 268 324 310 367 q 167 282 226 282 q 65 324 107 282 q 24 425 24 367 q 65 526 24 483 q 167 568 107 568 z "},"₌":{"ha":1111,"x_min":67,"x_max":1044,"o":"m 67 49 l 489 49 l 489 -85 l 67 -85 l 67 49 m 622 49 l 1044 49 l 1044 -85 l 622 -85 l 622 49 z "},"⁼":{"ha":1111,"x_min":67,"x_max":1044,"o":"m 67 774 l 489 774 l 489 640 l 67 640 l 67 774 m 622 774 l 1044 774 l 1044 640 l 622 640 l 622 774 z "},"₋":{"ha":556,"x_min":67,"x_max":489,"o":"m 67 67 l 489 67 l 489 -74 l 67 -74 l 67 67 z "},"⁻":{"ha":556,"x_min":67,"x_max":489,"o":"m 67 792 l 489 792 l 489 651 l 67 651 l 67 792 z "},"+":{"ha":764,"x_min":56,"x_max":708,"o":"m 493 565 l 708 565 l 708 357 l 493 357 l 493 135 l 271 135 l 271 357 l 56 357 l 56 565 l 271 565 l 271 788 l 493 788 l 493 565 z "},"−":{"ha":736,"x_min":56,"x_max":681,"o":"m 56 565 l 681 565 l 681 357 l 56 357 l 56 565 z "},"×":{"ha":736,"x_min":64,"x_max":672,"o":"m 672 582 l 514 429 l 672 268 l 525 121 l 371 286 l 211 121 l 64 268 l 221 421 l 64 582 l 211 729 l 364 564 l 525 729 l 672 582 z "},"÷":{"ha":736,"x_min":56,"x_max":681,"o":"m 368 258 q 469 216 428 258 q 511 115 511 174 q 469 15 511 57 q 368 -28 428 -28 q 267 15 308 -28 q 225 115 225 57 q 267 216 225 174 q 368 258 308 258 m 368 950 q 469 908 428 950 q 511 807 511 865 q 469 706 511 749 q 368 664 428 664 q 267 706 308 664 q 225 807 225 749 q 267 908 225 865 q 368 950 308 950 m 56 565 l 681 565 l 681 357 l 56 357 l 56 565 z "},"=":{"ha":736,"x_min":56,"x_max":681,"o":"m 56 718 l 681 718 l 681 510 l 56 510 l 56 718 m 56 413 l 681 413 l 681 204 l 56 204 l 56 413 z "},"≠":{"ha":736,"x_min":56,"x_max":681,"o":"m 490 510 l 432 413 l 681 413 l 681 204 l 307 204 l 199 24 l 63 100 l 125 204 l 56 204 l 56 413 l 250 413 l 308 510 l 56 510 l 56 718 l 433 718 l 538 893 l 674 817 l 614 718 l 681 718 l 681 510 l 490 510 z "},">":{"ha":736,"x_min":35,"x_max":701,"o":"m 701 578 l 701 346 l 118 104 l 35 299 l 464 463 l 35 638 l 118 821 l 701 578 z "},"<":{"ha":736,"x_min":35,"x_max":701,"o":"m 701 638 l 272 463 l 701 299 l 618 104 l 35 346 l 35 578 l 618 821 l 701 638 z "},"≥":{"ha":736,"x_min":35,"x_max":701,"o":"m 701 724 l 701 492 l 118 250 l 35 444 l 464 608 l 35 783 l 118 967 l 701 724 m 56 208 l 681 208 l 681 0 l 56 0 l 56 208 z "},"≤":{"ha":736,"x_min":35,"x_max":701,"o":"m 701 783 l 272 608 l 701 444 l 618 250 l 35 492 l 35 724 l 618 967 l 701 783 m 56 208 l 681 208 l 681 0 l 56 0 l 56 208 z "},"±":{"ha":764,"x_min":56,"x_max":708,"o":"m 69 208 l 694 208 l 694 0 l 69 0 l 69 208 m 493 708 l 708 708 l 708 500 l 493 500 l 493 278 l 271 278 l 271 500 l 56 500 l 56 708 l 271 708 l 271 931 l 493 931 l 493 708 z "},"≈":{"ha":736,"x_min":7,"x_max":729,"o":"m 486 154 q 401 167 435 154 q 325 206 367 181 q 278 231 294 224 q 240 238 261 238 q 193 224 210 238 q 163 192 176 210 q 146 168 150 175 l 7 238 q 108 385 51 331 q 250 439 165 439 q 335 426 301 439 q 411 388 369 413 q 458 363 442 369 q 496 356 475 356 q 542 368 525 356 q 572 397 558 381 q 592 422 585 414 l 729 356 q 628 208 685 263 q 486 154 571 154 m 486 460 q 401 473 435 460 q 325 511 367 486 q 278 536 294 529 q 240 543 261 543 q 193 529 210 543 q 163 498 176 515 q 146 474 150 481 l 7 543 q 108 690 51 636 q 250 744 165 744 q 335 731 301 744 q 411 693 369 718 q 458 668 442 675 q 496 661 475 661 q 542 674 525 661 q 572 703 558 686 q 592 728 585 719 l 729 661 q 628 514 685 568 q 486 460 571 460 z "},"~":{"ha":736,"x_min":7,"x_max":729,"o":"m 486 307 q 401 320 435 307 q 325 358 367 333 q 278 383 294 376 q 240 390 261 390 q 193 376 210 390 q 163 345 176 363 q 146 321 150 328 l 7 390 q 108 538 51 483 q 250 592 165 592 q 335 578 301 592 q 411 540 369 565 q 458 515 442 522 q 496 508 475 508 q 542 521 525 508 q 572 550 558 533 q 592 575 585 567 l 729 508 q 628 361 685 415 q 486 307 571 307 z "},"¬":{"ha":764,"x_min":56,"x_max":708,"o":"m 708 135 l 486 135 l 486 357 l 56 357 l 56 565 l 708 565 l 708 135 z "},"^":{"ha":792,"x_min":7,"x_max":785,"o":"m 785 732 l 522 732 l 394 979 l 275 732 l 7 732 l 269 1176 l 522 1176 l 785 732 z "},"∅":{"ha":1250,"x_min":117,"x_max":1133,"o":"m 975 857 q 1092 690 1050 786 q 1133 485 1133 593 q 1065 228 1133 344 q 881 45 997 113 q 626 -22 765 -22 q 375 42 494 -22 l 332 -17 l 150 -17 l 258 132 q 154 292 192 201 q 117 485 117 382 q 185 742 117 625 q 371 926 254 858 q 626 994 488 994 q 856 940 747 994 l 890 989 l 1072 989 l 975 857 m 275 485 q 296 364 275 422 q 354 260 317 306 l 763 815 q 626 842 697 842 q 449 794 529 842 q 322 664 368 746 q 275 485 275 582 m 626 131 q 803 178 724 131 q 930 306 883 225 q 976 485 976 388 q 951 619 976 556 q 882 731 926 682 l 468 168 q 626 131 543 131 z "},"∞":{"ha":1250,"x_min":28,"x_max":1222,"o":"m 906 769 q 1084 723 1013 769 q 1189 601 1156 676 q 1222 438 1222 525 q 1189 274 1222 349 q 1082 153 1156 199 q 894 107 1008 107 q 607 257 726 107 q 485 142 547 176 q 344 107 422 107 q 166 153 238 107 q 61 276 94 200 q 28 439 28 351 q 61 603 28 528 q 168 724 94 678 q 356 769 242 769 q 640 614 531 769 q 765 734 703 699 q 906 769 826 769 m 389 311 q 463 343 431 311 q 538 444 496 375 q 478 534 515 501 q 392 567 442 567 q 322 533 346 567 q 297 439 297 499 q 321 345 297 379 q 389 311 344 311 m 858 310 q 928 344 904 310 q 953 438 953 378 q 929 531 953 497 q 861 565 906 565 q 786 533 818 565 q 710 424 754 500 q 858 310 769 310 z "},"∫":{"ha":567,"x_min":-111,"x_max":678,"o":"m 447 1206 q 678 1154 567 1206 l 606 981 q 496 1008 544 1008 q 440 987 457 1008 q 422 915 422 965 l 422 -11 q 335 -240 422 -165 q 111 -315 247 -315 q -111 -262 -11 -315 l -39 -89 q 72 -118 24 -118 q 130 -97 113 -118 q 147 -25 147 -76 l 147 901 q 222 1126 147 1047 q 447 1206 296 1206 z "},"Ω":{"ha":958,"x_min":28,"x_max":931,"o":"m 479 994 q 722 933 619 994 q 877 770 824 872 q 931 544 931 668 q 881 338 931 426 q 742 197 832 249 l 901 197 l 901 0 l 518 0 l 518 183 q 597 254 572 210 q 627 361 621 299 q 633 544 633 424 q 479 792 633 792 q 325 544 325 792 q 331 362 325 424 q 362 256 338 300 q 440 183 386 211 l 440 0 l 57 0 l 57 197 l 217 197 q 77 338 126 249 q 28 544 28 426 q 81 770 28 668 q 237 933 135 872 q 479 994 339 994 z "},"∆":{"ha":846,"x_min":-35,"x_max":881,"o":"m 881 0 l -35 0 l 253 967 l 594 967 l 881 0 m 306 203 l 535 203 l 421 763 l 306 203 z "},"∏":{"ha":847,"x_min":21,"x_max":826,"o":"m 736 742 l 736 -287 l 479 -315 l 479 742 l 368 742 l 368 -287 l 111 -315 l 111 742 l 21 742 l 21 944 l 826 944 l 826 742 l 736 742 z "},"∑":{"ha":738,"x_min":28,"x_max":710,"o":"m 710 744 l 324 744 l 539 522 l 539 425 l 324 200 l 710 200 l 710 0 l 28 0 l 28 189 l 289 471 l 28 756 l 28 944 l 710 944 l 710 744 z "},"√":{"ha":778,"x_min":-7,"x_max":1097,"o":"m 1097 1044 l 829 1044 l 542 0 l 228 0 l -7 644 l 250 719 l 375 236 l 624 1247 l 1097 1247 l 1097 1044 z "},"µ":{"ha":804,"x_min":58,"x_max":767,"o":"m 515 -28 q 498 17 504 -4 q 485 79 492 39 q 358 -8 429 -8 q 295 3 324 -8 q 242 44 267 14 q 298 -58 281 -14 q 315 -171 315 -101 l 315 -287 l 58 -312 l 58 742 l 333 742 l 333 240 q 379 181 333 181 q 420 196 399 181 q 460 242 442 211 l 460 742 l 735 742 l 735 256 q 767 0 735 110 l 515 -28 z "},"∂":{"ha":778,"x_min":14,"x_max":750,"o":"m 156 994 q 503 876 372 957 q 692 671 633 796 q 750 365 750 546 q 708 167 750 257 q 583 25 667 78 q 379 -28 500 -28 q 189 15 272 -28 q 60 134 106 57 q 14 313 14 211 q 50 478 14 406 q 147 592 86 551 q 283 633 208 633 q 392 613 349 633 q 469 547 436 593 q 396 677 442 628 q 281 756 350 726 q 97 810 211 785 l 156 994 m 379 161 q 438 187 419 161 q 462 257 457 213 q 467 381 467 301 q 425 424 446 411 q 376 438 404 438 q 313 408 338 438 q 289 299 289 379 q 312 199 289 238 q 379 161 335 161 z "},"%":{"ha":1221,"x_min":28,"x_max":1193,"o":"m 1017 906 l 372 -62 l 210 39 l 853 1007 l 1017 906 m 288 967 q 419 935 360 967 q 513 844 478 903 q 547 708 547 786 q 513 572 547 631 q 419 482 478 514 q 288 450 360 450 q 156 482 215 450 q 63 572 97 514 q 28 708 28 631 q 63 844 28 786 q 156 935 97 903 q 288 967 215 967 m 288 808 q 211 708 211 808 q 288 608 211 608 q 363 708 363 608 q 288 808 363 808 m 933 489 q 1065 457 1006 489 q 1158 367 1124 425 q 1193 231 1193 308 q 1158 94 1193 153 q 1065 4 1124 36 q 933 -28 1006 -28 q 801 4 861 -28 q 707 95 742 36 q 672 231 672 154 q 707 366 672 307 q 801 457 742 425 q 933 489 861 489 m 933 331 q 857 231 857 331 q 933 131 857 131 q 1008 231 1008 131 q 933 331 1008 331 z "},"‰":{"ha":1776,"x_min":28,"x_max":1749,"o":"m 1017 906 l 372 -62 l 210 39 l 853 1007 l 1017 906 m 288 967 q 419 935 360 967 q 513 844 478 903 q 547 708 547 786 q 513 572 547 631 q 419 482 478 514 q 288 450 360 450 q 156 482 215 450 q 63 572 97 514 q 28 708 28 631 q 63 844 28 786 q 156 935 97 903 q 288 967 215 967 m 288 808 q 211 708 211 808 q 288 608 211 608 q 363 708 363 608 q 288 808 363 808 m 933 489 q 1065 457 1006 489 q 1158 367 1124 425 q 1193 231 1193 308 q 1158 94 1193 153 q 1065 4 1124 36 q 933 -28 1006 -28 q 801 4 861 -28 q 707 95 742 36 q 672 231 672 154 q 707 366 672 307 q 801 457 742 425 q 933 489 861 489 m 1489 489 q 1620 457 1561 489 q 1714 367 1679 425 q 1749 231 1749 308 q 1714 94 1749 153 q 1620 4 1679 36 q 1489 -28 1561 -28 q 1357 4 1417 -28 q 1263 95 1297 36 q 1228 231 1228 154 q 1263 366 1228 307 q 1357 457 1297 425 q 1489 489 1417 489 m 933 331 q 857 231 857 331 q 933 131 857 131 q 1008 231 1008 131 q 933 331 1008 331 m 1489 331 q 1413 231 1413 331 q 1489 131 1413 131 q 1564 231 1564 131 q 1489 331 1564 331 z "},"₊":{"ha":556,"x_min":67,"x_max":489,"o":"m 361 67 l 489 67 l 489 -74 l 361 -74 l 361 -193 l 194 -193 l 194 -74 l 67 -74 l 67 67 l 194 67 l 194 186 l 361 186 l 361 67 z "},"⁺":{"ha":556,"x_min":67,"x_max":489,"o":"m 361 792 l 489 792 l 489 651 l 361 651 l 361 532 l 194 532 l 194 651 l 67 651 l 67 792 l 194 792 l 194 911 l 361 911 l 361 792 z "},"⦁":{"ha":872,"x_min":89,"x_max":783,"o":"m 436 88 q 262 134 342 88 q 135 260 182 181 q 89 435 89 340 q 135 609 89 529 q 262 735 182 689 q 436 782 342 782 q 610 735 531 782 q 737 609 690 689 q 783 435 783 529 q 737 260 783 340 q 610 134 690 181 q 436 88 531 88 z "},"↑":{"ha":1250,"x_min":131,"x_max":1119,"o":"m 501 656 q 457 577 481 608 q 386 503 433 546 l 281 406 l 131 560 l 625 1008 l 1119 560 l 969 406 l 864 503 q 793 577 817 546 q 749 656 769 608 l 749 0 l 501 0 l 501 656 z "},"↗":{"ha":1149,"x_min":131,"x_max":1018,"o":"m 131 174 l 638 679 q 521 661 579 661 q 451 664 479 661 l 299 675 l 313 890 l 986 858 l 1018 183 l 781 168 l 772 310 q 771 353 771 325 q 777 430 771 394 q 797 507 783 465 l 297 3 l 131 174 z "},"→":{"ha":1250,"x_min":108,"x_max":1171,"o":"m 1171 457 l 731 -31 l 556 119 l 649 221 q 727 294 692 267 q 808 347 763 322 l 108 347 l 108 567 l 807 567 q 727 619 763 592 q 649 693 692 647 l 556 794 l 731 944 l 1171 457 z "},"↘":{"ha":1149,"x_min":131,"x_max":1018,"o":"m 797 386 q 777 463 783 428 q 771 540 771 499 q 772 583 771 568 l 781 725 l 1018 710 l 986 35 l 313 3 l 299 218 l 451 229 q 521 232 479 232 q 638 214 579 232 l 131 719 l 297 890 l 797 386 z "},"↓":{"ha":1250,"x_min":131,"x_max":1119,"o":"m 749 269 q 793 348 769 317 q 864 422 817 379 l 969 519 l 1119 365 l 625 -83 l 131 365 l 281 519 l 386 422 q 457 348 433 379 q 501 269 481 317 l 501 925 l 749 925 l 749 269 z "},"↙":{"ha":1250,"x_min":181,"x_max":1068,"o":"m 1068 719 l 561 214 q 678 232 619 232 q 747 229 719 232 l 900 218 l 886 3 l 213 35 l 181 710 l 418 725 l 426 583 q 428 540 428 568 q 422 463 428 499 q 401 386 415 428 l 901 890 l 1068 719 z "},"←":{"ha":1250,"x_min":79,"x_max":1142,"o":"m 694 794 l 601 693 q 523 619 558 647 q 443 567 488 592 l 1142 567 l 1142 347 l 442 347 q 523 294 488 322 q 601 221 558 267 l 694 119 l 519 -31 l 79 457 l 519 944 l 694 794 z "},"↖":{"ha":1149,"x_min":131,"x_max":1018,"o":"m 351 457 q 372 380 365 415 q 378 303 378 344 q 376 260 378 275 l 368 118 l 131 133 l 163 808 l 836 840 l 850 625 l 697 614 q 628 611 669 611 q 511 629 569 611 l 1018 124 l 851 -47 l 351 457 z "},"↔":{"ha":1807,"x_min":79,"x_max":1699,"o":"m 1699 457 l 1258 -31 l 1083 119 l 1176 221 q 1255 294 1219 267 q 1336 347 1290 322 l 442 347 q 523 294 488 322 q 601 221 558 267 l 694 119 l 519 -31 l 79 457 l 519 944 l 694 794 l 601 693 q 523 619 558 647 q 443 567 488 592 l 1335 567 q 1255 619 1290 592 q 1176 693 1219 647 l 1083 794 l 1258 944 l 1699 457 z "},"↕":{"ha":1250,"x_min":131,"x_max":1119,"o":"m 1119 806 l 969 651 l 864 749 q 793 823 817 792 q 749 901 769 854 l 749 18 q 793 97 769 65 q 864 171 817 128 l 969 268 l 1119 114 l 625 -335 l 131 114 l 281 268 l 386 171 q 457 97 433 128 q 501 18 481 65 l 501 901 q 457 823 481 854 q 386 749 433 792 l 281 651 l 131 806 l 625 1254 l 1119 806 z "},"⇧":{"ha":1000,"x_min":83,"x_max":917,"o":"m 388 -17 q 338 3 357 -17 q 318 53 318 22 l 318 742 l 83 742 l 500 1156 l 917 742 l 682 742 l 682 53 q 663 3 682 22 q 613 -17 644 -17 l 388 -17 m 617 804 l 765 804 l 500 1067 l 235 804 l 383 804 l 383 44 l 617 44 l 617 804 z "},"⇨":{"ha":1333,"x_min":56,"x_max":1278,"o":"m 56 538 q 75 588 56 569 q 125 607 94 607 l 864 607 l 864 851 l 1278 435 l 864 18 l 864 263 l 125 263 q 75 282 94 263 q 56 332 56 301 l 56 538 m 117 324 l 926 324 l 926 169 l 1189 435 l 926 700 l 926 546 l 117 546 l 117 324 z "},"⇩":{"ha":1000,"x_min":83,"x_max":917,"o":"m 613 1042 q 663 1023 644 1042 q 682 972 682 1004 l 682 283 l 917 283 l 500 -131 l 83 283 l 318 283 l 318 972 q 338 1023 318 1004 q 388 1042 357 1042 l 613 1042 m 383 221 l 235 221 l 500 -42 l 765 221 l 617 221 l 617 981 l 383 981 l 383 221 z "},"⇦":{"ha":1333,"x_min":56,"x_max":1278,"o":"m 1278 332 q 1259 282 1278 301 q 1208 263 1240 263 l 469 263 l 469 18 l 56 435 l 469 851 l 469 607 l 1208 607 q 1259 588 1240 607 q 1278 538 1278 569 l 1278 332 m 407 546 l 407 700 l 144 435 l 407 169 l 407 324 l 1217 324 l 1217 546 l 407 546 z "},"➡":{"ha":1389,"x_min":111,"x_max":1333,"o":"m 111 538 q 131 588 111 569 q 181 607 150 607 l 919 607 l 919 851 l 1333 435 l 919 18 l 919 263 l 181 263 q 131 282 150 263 q 111 332 111 301 l 111 538 z "},"⬆":{"ha":1000,"x_min":83,"x_max":917,"o":"m 388 -17 q 338 3 357 -17 q 318 53 318 22 l 318 742 l 83 742 l 500 1156 l 917 742 l 682 742 l 682 53 q 663 3 682 22 q 613 -17 644 -17 l 388 -17 z "},"⬇":{"ha":1000,"x_min":83,"x_max":917,"o":"m 613 1042 q 663 1023 644 1042 q 682 972 682 1004 l 682 283 l 917 283 l 500 -131 l 83 283 l 318 283 l 318 972 q 338 1023 318 1004 q 388 1042 357 1042 l 613 1042 z "},"⬅":{"ha":1389,"x_min":56,"x_max":1278,"o":"m 1278 332 q 1259 282 1278 301 q 1208 263 1240 263 l 469 263 l 469 18 l 56 435 l 469 851 l 469 607 l 1208 607 q 1259 588 1240 607 q 1278 538 1278 569 l 1278 332 z "},"●":{"ha":1218,"x_min":121,"x_max":1097,"o":"m 610 -17 q 364 49 476 -17 q 186 226 251 114 q 121 472 121 339 q 186 717 121 604 q 364 894 251 829 q 610 960 476 960 q 854 894 742 960 q 1032 717 967 829 q 1097 472 1097 604 q 1032 226 1097 339 q 854 49 967 114 q 610 -17 742 -17 z "},"◊":{"ha":839,"x_min":35,"x_max":804,"o":"m 804 471 l 568 0 l 271 0 l 35 471 l 271 944 l 568 944 l 804 471 m 306 472 l 419 189 l 533 472 l 419 754 l 306 472 z "},"▯":{"ha":818,"x_min":133,"x_max":685,"o":"m 685 0 l 133 0 l 133 957 l 685 957 l 685 0 m 261 829 l 261 128 l 557 128 l 557 829 l 261 829 z "},"▲":{"ha":1219,"x_min":75,"x_max":1144,"o":"m 610 978 l 1144 42 l 75 42 l 610 978 z "},"▶":{"ha":1219,"x_min":164,"x_max":1100,"o":"m 164 1024 l 1100 489 l 164 -46 l 164 1024 z "},"▼":{"ha":1219,"x_min":75,"x_max":1144,"o":"m 75 939 l 1144 939 l 610 3 l 75 939 z "},"◀":{"ha":1219,"x_min":119,"x_max":1056,"o":"m 119 489 l 1056 1024 l 1056 -46 l 119 489 z "},"►":{"ha":833,"x_min":138,"x_max":751,"o":"m 751 474 l 138 151 l 138 794 l 751 474 z "},"◄":{"ha":833,"x_min":82,"x_max":696,"o":"m 696 794 l 696 151 l 82 474 l 696 794 z "},"▴":{"ha":696,"x_min":49,"x_max":647,"o":"m 347 701 l 647 235 l 49 235 l 347 701 z "},"▸":{"ha":694,"x_min":136,"x_max":603,"o":"m 136 736 l 603 438 l 136 138 l 136 736 z "},"▾":{"ha":696,"x_min":49,"x_max":647,"o":"m 49 624 l 647 624 l 347 157 l 49 624 z "},"◂":{"ha":694,"x_min":92,"x_max":558,"o":"m 92 438 l 558 736 l 558 138 l 92 438 z "},"@":{"ha":1417,"x_min":49,"x_max":1368,"o":"m 733 707 q 863 689 793 707 q 988 640 932 671 l 988 308 q 991 218 988 249 q 1004 174 994 188 q 1035 161 1014 161 q 1104 223 1078 161 q 1131 443 1131 285 q 731 801 1131 801 q 403 677 517 801 q 289 339 289 553 q 402 -1 289 118 q 733 -119 515 -119 q 878 -106 800 -119 q 1010 -71 956 -92 l 1072 -254 q 912 -298 1008 -281 q 732 -315 815 -315 q 369 -235 524 -315 q 132 -8 215 -156 q 49 338 49 140 q 138 678 49 528 q 382 911 226 828 q 732 994 538 994 q 1069 918 925 994 q 1291 715 1214 842 q 1368 446 1368 589 q 1326 214 1368 315 q 1211 57 1285 113 q 1047 1 1138 1 q 920 43 971 1 q 858 142 869 85 q 780 43 831 78 q 660 8 729 8 q 460 94 522 8 q 397 325 397 181 q 483 602 397 497 q 733 707 569 707 m 696 174 q 758 213 736 174 l 758 532 q 718 540 739 540 q 660 493 682 540 q 639 324 639 446 q 651 204 639 235 q 696 174 664 174 z "},"&":{"ha":1082,"x_min":65,"x_max":1068,"o":"m 443 994 q 618 965 544 994 q 730 883 692 935 q 768 765 768 831 q 724 622 768 683 q 590 497 679 560 l 744 354 q 800 532 776 424 l 1022 467 q 893 218 969 319 l 1068 68 l 824 -28 l 731 61 q 429 -28 601 -28 q 238 6 321 -28 q 110 103 156 40 q 65 249 65 167 q 108 391 65 331 q 250 517 151 451 q 145 642 172 593 q 118 753 118 692 q 153 871 118 815 q 263 960 189 926 q 443 994 336 994 m 447 824 q 399 805 417 824 q 381 753 381 786 q 392 702 381 725 q 442 640 403 679 q 492 694 478 667 q 507 760 507 722 q 492 806 507 789 q 447 824 476 824 m 406 369 q 356 265 356 328 q 389 190 356 218 q 481 161 422 161 q 599 186 547 161 l 406 369 z "},"¶":{"ha":1139,"x_min":69,"x_max":1000,"o":"m 1000 967 l 1000 -286 l 761 -315 l 761 782 l 653 782 l 653 -286 l 414 -315 l 414 350 q 159 435 249 351 q 69 657 69 519 q 169 884 69 801 q 449 967 268 967 l 1000 967 z "},"§":{"ha":778,"x_min":58,"x_max":719,"o":"m 608 260 q 668 195 650 231 q 686 106 686 160 q 646 -14 686 39 q 531 -97 606 -67 q 356 -126 456 -126 q 69 -47 189 -126 l 154 110 q 335 57 249 57 q 428 100 428 57 q 418 130 428 118 q 374 156 408 142 q 267 193 340 171 q 112 271 165 224 q 58 403 58 318 q 172 575 58 507 q 112 644 129 607 q 94 732 94 681 q 133 851 94 797 q 244 935 171 904 q 417 967 318 967 q 569 946 493 967 q 703 888 644 925 l 615 738 q 436 783 528 783 q 353 739 353 783 q 363 709 353 721 q 406 685 374 697 q 510 651 438 672 q 666 573 613 621 q 719 438 719 525 q 608 260 719 326 m 463 329 q 486 400 486 365 q 460 448 486 428 q 358 492 433 468 l 308 508 q 292 443 292 476 q 311 399 292 417 q 385 360 331 381 l 463 329 z "},"©":{"ha":1125,"x_min":72,"x_max":1053,"o":"m 564 1079 q 812 1018 700 1079 q 988 847 924 957 q 1053 599 1053 738 q 988 351 1053 460 q 812 181 924 242 q 564 119 700 119 q 315 181 428 119 q 138 351 203 242 q 72 599 72 460 q 138 847 72 738 q 315 1018 203 957 q 564 1079 428 1079 m 564 946 q 390 902 467 946 q 270 780 314 858 q 226 599 226 701 q 270 417 226 496 q 390 296 314 339 q 564 253 467 253 q 736 296 660 253 q 856 417 813 339 q 900 599 900 496 q 856 780 900 701 q 736 902 813 858 q 564 946 660 946 m 567 879 q 671 858 619 879 q 760 800 722 838 l 682 704 q 637 730 657 724 q 589 736 617 736 q 524 704 549 736 q 499 600 499 672 q 585 463 499 463 q 694 503 644 463 l 765 399 q 674 340 725 361 q 568 319 624 319 q 378 392 447 319 q 310 600 310 465 q 381 803 310 726 q 567 879 451 879 z "},"®":{"ha":882,"x_min":42,"x_max":840,"o":"m 443 1061 q 647 1011 557 1061 q 789 871 738 961 q 840 665 840 781 q 789 461 840 550 q 647 322 738 372 q 443 272 557 272 q 238 322 329 272 q 94 461 146 372 q 42 665 42 550 q 94 871 42 781 q 238 1011 146 961 q 443 1061 329 1061 m 443 381 q 638 458 564 381 q 713 665 713 535 q 678 817 713 751 q 583 917 644 882 q 443 953 522 953 q 301 917 364 953 q 204 817 239 882 q 169 665 169 751 q 204 515 169 579 q 301 415 239 450 q 443 381 364 381 m 604 754 q 584 690 604 718 q 529 646 564 663 l 631 482 l 504 482 l 426 622 l 399 622 l 399 482 l 288 482 l 288 879 l 410 879 q 604 754 604 879 m 399 714 l 439 714 q 476 725 461 714 q 490 758 490 736 q 476 788 490 778 q 438 797 463 797 l 399 797 l 399 714 z "},"™":{"ha":1278,"x_min":35,"x_max":1222,"o":"m 519 817 l 376 817 l 376 410 l 183 410 l 183 817 l 35 817 l 35 967 l 544 967 l 519 817 m 1222 410 l 1038 410 l 1035 593 q 1037 701 1033 656 q 1049 821 1040 747 l 1044 821 l 964 467 l 818 467 l 728 819 l 724 819 q 735 703 732 751 q 736 593 738 656 l 733 410 l 556 410 l 575 967 l 818 967 l 888 638 l 947 967 l 1203 967 l 1222 410 z "},"°":{"ha":721,"x_min":42,"x_max":561,"o":"m 301 503 q 177 534 238 503 q 79 622 117 565 q 42 751 42 678 q 79 880 42 825 q 176 965 117 935 q 301 994 236 994 q 426 965 367 994 q 524 880 486 935 q 561 751 561 825 q 524 622 561 678 q 426 534 486 565 q 301 503 365 503 m 301 657 q 363 684 342 657 q 383 751 383 711 q 363 818 383 792 q 301 844 342 844 q 240 818 261 844 q 219 751 219 792 q 240 684 219 711 q 301 657 261 657 z "},"|":{"ha":500,"x_min":121,"x_max":379,"o":"m 379 -149 l 121 -149 l 121 1128 l 379 1128 l 379 -149 z "},"¦":{"ha":500,"x_min":121,"x_max":379,"o":"m 379 615 l 121 615 l 121 1128 l 379 1128 l 379 615 m 379 -149 l 121 -149 l 121 364 l 379 364 l 379 -149 z "},"ℓ":{"ha":710,"x_min":14,"x_max":696,"o":"m 696 865 q 431 478 696 682 l 431 225 q 464 188 431 188 q 493 193 479 188 l 542 -3 q 389 -28 476 -28 q 216 35 276 -28 q 156 214 156 99 l 156 297 l 58 242 l 14 318 l 156 404 l 156 753 q 239 987 156 913 q 464 1061 322 1061 q 635 1010 574 1061 q 696 865 696 960 m 483 944 q 431 860 431 944 l 431 622 q 535 861 535 738 q 483 944 535 944 z "},"†":{"ha":750,"x_min":21,"x_max":729,"o":"m 503 756 l 729 756 l 729 535 l 503 535 l 503 0 l 247 0 l 247 535 l 21 535 l 21 756 l 247 756 l 247 944 l 503 944 l 503 756 z "},"‡":{"ha":750,"x_min":21,"x_max":729,"o":"m 503 535 l 503 410 l 729 410 l 729 189 l 503 189 l 503 0 l 247 0 l 247 189 l 21 189 l 21 410 l 247 410 l 247 535 l 21 535 l 21 756 l 247 756 l 247 944 l 503 944 l 503 756 l 729 756 l 729 535 l 503 535 z "},"℮":{"ha":1314,"x_min":99,"x_max":1215,"o":"m 656 994 q 933 928 804 994 q 1138 741 1061 861 q 1215 471 1215 621 l 304 471 l 303 168 q 447 69 344 106 q 657 33 550 33 q 862 69 761 33 q 1018 169 963 104 l 1099 169 q 909 28 1021 78 q 656 -22 797 -22 q 372 43 499 -22 q 172 224 244 108 q 99 482 99 339 q 174 742 99 625 q 376 927 249 860 q 656 994 504 994 m 657 939 q 447 902 538 939 q 303 799 357 865 l 304 526 l 1010 526 l 1010 799 q 657 939 881 939 z "},"№":{"ha":1582,"x_min":60,"x_max":1549,"o":"m 844 0 l 486 0 l 275 706 l 279 675 q 303 490 294 574 q 313 300 313 406 l 313 0 l 60 0 l 60 967 l 411 967 l 631 258 l 626 288 q 601 466 610 383 q 592 657 592 549 l 592 967 l 844 967 l 844 0 m 1235 967 q 1465 888 1381 967 q 1549 663 1549 810 q 1465 442 1549 524 q 1236 361 1381 361 q 1006 440 1090 361 q 922 665 922 518 q 1007 885 922 804 q 1235 967 1092 967 m 1235 797 q 1184 766 1200 797 q 1168 665 1168 735 q 1183 561 1168 592 q 1236 531 1199 531 q 1287 562 1271 531 q 1303 663 1303 593 q 1288 767 1303 736 q 1235 797 1272 797 m 922 208 l 1547 208 l 1547 0 l 922 0 l 922 208 z "},"⭘":{"ha":1224,"x_min":69,"x_max":1154,"o":"m 613 1060 q 889 988 765 1060 q 1083 793 1013 917 q 1154 518 1154 669 q 1084 240 1154 364 q 890 46 1014 117 q 613 -25 765 -25 q 333 46 457 -25 q 140 240 210 117 q 69 518 69 364 q 140 793 69 669 q 333 988 210 917 q 613 1060 457 1060 m 613 940 q 405 885 494 940 q 266 735 315 831 q 217 518 217 639 q 266 300 217 396 q 405 150 315 204 q 613 96 494 96 q 817 150 728 96 q 957 300 907 204 q 1007 518 1007 396 q 957 734 1007 638 q 817 885 907 831 q 613 940 728 940 z "},"⇪":{"ha":1000,"x_min":83,"x_max":917,"o":"m 318 742 l 83 742 l 500 1156 l 917 742 l 682 742 l 682 354 l 318 354 l 318 742 m 617 804 l 765 804 l 500 1067 l 235 804 l 383 804 l 383 413 l 617 413 l 617 804 m 682 53 q 663 3 682 22 q 613 -17 644 -17 l 388 -17 q 338 3 357 -17 q 318 53 318 22 l 318 215 l 682 215 l 682 53 m 383 44 l 617 44 l 617 157 l 383 157 l 383 44 z "},"⌧":{"ha":1722,"x_min":139,"x_max":1583,"o":"m 208 -17 q 158 3 178 -17 q 139 53 139 22 l 139 921 q 158 972 139 953 q 208 990 178 990 l 1514 990 q 1565 972 1546 990 q 1583 921 1583 953 l 1583 53 q 1565 3 1583 22 q 1514 -17 1546 -17 l 208 -17 m 647 186 l 861 400 l 1075 186 l 1168 279 l 954 493 l 1168 706 l 1075 801 l 861 586 l 647 801 l 554 706 l 768 493 l 554 279 l 647 186 z "},"⌫":{"ha":2028,"x_min":139,"x_max":1889,"o":"m 139 489 l 667 990 l 1819 990 q 1870 972 1851 990 q 1889 921 1889 953 l 1889 53 q 1870 3 1889 22 q 1819 -17 1851 -17 l 667 -17 l 139 489 m 1022 186 l 1236 400 l 1450 186 l 1543 279 l 1329 493 l 1543 706 l 1450 801 l 1236 586 l 1022 801 l 929 706 l 1143 493 l 929 279 l 1022 186 z "},"⌦":{"ha":1944,"x_min":139,"x_max":1889,"o":"m 208 -17 q 158 3 178 -17 q 139 53 139 22 l 139 921 q 158 972 139 953 q 208 990 178 990 l 1361 990 l 1889 489 l 1361 -17 l 208 -17 m 578 186 l 792 400 l 1006 186 l 1099 279 l 885 493 l 1099 706 l 1006 801 l 792 586 l 578 801 l 485 706 l 699 493 l 485 279 l 578 186 z "},"⌨":{"ha":2028,"x_min":167,"x_max":1861,"o":"m 236 -17 q 186 3 206 -17 q 167 53 167 22 l 167 921 q 186 972 167 953 q 236 990 206 990 l 1792 990 q 1842 972 1824 990 q 1861 921 1861 953 l 1861 53 q 1842 3 1861 22 q 1792 -17 1824 -17 l 236 -17 m 285 914 q 265 906 274 914 q 257 886 257 897 l 257 783 q 265 764 257 772 q 285 756 274 756 l 388 756 q 407 764 399 756 q 415 783 415 772 l 415 886 q 407 906 415 897 q 388 914 399 914 l 285 914 m 535 914 q 515 906 524 914 q 507 886 507 897 l 507 783 q 515 764 507 772 q 535 756 524 756 l 638 756 q 657 764 649 756 q 665 783 665 772 l 665 886 q 657 906 665 897 q 638 914 649 914 l 535 914 m 785 914 q 765 906 774 914 q 757 886 757 897 l 757 783 q 765 764 757 772 q 785 756 774 756 l 888 756 q 907 764 899 756 q 915 783 915 772 l 915 886 q 907 906 915 897 q 888 914 899 914 l 785 914 m 1035 914 q 1015 906 1024 914 q 1007 886 1007 897 l 1007 783 q 1015 764 1007 772 q 1035 756 1024 756 l 1138 756 q 1157 764 1149 756 q 1165 783 1165 772 l 1165 886 q 1157 906 1165 897 q 1138 914 1149 914 l 1035 914 m 1285 914 q 1265 906 1274 914 q 1257 886 1257 897 l 1257 783 q 1265 764 1257 772 q 1285 756 1274 756 l 1388 756 q 1407 764 1399 756 q 1415 783 1415 772 l 1415 886 q 1407 906 1415 897 q 1388 914 1399 914 l 1285 914 m 1535 914 q 1515 906 1524 914 q 1507 886 1507 897 l 1507 783 q 1515 764 1507 772 q 1535 756 1524 756 l 1721 756 q 1740 764 1732 756 q 1749 783 1749 772 l 1749 886 q 1740 906 1749 897 q 1721 914 1732 914 l 1535 914 m 340 685 q 321 676 329 685 q 313 657 313 668 l 313 554 q 321 535 313 543 q 340 526 329 526 l 443 526 q 463 535 454 526 q 471 554 471 543 l 471 657 q 463 676 471 668 q 443 685 454 685 l 340 685 m 590 685 q 571 676 579 685 q 563 657 563 668 l 563 554 q 571 535 563 543 q 590 526 579 526 l 693 526 q 713 535 704 526 q 721 554 721 543 l 721 657 q 713 676 721 668 q 693 685 704 685 l 590 685 m 840 685 q 821 676 829 685 q 813 657 813 668 l 813 554 q 821 535 813 543 q 840 526 829 526 l 943 526 q 963 535 954 526 q 971 554 971 543 l 971 657 q 963 676 971 668 q 943 685 954 685 l 840 685 m 1090 685 q 1071 676 1079 685 q 1063 657 1063 668 l 1063 554 q 1071 535 1063 543 q 1090 526 1079 526 l 1193 526 q 1213 535 1204 526 q 1221 554 1221 543 l 1221 657 q 1213 676 1221 668 q 1193 685 1204 685 l 1090 685 m 1340 685 q 1321 676 1329 685 q 1313 657 1313 668 l 1313 554 q 1321 535 1313 543 q 1340 526 1329 526 l 1443 526 q 1463 535 1454 526 q 1471 554 1471 543 l 1471 657 q 1463 676 1471 668 q 1443 685 1454 685 l 1340 685 m 1618 318 q 1626 299 1618 307 q 1646 290 1635 290 l 1721 290 q 1740 299 1732 290 q 1749 318 1749 307 l 1749 657 q 1740 676 1749 668 q 1721 685 1732 685 l 1590 685 q 1571 676 1579 685 q 1563 657 1563 668 l 1563 554 q 1571 535 1563 543 q 1590 526 1579 526 q 1610 518 1601 526 q 1618 499 1618 510 l 1618 318 m 396 449 q 376 440 385 449 q 368 421 368 432 l 368 318 q 376 299 368 307 q 396 290 385 290 l 499 290 q 518 299 510 290 q 526 318 526 307 l 526 421 q 518 440 526 432 q 499 449 510 449 l 396 449 m 646 449 q 626 440 635 449 q 618 421 618 432 l 618 318 q 626 299 618 307 q 646 290 635 290 l 749 290 q 768 299 760 290 q 776 318 776 307 l 776 421 q 768 440 776 432 q 749 449 760 449 l 646 449 m 896 449 q 876 440 885 449 q 868 421 868 432 l 868 318 q 876 299 868 307 q 896 290 885 290 l 999 290 q 1018 299 1010 290 q 1026 318 1026 307 l 1026 421 q 1018 440 1026 432 q 999 449 1010 449 l 896 449 m 1146 449 q 1126 440 1135 449 q 1118 421 1118 432 l 1118 318 q 1126 299 1118 307 q 1146 290 1135 290 l 1249 290 q 1268 299 1260 290 q 1276 318 1276 307 l 1276 421 q 1268 440 1276 432 q 1249 449 1260 449 l 1146 449 m 1396 449 q 1376 440 1385 449 q 1368 421 1368 432 l 1368 318 q 1376 299 1368 307 q 1396 290 1385 290 l 1499 290 q 1518 299 1510 290 q 1526 318 1526 307 l 1526 421 q 1518 440 1526 432 q 1499 449 1510 449 l 1396 449 m 590 219 q 571 211 579 219 q 563 192 563 203 l 563 89 q 571 69 563 78 q 590 61 579 61 l 1443 61 q 1463 69 1454 61 q 1471 89 1471 78 l 1471 192 q 1463 211 1471 203 q 1443 219 1454 219 l 590 219 z "},"⏎":{"ha":1389,"x_min":42,"x_max":1236,"o":"m 876 972 q 896 1023 876 1004 q 946 1042 915 1042 l 1167 1042 q 1217 1023 1199 1042 q 1236 972 1236 1004 l 1236 332 q 1217 282 1236 301 q 1167 263 1199 263 l 456 263 l 456 21 l 42 435 l 456 850 l 456 608 l 876 608 l 876 972 m 939 981 l 939 546 l 393 546 l 393 700 l 131 435 l 393 169 l 393 324 l 1172 324 l 1172 981 l 939 981 z "},"꞉":{"ha":306,"x_min":24,"x_max":282,"o":"m 153 647 q 244 609 206 647 q 282 518 282 571 q 244 428 282 465 q 153 390 206 390 q 62 428 100 390 q 24 518 24 465 q 62 609 24 571 q 153 647 100 647 m 153 232 q 244 194 206 232 q 282 104 282 157 q 244 13 282 51 q 153 -25 206 -25 q 62 13 100 -25 q 24 104 24 51 q 62 194 24 157 q 153 232 100 232 z "},"ˮ":{"ha":601,"x_min":35,"x_max":553,"o":"m 157 1065 q 242 1032 208 1065 q 275 950 275 999 q 265 889 275 921 q 231 806 256 857 l 154 650 l 36 650 l 89 851 q 35 951 35 889 q 70 1033 35 1000 q 157 1065 106 1065 m 435 1065 q 519 1032 486 1065 q 553 950 553 999 q 543 889 553 921 q 508 806 533 857 l 432 650 l 314 650 l 367 851 q 313 951 313 889 q 348 1033 313 1000 q 435 1065 383 1065 z "},"˗":{"ha":674,"x_min":56,"x_max":618,"o":"m 56 508 l 618 508 l 618 321 l 56 321 l 56 508 z "},"˖":{"ha":699,"x_min":56,"x_max":643,"o":"m 449 508 l 643 508 l 643 321 l 449 321 l 449 121 l 249 121 l 249 321 l 56 321 l 56 508 l 249 508 l 249 708 l 449 708 l 449 508 z "},"˞":{"ha":600,"x_min":42,"x_max":614,"o":"m 433 421 q 277 463 335 421 q 201 581 219 506 l 200 586 l 42 492 l 42 665 l 186 742 l 406 742 l 406 668 q 422 620 406 636 q 467 604 439 604 q 518 612 496 604 q 544 621 540 619 l 614 472 q 433 421 536 421 z "},"꞊":{"ha":674,"x_min":56,"x_max":618,"o":"m 56 646 l 618 646 l 618 458 l 56 458 l 56 646 m 56 371 l 618 371 l 618 183 l 56 183 l 56 371 z "},"ˤ":{"ha":454,"x_min":42,"x_max":413,"o":"m 181 556 l 181 756 l 158 763 q 69 815 97 782 q 42 911 42 849 q 98 1035 42 989 q 244 1082 154 1082 q 332 1068 294 1082 q 413 1021 369 1054 l 357 954 q 304 981 329 972 q 250 990 279 990 q 185 970 210 990 q 161 913 161 950 q 183 847 161 868 q 253 814 206 825 l 303 803 l 303 556 l 181 556 z "},"˥":{"ha":533,"x_min":42,"x_max":492,"o":"m 306 804 l 42 804 l 42 967 l 492 967 l 492 0 l 306 0 l 306 804 z "},"˩":{"ha":533,"x_min":42,"x_max":492,"o":"m 492 967 l 492 0 l 42 0 l 42 164 l 306 164 l 306 967 l 492 967 z "},"˦":{"ha":533,"x_min":42,"x_max":492,"o":"m 492 967 l 492 0 l 306 0 l 306 613 l 42 613 l 42 775 l 306 775 l 306 967 l 492 967 z "},"˨":{"ha":533,"x_min":42,"x_max":492,"o":"m 492 967 l 492 0 l 306 0 l 306 196 l 42 196 l 42 358 l 306 358 l 306 967 l 492 967 z "},"˧":{"ha":533,"x_min":42,"x_max":492,"o":"m 492 967 l 492 0 l 306 0 l 306 404 l 42 404 l 42 567 l 306 567 l 306 967 l 492 967 z "},"˔":{"ha":583,"x_min":56,"x_max":528,"o":"m 528 238 l 56 238 l 56 382 l 206 382 l 206 576 l 376 576 l 376 382 l 528 382 l 528 238 z "},"϶":{"ha":676,"x_min":0,"x_max":653,"o":"m 293 769 q 556 669 460 769 q 653 379 653 569 q 551 82 653 192 q 263 -28 449 -28 q 122 -6 185 -28 q 0 57 58 15 l 114 210 q 184 176 153 186 q 250 167 215 167 q 378 304 365 167 l 135 304 l 135 449 l 376 449 q 343 546 371 517 q 269 575 315 575 q 199 565 232 575 q 131 531 167 554 l 17 678 q 293 769 131 769 z "},"ʹ":{"ha":456,"x_min":56,"x_max":400,"o":"m 164 967 l 400 967 l 231 564 l 56 564 l 164 967 z "},"͵":{"ha":456,"x_min":56,"x_max":400,"o":"m 292 -186 l 56 -186 l 225 217 l 400 217 l 292 -186 z "},"ˠ":{"ha":507,"x_min":56,"x_max":456,"o":"m 314 607 q 365 488 365 538 q 338 426 365 449 q 257 403 311 403 q 176 425 204 403 q 147 488 147 447 q 201 608 147 536 l 56 924 l 178 924 l 257 681 l 335 924 l 456 924 l 314 607 m 275 494 q 270 519 275 506 q 257 549 265 532 q 242 517 247 531 q 238 494 238 504 q 257 475 238 475 q 275 494 275 475 z "},"ˏ":{"ha":506,"x_min":42,"x_max":464,"o":"z "},"ˑ":{"ha":306,"x_min":24,"x_max":282,"o":"m 24 700 l 282 700 l 167 440 l 136 440 l 24 700 z "},"ː":{"ha":306,"x_min":24,"x_max":282,"o":"m 24 703 l 282 703 l 167 443 l 136 443 l 24 703 m 167 260 l 282 0 l 24 0 l 136 260 l 167 260 z "},"ʻ":{"ha":350,"x_min":42,"x_max":308,"o":"m 174 814 q 79 850 117 814 q 42 942 42 886 q 53 1010 42 975 q 92 1101 64 1046 l 176 1275 l 307 1275 l 249 1051 q 308 940 308 1010 q 269 850 308 886 q 174 814 231 814 z "},"ʺ":{"ha":761,"x_min":56,"x_max":706,"o":"m 164 967 l 400 967 l 231 564 l 56 564 l 164 967 m 469 967 l 706 967 l 536 564 l 361 564 l 469 967 z "},"ˋ":{"ha":506,"x_min":42,"x_max":464,"o":"m 464 989 l 390 851 l 42 989 l 144 1189 l 464 989 z "},"ˀ":{"ha":433,"x_min":42,"x_max":392,"o":"m 121 978 q 197 990 174 979 q 219 1026 219 1001 q 206 1055 219 1044 q 168 1065 192 1065 q 126 1061 144 1065 q 82 1047 107 1057 l 42 1150 q 206 1189 107 1189 q 343 1147 294 1189 q 392 1039 392 1106 q 361 949 392 983 q 272 903 331 914 l 272 835 l 121 835 l 121 978 z "},"ˎ":{"ha":506,"x_min":42,"x_max":464,"o":"z "},"ʹ":{"ha":456,"x_min":56,"x_max":400,"o":"m 164 967 l 400 967 l 231 564 l 56 564 l 164 967 z "},"ʿ":{"ha":297,"x_min":42,"x_max":256,"o":"m 256 964 q 215 980 231 964 q 200 1028 200 996 q 256 1092 200 1092 l 256 1231 q 142 1203 190 1231 q 67 1129 93 1175 q 42 1028 42 1083 q 67 926 42 972 q 142 851 93 879 q 256 824 190 824 l 256 964 z "},"ˊ":{"ha":506,"x_min":42,"x_max":464,"o":"m 464 989 l 115 851 l 42 989 l 361 1189 l 464 989 z "},"ˌ":{"ha":319,"x_min":42,"x_max":278,"o":"z "},"ˈ":{"ha":319,"x_min":42,"x_max":278,"o":"m 42 1244 l 278 1244 l 278 856 l 42 856 l 42 1244 z "},"̈":{"ha":0,"x_min":-646,"x_max":-42,"o":"m -514 1136 q -420 1099 -458 1136 q -382 1008 -382 1061 q -420 917 -382 954 q -514 879 -458 879 q -607 917 -568 879 q -646 1008 -646 954 q -607 1099 -646 1061 q -514 1136 -568 1136 m -174 1136 q -80 1099 -118 1136 q -42 1008 -42 1061 q -80 917 -42 954 q -174 879 -118 879 q -267 917 -228 879 q -306 1008 -306 954 q -267 1099 -306 1061 q -174 1136 -228 1136 z "},"̇":{"ha":0,"x_min":-350,"x_max":-42,"o":"m -196 1151 q -85 1109 -129 1151 q -42 1004 -42 1067 q -85 899 -42 942 q -196 857 -129 857 q -306 899 -262 857 q -350 1004 -350 942 q -306 1109 -350 1067 q -196 1151 -262 1151 z "},"̀":{"ha":0,"x_min":-464,"x_max":-42,"o":"m -42 989 l -115 851 l -464 989 l -361 1189 l -42 989 z "},"́":{"ha":0,"x_min":-464,"x_max":-42,"o":"m -42 989 l -390 851 l -464 989 l -144 1189 l -42 989 z "},"̋":{"ha":0,"x_min":-586,"x_max":-42,"o":"m -290 1085 l -468 839 l -586 900 l -460 1174 l -290 1085 m -42 1063 l -232 826 l -346 894 l -206 1161 l -42 1063 z "},"̂":{"ha":0,"x_min":-608,"x_max":-42,"o":"m -608 957 l -407 1167 l -243 1167 l -42 957 l -135 850 l -325 983 l -515 850 l -608 957 z "},"̌":{"ha":0,"x_min":-608,"x_max":-42,"o":"m -42 1046 l -243 836 l -407 836 l -608 1046 l -515 1153 l -325 1019 l -135 1153 l -42 1046 z "},"̆":{"ha":0,"x_min":-556,"x_max":-42,"o":"m -299 869 q -481 947 -417 869 q -556 1142 -546 1025 l -412 1165 q -372 1085 -400 1114 q -299 1056 -343 1056 q -226 1085 -254 1056 q -185 1165 -197 1114 l -42 1142 q -116 947 -51 1025 q -299 869 -181 869 z "},"̊":{"ha":0,"x_min":-469,"x_max":-42,"o":"m -256 1231 q -142 1203 -190 1231 q -67 1129 -93 1175 q -42 1028 -42 1083 q -67 926 -42 972 q -142 851 -93 879 q -256 824 -190 824 q -369 851 -321 824 q -444 926 -418 879 q -469 1028 -469 972 q -444 1129 -469 1083 q -369 1203 -418 1175 q -256 1231 -321 1231 m -256 1092 q -296 1076 -281 1092 q -311 1028 -311 1060 q -296 980 -311 996 q -256 964 -281 964 q -215 980 -231 964 q -200 1028 -200 996 q -215 1076 -200 1060 q -256 1092 -231 1092 z "},"̃":{"ha":0,"x_min":-600,"x_max":-42,"o":"m -240 864 q -290 871 -269 864 q -332 893 -310 878 q -370 917 -358 911 q -397 924 -382 924 q -437 910 -422 924 q -471 864 -453 896 l -600 926 q -520 1062 -571 1008 q -404 1115 -469 1115 q -352 1108 -374 1115 q -307 1085 -331 1101 q -270 1062 -283 1068 q -243 1056 -257 1056 q -204 1069 -219 1056 q -171 1115 -189 1083 l -42 1053 q -122 917 -71 969 q -240 864 -174 864 z "},"̄":{"ha":0,"x_min":-493,"x_max":-42,"o":"m -493 900 l -493 1086 l -42 1086 l -42 900 l -493 900 z "},"̅":{"ha":0,"x_min":-707,"x_max":-42,"o":"m -707 903 l -707 1033 l -42 1033 l -42 903 l -707 903 z "},"̉":{"ha":0,"x_min":-378,"x_max":-28,"o":"m -299 978 q -223 990 -246 979 q -200 1026 -200 1001 q -214 1055 -200 1044 q -251 1065 -228 1065 q -294 1061 -275 1065 q -337 1047 -312 1057 l -378 1150 q -214 1189 -312 1189 q -76 1147 -125 1189 q -28 1039 -28 1106 q -58 949 -28 983 q -147 903 -89 914 l -147 835 l -299 835 l -299 978 z "},"̍":{"ha":0,"x_min":-278,"x_max":-42,"o":"m -278 1244 l -42 1244 l -42 856 l -278 856 l -278 1244 z "},"̏":{"ha":0,"x_min":-610,"x_max":-42,"o":"m -294 925 l -428 861 l -610 1133 l -439 1218 l -294 925 m -42 921 l -178 867 l -349 1140 l -175 1218 l -42 921 z "},"̑":{"ha":0,"x_min":-556,"x_max":-42,"o":"m -299 1121 q -116 1043 -181 1121 q -42 849 -51 965 l -185 825 q -226 906 -197 876 q -299 935 -254 935 q -372 906 -343 935 q -412 825 -400 876 l -556 849 q -481 1043 -546 965 q -299 1121 -417 1121 z "},"̒":{"ha":0,"x_min":-297,"x_max":-42,"o":"m -169 796 q -261 832 -225 796 q -297 922 -297 868 q -289 976 -297 951 q -260 1044 -281 1001 l -190 1185 l -60 1185 l -94 1026 q -42 922 -42 986 q -78 833 -42 869 q -169 796 -114 796 z "},"̓":{"ha":0,"x_min":-297,"x_max":-42,"o":"m -169 1199 q -78 1163 -114 1199 q -42 1072 -42 1126 q -50 1018 -42 1043 q -79 950 -58 993 l -149 810 l -279 810 l -244 968 q -297 1072 -297 1008 q -261 1162 -297 1125 q -169 1199 -225 1199 z "},"̖":{"ha":0,"x_min":-464,"x_max":-42,"o":"m -42 -239 l -111 -376 l -464 -250 l -365 -50 l -42 -239 z "},"̗":{"ha":0,"x_min":-464,"x_max":-42,"o":"m -42 -250 l -394 -376 l -464 -239 l -139 -50 l -42 -250 z "},"̘":{"ha":0,"x_min":-353,"x_max":-42,"o":"m -42 -76 l -42 -493 l -200 -493 l -200 -357 l -353 -357 l -353 -214 l -200 -214 l -200 -76 l -42 -76 z "},"̙":{"ha":0,"x_min":-353,"x_max":-42,"o":"m -194 -214 l -42 -214 l -42 -357 l -194 -357 l -194 -493 l -353 -493 l -353 -76 l -194 -76 l -194 -214 z "},"̚":{"ha":0,"x_min":-357,"x_max":-42,"o":"m -42 1132 l -42 828 l -199 828 l -199 993 l -357 993 l -357 1132 l -42 1132 z "},"̛":{"ha":0,"x_min":-283,"x_max":-42,"o":"m -283 654 q -233 676 -247 657 q -218 738 -218 696 q -235 828 -218 781 l -68 849 q -42 721 -42 793 q -102 578 -42 626 q -269 529 -162 529 l -283 654 z "},"̜":{"ha":0,"x_min":-256,"x_max":-42,"o":"m -42 -328 q -82 -312 -67 -328 q -97 -264 -97 -296 q -42 -200 -97 -200 l -42 -61 q -156 -89 -107 -61 q -230 -162 -204 -117 q -256 -264 -256 -208 q -230 -366 -256 -319 q -156 -440 -204 -412 q -42 -468 -107 -468 l -42 -328 z "},"̝":{"ha":0,"x_min":-514,"x_max":-42,"o":"m -42 -457 l -514 -457 l -514 -312 l -364 -312 l -364 -118 l -193 -118 l -193 -312 l -42 -312 l -42 -457 z "},"̞":{"ha":0,"x_min":-514,"x_max":-42,"o":"m -193 -262 l -193 -457 l -364 -457 l -364 -262 l -514 -262 l -514 -118 l -42 -118 l -42 -262 l -193 -262 z "},"̟":{"ha":0,"x_min":-464,"x_max":-42,"o":"m -169 -225 l -42 -225 l -42 -365 l -169 -365 l -169 -485 l -336 -485 l -336 -365 l -464 -365 l -464 -225 l -336 -225 l -336 -106 l -169 -106 l -169 -225 z "},"̠":{"ha":0,"x_min":-464,"x_max":-42,"o":"m -464 -225 l -42 -225 l -42 -365 l -464 -365 l -464 -225 z "},"̡":{"ha":0,"x_min":-572,"x_max":-42,"o":"m -353 -315 q -572 -253 -486 -315 l -483 -96 q -435 -115 -454 -110 q -389 -121 -415 -121 q -335 -102 -354 -121 q -317 -47 -317 -83 l -317 1 l -42 1 l -42 -22 q -126 -240 -42 -165 q -353 -315 -210 -315 z "},"̣":{"ha":0,"x_min":-350,"x_max":-42,"o":"m -196 -367 q -306 -324 -262 -367 q -350 -219 -350 -282 q -306 -115 -350 -157 q -196 -72 -262 -72 q -85 -115 -129 -72 q -42 -219 -42 -157 q -85 -324 -42 -282 q -196 -367 -129 -367 z "},"̤":{"ha":0,"x_min":-646,"x_max":-42,"o":"m -514 -89 q -420 -126 -458 -89 q -382 -217 -382 -164 q -420 -308 -382 -271 q -514 -346 -458 -346 q -607 -308 -568 -346 q -646 -217 -646 -271 q -607 -126 -646 -164 q -514 -89 -568 -89 m -174 -89 q -80 -126 -118 -89 q -42 -217 -42 -164 q -80 -308 -42 -271 q -174 -346 -118 -346 q -267 -308 -228 -346 q -306 -217 -306 -271 q -267 -126 -306 -164 q -174 -89 -228 -89 z "},"̥":{"ha":0,"x_min":-469,"x_max":-42,"o":"m -256 -61 q -142 -89 -190 -61 q -67 -162 -93 -117 q -42 -264 -42 -208 q -67 -366 -42 -319 q -142 -440 -93 -412 q -256 -468 -190 -468 q -369 -440 -321 -468 q -444 -366 -418 -412 q -469 -264 -469 -319 q -444 -162 -469 -208 q -369 -89 -418 -117 q -256 -61 -321 -61 m -256 -200 q -296 -216 -281 -200 q -311 -264 -311 -232 q -296 -312 -311 -296 q -256 -328 -281 -328 q -215 -312 -231 -328 q -200 -264 -200 -296 q -215 -216 -200 -232 q -256 -200 -231 -200 z "},"̦":{"ha":0,"x_min":-297,"x_max":-42,"o":"m -169 -86 q -78 -122 -114 -86 q -42 -212 -42 -158 q -50 -267 -42 -242 q -79 -335 -58 -292 l -149 -475 l -279 -475 l -244 -317 q -297 -212 -297 -276 q -261 -123 -297 -160 q -169 -86 -225 -86 z "},"̧":{"ha":0,"x_min":-443,"x_max":-42,"o":"m -194 -60 q -42 -210 -42 -79 q -103 -333 -42 -285 q -269 -382 -164 -382 q -366 -369 -321 -382 q -443 -335 -411 -356 l -383 -215 q -294 -240 -337 -240 q -232 -207 -232 -240 q -262 -176 -232 -185 q -362 -167 -293 -167 l -339 22 l -194 22 l -194 -60 z "},"̨":{"ha":0,"x_min":-387,"x_max":-42,"o":"m -42 0 q -166 -65 -131 -29 q -201 -132 -201 -100 q -131 -193 -201 -193 q -46 -182 -94 -193 l -62 -342 q -165 -353 -111 -353 q -325 -306 -262 -353 q -387 -178 -387 -258 q -306 -15 -387 -76 q -85 85 -225 47 l -42 0 z "},"̩":{"ha":0,"x_min":-278,"x_max":-42,"o":"m -278 -89 l -42 -89 l -42 -478 l -278 -478 l -278 -89 z "},"̪":{"ha":0,"x_min":-486,"x_max":-42,"o":"m -486 -118 l -42 -118 l -42 -360 l -199 -360 l -199 -249 l -329 -249 l -329 -360 l -486 -360 l -486 -118 z "},"̫":{"ha":0,"x_min":-661,"x_max":-42,"o":"m -42 -85 q -90 -267 -47 -196 q -212 -339 -133 -339 q -351 -232 -306 -339 q -490 -339 -397 -339 q -612 -267 -569 -339 q -661 -85 -656 -196 l -553 -71 q -529 -144 -544 -122 q -483 -167 -514 -167 q -437 -144 -453 -167 q -414 -71 -422 -122 l -289 -71 q -265 -144 -281 -122 q -219 -167 -250 -167 q -174 -144 -189 -167 q -150 -71 -158 -122 l -42 -85 z "},"̬":{"ha":0,"x_min":-608,"x_max":-42,"o":"m -42 -183 l -243 -379 l -407 -379 l -608 -183 l -515 -76 l -325 -196 l -135 -76 l -42 -183 z "},"̭":{"ha":0,"x_min":-608,"x_max":-42,"o":"m -608 -293 l -407 -83 l -243 -83 l -42 -293 l -135 -400 l -325 -267 l -515 -400 l -608 -293 z "},"̯":{"ha":0,"x_min":-556,"x_max":-42,"o":"m -299 -60 q -116 -137 -181 -60 q -42 -332 -51 -215 l -185 -356 q -226 -275 -197 -304 q -299 -246 -254 -246 q -372 -275 -343 -246 q -412 -356 -400 -304 l -556 -332 q -481 -137 -546 -215 q -299 -60 -417 -60 z "},"̰":{"ha":0,"x_min":-600,"x_max":-42,"o":"m -240 -317 q -290 -310 -269 -317 q -332 -287 -310 -303 q -370 -263 -358 -269 q -397 -257 -382 -257 q -437 -271 -422 -257 q -471 -317 -453 -285 l -600 -254 q -520 -119 -571 -172 q -404 -65 -469 -65 q -352 -72 -374 -65 q -307 -96 -331 -79 q -270 -119 -283 -112 q -243 -125 -257 -125 q -204 -111 -219 -125 q -171 -65 -189 -97 l -42 -128 q -122 -264 -71 -211 q -240 -317 -174 -317 z "},"̱":{"ha":0,"x_min":-493,"x_max":-42,"o":"m -493 -281 l -493 -94 l -42 -94 l -42 -281 l -493 -281 z "},"̲":{"ha":0,"x_min":-719,"x_max":-42,"o":"m -719 -281 l -719 -94 l -42 -94 l -42 -281 l -719 -281 z "},"̴":{"ha":0,"x_min":-764,"x_max":-42,"o":"m -285 307 q -370 320 -336 307 q -446 358 -404 333 q -493 383 -476 376 q -531 390 -510 390 q -578 376 -561 390 q -608 345 -594 363 q -625 321 -621 328 l -764 390 q -662 538 -719 483 q -521 592 -606 592 q -435 578 -469 592 q -360 540 -401 565 q -312 515 -329 522 q -275 508 -296 508 q -229 521 -246 508 q -199 550 -212 533 q -179 575 -186 567 l -42 508 q -143 361 -86 415 q -285 307 -200 307 z "},"̵":{"ha":0,"x_min":-521,"x_max":-49,"o":"m -521 539 l -49 539 l -49 331 l -521 331 l -521 539 z "},"̶":{"ha":0,"x_min":-1111,"x_max":-42,"o":"m -1111 539 l -42 539 l -42 331 l -1111 331 l -1111 539 z "},"̹":{"ha":0,"x_min":-256,"x_max":-42,"o":"m -256 -467 q -142 -439 -190 -467 q -67 -365 -93 -411 q -42 -262 -42 -318 q -67 -161 -42 -207 q -142 -87 -93 -115 q -256 -60 -190 -60 l -256 -199 q -200 -262 -200 -199 q -215 -310 -200 -294 q -256 -326 -231 -326 l -256 -467 z "},"̺":{"ha":0,"x_min":-486,"x_max":-42,"o":"m -329 -117 l -329 -228 l -199 -228 l -199 -117 l -42 -117 l -42 -358 l -486 -358 l -486 -117 l -329 -117 z "},"̻":{"ha":0,"x_min":-486,"x_max":-42,"o":"m -486 -81 l -42 -81 l -42 -358 l -486 -358 l -486 -81 m -160 -262 l -160 -176 l -368 -176 l -368 -262 l -160 -262 z "},"̼":{"ha":0,"x_min":-661,"x_max":-42,"o":"m -212 -74 q -90 -145 -133 -74 q -42 -328 -47 -217 l -150 -342 q -174 -268 -158 -290 q -219 -246 -189 -246 q -265 -268 -250 -246 q -289 -342 -281 -290 l -414 -342 q -437 -268 -422 -290 q -483 -246 -453 -246 q -529 -268 -514 -246 q -553 -342 -544 -290 l -661 -328 q -612 -145 -656 -217 q -490 -74 -569 -74 q -351 -181 -397 -74 q -212 -74 -306 -74 z "},"̽":{"ha":0,"x_min":-442,"x_max":-42,"o":"m -42 833 l -169 833 l -244 954 l -319 833 l -442 833 l -311 1008 l -428 1164 l -301 1164 l -240 1063 l -181 1164 l -61 1164 l -172 1011 l -42 833 z "},"͜":{"ha":0,"x_min":-481,"x_max":478,"o":"m 478 -151 q 262 -276 374 -231 q -1 -322 150 -322 q -265 -276 -153 -322 q -481 -151 -376 -231 l -403 -37 q -1 -124 -201 -124 q 399 -37 197 -124 l 478 -151 z "},"͡":{"ha":0,"x_min":-481,"x_max":478,"o":"m 399 860 q -1 946 197 946 q -403 860 -201 946 l -481 974 q -265 1099 -376 1053 q -1 1144 -153 1144 q 262 1099 150 1144 q 478 974 374 1053 l 399 860 z "},"´":{"ha":506,"x_min":42,"x_max":464,"o":"m 464 989 l 115 851 l 42 989 l 361 1189 l 464 989 z "},"᷉":{"ha":0,"x_min":-682,"x_max":-42,"o":"m -465 956 l -629 879 l -682 969 l -467 1122 l -289 1010 l -126 1122 l -42 1001 l -289 865 l -465 956 z "},"᷇":{"ha":0,"x_min":-647,"x_max":-42,"o":"m -42 1100 l -42 914 l -319 914 l -557 783 l -647 906 l -410 1100 l -42 1100 z "},"˘":{"ha":597,"x_min":42,"x_max":556,"o":"m 299 869 q 116 947 181 869 q 42 1142 51 1025 l 185 1165 q 226 1085 197 1114 q 299 1056 254 1056 q 372 1085 343 1056 q 413 1165 400 1114 l 556 1142 q 481 947 546 1025 q 299 869 417 869 z "},"ˇ":{"ha":650,"x_min":42,"x_max":608,"o":"m 608 1046 l 407 836 l 243 836 l 42 1046 l 135 1153 l 325 1019 l 515 1153 l 608 1046 z "},"¸":{"ha":485,"x_min":42,"x_max":443,"o":"m 290 -60 q 443 -210 443 -79 q 382 -333 443 -285 q 215 -382 321 -382 q 119 -369 164 -382 q 42 -335 74 -356 l 101 -215 q 190 -240 147 -240 q 253 -207 253 -240 q 222 -176 253 -185 q 122 -167 192 -167 l 146 22 l 290 22 l 290 -60 z "},"ˆ":{"ha":650,"x_min":42,"x_max":608,"o":"m 42 957 l 243 1167 l 407 1167 l 608 957 l 515 850 l 325 983 l 135 850 l 42 957 z "},"¨":{"ha":688,"x_min":39,"x_max":643,"o":"m 171 1136 q 265 1099 226 1136 q 303 1008 303 1061 q 265 917 303 954 q 171 879 226 879 q 78 917 117 879 q 39 1008 39 954 q 78 1099 39 1061 q 171 1136 117 1136 m 511 1136 q 605 1099 567 1136 q 643 1008 643 1061 q 605 917 643 954 q 511 879 567 879 q 418 917 457 879 q 379 1008 379 954 q 418 1099 379 1061 q 511 1136 457 1136 z "},"˙":{"ha":392,"x_min":42,"x_max":350,"o":"m 196 1151 q 306 1109 263 1151 q 350 1004 350 1067 q 306 899 350 942 q 196 857 263 857 q 85 899 129 857 q 42 1004 42 942 q 85 1109 42 1067 q 196 1151 129 1151 z "},"`":{"ha":506,"x_min":42,"x_max":464,"o":"m 464 989 l 390 851 l 42 989 l 144 1189 l 464 989 z "},"᷈":{"ha":0,"x_min":-682,"x_max":-42,"o":"m -682 1001 l -597 1122 l -435 1010 l -257 1122 l -42 969 l -94 879 l -258 956 l -435 865 l -682 1001 z "},"᷅":{"ha":0,"x_min":-647,"x_max":-42,"o":"m -42 1010 l -42 824 l -410 824 l -647 1018 l -510 1169 l -339 1010 l -42 1010 z "},"˝":{"ha":651,"x_min":42,"x_max":586,"o":"m 338 1085 l 160 839 l 42 900 l 168 1174 l 338 1085 m 586 1063 l 396 826 l 282 894 l 422 1161 l 586 1063 z "},"¯":{"ha":535,"x_min":42,"x_max":493,"o":"m 42 900 l 42 1086 l 493 1086 l 493 900 l 42 900 z "},"᷄":{"ha":0,"x_min":-647,"x_max":-42,"o":"m -42 1018 l -279 824 l -647 824 l -647 1010 l -350 1010 l -179 1169 l -42 1018 z "},"᷆":{"ha":0,"x_min":-647,"x_max":-42,"o":"m -42 906 l -132 783 l -369 914 l -647 914 l -647 1100 l -279 1100 l -42 906 z "},"˛":{"ha":429,"x_min":81,"x_max":426,"o":"m 426 0 q 302 -65 338 -29 q 267 -132 267 -100 q 338 -193 267 -193 q 422 -182 374 -193 l 406 -342 q 303 -353 357 -353 q 143 -306 206 -353 q 81 -178 81 -258 q 162 -15 81 -76 q 383 85 243 47 l 426 0 z "},"˚":{"ha":511,"x_min":42,"x_max":469,"o":"m 256 1231 q 369 1203 321 1231 q 444 1129 418 1175 q 469 1028 469 1083 q 444 926 469 972 q 369 851 418 879 q 256 824 321 824 q 142 851 190 824 q 67 926 93 879 q 42 1028 42 972 q 67 1129 42 1083 q 142 1203 93 1175 q 256 1231 190 1231 m 256 1092 q 215 1076 231 1092 q 200 1028 200 1060 q 215 980 200 996 q 256 964 231 964 q 296 980 281 964 q 311 1028 311 996 q 296 1076 311 1060 q 256 1092 281 1092 z "},"˜":{"ha":642,"x_min":42,"x_max":600,"o":"m 401 864 q 352 871 372 864 q 310 893 332 878 q 272 917 283 911 q 244 924 260 924 q 204 910 219 924 q 171 864 189 896 l 42 926 q 122 1062 71 1008 q 238 1115 172 1115 q 290 1108 268 1115 q 335 1085 311 1101 q 372 1062 358 1068 q 399 1056 385 1056 q 438 1069 422 1056 q 471 1115 453 1083 l 600 1053 q 519 917 571 969 q 401 864 468 864 z "},"͂":{"ha":0,"x_min":-600,"x_max":-42,"o":"m -240 864 q -290 871 -269 864 q -332 893 -310 878 q -370 917 -358 911 q -397 924 -382 924 q -437 910 -422 924 q -471 864 -453 896 l -600 926 q -520 1062 -571 1008 q -404 1115 -469 1115 q -352 1108 -374 1115 q -307 1085 -331 1101 q -270 1062 -283 1068 q -243 1056 -257 1056 q -204 1069 -219 1056 q -171 1115 -189 1083 l -42 1053 q -122 917 -71 969 q -240 864 -174 864 z "},"ͅ":{"ha":0,"x_min":-408,"x_max":-42,"o":"m -208 -294 q -356 -240 -304 -294 q -408 -99 -408 -186 l -408 -61 l -224 -61 l -224 -93 q -171 -149 -224 -149 q -104 -129 -140 -149 l -42 -240 q -208 -294 -110 -294 z "},"΄":{"ha":343,"x_min":42,"x_max":301,"o":"m 301 1165 l 229 828 l 60 828 l 42 1185 l 301 1165 z "},"΅":{"ha":757,"x_min":42,"x_max":715,"o":"m 511 1329 l 449 1039 l 303 1039 l 288 1346 l 511 1329 m 174 1072 q 267 1035 228 1072 q 306 944 306 997 q 267 853 306 890 q 174 815 228 815 q 80 853 118 815 q 42 944 42 890 q 80 1035 42 997 q 174 1072 118 1072 m 583 1072 q 676 1035 638 1072 q 715 944 715 997 q 676 853 715 890 q 583 815 638 815 q 490 853 528 815 q 451 944 451 890 q 490 1035 451 997 q 583 1072 528 1072 z "},"᾿":{"ha":322,"x_min":33,"x_max":289,"o":"m 161 1192 q 253 1156 217 1192 q 289 1065 289 1119 q 281 1011 289 1036 q 251 943 272 986 l 182 803 l 51 803 l 86 961 q 33 1065 33 1001 q 69 1155 33 1118 q 161 1192 106 1192 z "},"᾽":{"ha":339,"x_min":42,"x_max":297,"o":"m 169 1185 q 261 1149 225 1185 q 297 1058 297 1113 q 289 1004 297 1029 q 260 936 281 979 l 190 796 l 60 796 l 94 954 q 42 1058 42 994 q 78 1148 42 1111 q 169 1185 114 1185 z "},"῾":{"ha":322,"x_min":33,"x_max":289,"o":"m 161 1192 q 253 1155 217 1192 q 289 1065 289 1118 q 236 961 289 1001 l 271 803 l 140 803 l 71 943 q 42 1011 50 986 q 33 1065 33 1036 q 69 1156 33 1119 q 161 1192 106 1192 z "},"῍":{"ha":636,"x_min":42,"x_max":594,"o":"m 169 1192 q 261 1156 225 1192 q 297 1065 297 1119 q 289 1011 297 1036 q 260 943 281 986 l 190 803 l 60 803 l 94 961 q 42 1065 42 1001 q 78 1155 42 1118 q 169 1192 114 1192 m 594 825 l 444 796 l 311 1133 l 532 1188 l 594 825 z "},"῝":{"ha":636,"x_min":42,"x_max":594,"o":"m 169 1192 q 261 1155 225 1192 q 297 1065 297 1118 q 244 961 297 1001 l 279 803 l 149 803 l 79 943 q 50 1011 58 986 q 42 1065 42 1036 q 78 1156 42 1119 q 169 1192 114 1192 m 594 825 l 444 796 l 311 1133 l 532 1188 l 594 825 z "},"῎":{"ha":636,"x_min":42,"x_max":594,"o":"m 169 1192 q 261 1156 225 1192 q 297 1065 297 1119 q 289 1011 297 1036 q 260 943 281 986 l 190 803 l 60 803 l 94 961 q 42 1065 42 1001 q 78 1155 42 1118 q 169 1192 114 1192 m 594 1133 l 461 796 l 311 825 l 374 1188 l 594 1133 z "},"῞":{"ha":650,"x_min":42,"x_max":608,"o":"m 169 1192 q 261 1155 225 1192 q 297 1065 297 1118 q 244 961 297 1001 l 279 803 l 149 803 l 79 943 q 50 1011 58 986 q 42 1065 42 1036 q 78 1156 42 1119 q 169 1192 114 1192 m 608 1133 l 475 796 l 325 825 l 388 1188 l 608 1133 z "},"῏":{"ha":642,"x_min":42,"x_max":600,"o":"m 401 1138 q 352 1144 372 1138 q 310 1167 332 1151 q 272 1191 283 1185 q 244 1197 260 1197 q 204 1183 219 1197 q 171 1138 189 1169 l 42 1200 q 122 1335 71 1282 q 238 1389 172 1389 q 290 1382 268 1389 q 335 1358 311 1375 q 372 1335 358 1342 q 399 1329 385 1329 q 438 1343 422 1329 q 471 1389 453 1357 l 600 1326 q 519 1190 571 1243 q 401 1138 468 1138 m 263 894 q 193 999 193 929 q 229 1088 193 1051 q 321 1125 265 1125 q 413 1089 376 1125 q 449 999 449 1053 q 439 942 449 968 q 407 876 429 917 l 369 810 l 249 810 l 263 894 z "},"῟":{"ha":642,"x_min":42,"x_max":600,"o":"m 401 1138 q 352 1144 372 1138 q 310 1167 332 1151 q 272 1191 283 1185 q 244 1197 260 1197 q 204 1183 219 1197 q 171 1138 189 1169 l 42 1200 q 122 1335 71 1282 q 238 1389 172 1389 q 290 1382 268 1389 q 335 1358 311 1375 q 372 1335 358 1342 q 399 1329 385 1329 q 438 1343 422 1329 q 471 1389 453 1357 l 600 1326 q 519 1190 571 1243 q 401 1138 468 1138 m 272 810 l 235 876 q 203 942 213 917 q 193 999 193 968 q 229 1089 193 1053 q 321 1125 265 1125 q 413 1088 376 1125 q 449 999 449 1051 q 382 894 449 931 l 393 810 l 272 810 z "},"῭":{"ha":715,"x_min":42,"x_max":674,"o":"m 465 1108 l 364 1018 l 126 1225 l 271 1367 l 465 1108 m 174 1072 q 267 1035 229 1072 q 306 944 306 997 q 267 853 306 890 q 174 815 229 815 q 81 853 119 815 q 42 944 42 890 q 81 1035 42 997 q 174 1072 119 1072 m 542 1072 q 635 1035 597 1072 q 674 944 674 997 q 635 853 674 890 q 542 815 597 815 q 449 853 488 815 q 410 944 410 890 q 449 1035 410 997 q 542 1072 488 1072 z "},"΅":{"ha":715,"x_min":42,"x_max":674,"o":"m 592 1225 l 354 1018 l 253 1108 l 447 1367 l 592 1225 m 174 1072 q 267 1035 228 1072 q 306 944 306 997 q 267 853 306 890 q 174 815 228 815 q 80 853 118 815 q 42 944 42 890 q 80 1035 42 997 q 174 1072 118 1072 m 542 1072 q 635 1035 596 1072 q 674 944 674 997 q 635 853 674 890 q 542 815 596 815 q 448 853 486 815 q 410 944 410 890 q 448 1035 410 997 q 542 1072 486 1072 z "},"῁":{"ha":688,"x_min":42,"x_max":646,"o":"z "},"`":{"ha":399,"x_min":42,"x_max":357,"o":"m 357 838 l 182 808 l 42 1151 l 304 1206 l 357 838 z "},"´":{"ha":399,"x_min":42,"x_max":357,"o":"m 357 1151 l 217 808 l 42 838 l 94 1206 l 357 1151 z "},"῀":{"ha":642,"x_min":42,"x_max":600,"o":"m 401 864 q 352 871 372 864 q 310 893 332 878 q 272 917 283 911 q 244 924 260 924 q 204 910 219 924 q 171 864 189 896 l 42 926 q 122 1062 71 1008 q 238 1115 172 1115 q 290 1108 268 1115 q 335 1085 311 1101 q 372 1062 358 1068 q 399 1056 385 1056 q 438 1069 422 1056 q 471 1115 453 1083 l 600 1053 q 519 917 571 969 q 401 864 468 864 z "},"ʼ":{"ha":350,"x_min":35,"x_max":301,"o":"m 169 1075 q 264 1039 226 1075 q 301 947 301 1003 q 290 878 301 914 q 251 788 279 843 l 167 614 l 36 614 l 94 838 q 35 949 35 879 q 74 1039 35 1003 q 169 1075 113 1075 z "},"⏻":{"ha":1172,"x_min":69,"x_max":1103,"o":"m 654 1033 l 654 490 l 517 490 l 517 1033 l 654 1033 m 957 857 q 1065 692 1026 786 q 1103 492 1103 599 q 1035 228 1103 346 q 850 42 968 110 q 586 -25 732 -25 q 321 42 439 -25 q 136 228 203 110 q 69 492 69 346 q 108 692 69 599 q 215 857 146 786 l 308 774 q 235 647 261 719 q 210 492 210 575 q 256 284 210 375 q 388 142 303 193 q 586 90 474 90 q 783 142 697 90 q 915 285 868 193 q 963 492 963 376 q 936 646 963 574 q 863 774 910 718 l 957 857 z "},"⏼":{"ha":1224,"x_min":69,"x_max":1154,"o":"m 613 1060 q 889 988 765 1060 q 1083 793 1013 917 q 1154 518 1154 669 q 1084 240 1154 364 q 890 46 1014 117 q 613 -25 765 -25 q 333 46 457 -25 q 140 240 210 117 q 69 518 69 364 q 140 793 69 669 q 333 988 210 917 q 613 1060 457 1060 m 613 940 q 405 885 494 940 q 266 735 315 831 q 217 518 217 639 q 266 300 217 396 q 405 150 315 204 q 613 96 494 96 q 817 150 728 96 q 957 300 907 204 q 1007 518 1007 396 q 957 734 1007 638 q 817 885 907 831 q 613 940 728 940 m 675 808 l 675 229 l 543 229 l 543 808 l 675 808 z "},"⏽":{"ha":408,"x_min":139,"x_max":269,"o":"m 269 843 l 269 125 l 139 125 l 139 843 l 269 843 z "},"⏾":{"ha":947,"x_min":139,"x_max":808,"o":"m 808 300 q 684 212 757 243 q 518 181 611 181 q 319 229 406 181 q 186 361 233 278 q 139 547 139 444 q 258 850 139 728 q 314 530 258 650 q 489 355 369 410 q 808 300 608 300 z "},"Ɪ":{"ha":596,"x_min":28,"x_max":568,"o":"m 442 764 l 442 206 l 568 206 l 568 0 l 28 0 l 28 206 l 154 206 l 154 764 l 28 764 l 28 967 l 568 967 l 568 764 l 442 764 z "},"Ү":{"ha":861,"x_min":-21,"x_max":882,"o":"m 574 357 l 574 0 l 288 0 l 288 356 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 574 357 z "},"Ұ":{"ha":861,"x_min":-21,"x_max":882,"o":"m 618 444 l 725 444 l 725 297 l 574 297 l 574 0 l 288 0 l 288 297 l 136 297 l 136 444 l 243 444 l -21 967 l 292 967 l 435 572 l 579 967 l 882 967 l 618 444 z "},"ү":{"ha":731,"x_min":-21,"x_max":751,"o":"m 499 0 l 499 -287 l 232 -315 l 232 0 l -21 742 l 281 742 l 371 222 l 471 742 l 751 742 l 499 0 z "},"ұ":{"ha":731,"x_min":-21,"x_max":751,"o":"m 542 125 l 626 125 l 626 -14 l 499 -14 l 499 -287 l 232 -315 l 232 -14 l 104 -14 l 104 125 l 189 125 l -21 742 l 281 742 l 371 222 l 471 742 l 751 742 l 542 125 z "}},"familyName":"Fira Sans Heavy","ascender":1299,"descender":-368,"underlinePosition":-104,"underlineThickness":69,"boundingBox":{"yMin":-493,"xMin":-1111,"yMax":1722,"xMax":1889},"resolution":1000,"original_font_information":{"format":0,"copyright":"Digitized data copyright 2012-2018, The Mozilla Foundation and Telefonica S.A., bBox Type GmbH and Carrois Corporate GbR, with Reserved Font Name \\"Fira\\"","fontFamily":"Fira Sans Heavy","fontSubfamily":"Regular","uniqueID":"4.301;bB  ;FiraSans-Heavy","fullName":"Fira Sans Heavy","version":"Version 4.301","postScriptName":"FiraSans-Heavy","trademark":"Fira Sans is a trademark of The Mozilla Corporation.","manufacturer":"bBox Type GmbH & Carrois Corporate GbR & Edenspiekermann AG","designer":"bBox Type GmbH & Carrois Corporate GbR & Edenspiekermann AG","manufacturerURL":"https://www.bboxtype.com","designerURL":"https://www.bboxtype.com","licence":"Licensed under the Open Font License, version 1.1 or later","licenceURL":"http://scripts.sil.org/OFL","preferredFamily":"Fira Sans","preferredSubfamily":"Heavy","unknown1":"Stylistic variants Bulgarian, different African languages","unknown2":"Stylistic variants Liberian","unknown3":"Stylistic variant ampersand","unknown4":"Stylistic variant a","unknown5":"Stylistic variant g","unknown6":"Stylistic variants Greek"},"cssFontWeight":"normal","cssFontStyle":"normal"}');let Do=new ji,No=new Vi({antialias:!0}),Io=window.innerWidth,Bo=window.innerHeight;No.setSize(Io,Bo);let Oo=new vl(70,Io/Bo,.01,20);Oo.position.x=6,Oo.position.y=0,Oo.position.z=12,Oo.lookAt(0,0,0),No.setAnimationLoop((t=>{Oo.position.x=6*Math.cos(t/2e3),Oo.position.y=6*Math.sin(t/2e3),Oo.lookAt(0,0,0),No.render(Do,Oo)})),document.body.appendChild(No.domElement);let Fo=function(t,e){const l=new yr(t,{font:e,size:2,height:1,curveSegments:12}),n=new Lr,i=new cl(l,n);return i.position.x=-4,i.position.z=0,Do.add(i),i}("Meow",new Zq(t(Po)));const Ho=10;!function(){const t=new Al(Ho,Ho,10,10),e=new wr(t),l=new Da(e);l.material.depthTest=!0,Do.add(l)}(),function(){No.domElement.addEventListener("touchstart",e),No.domElement.addEventListener("touchmove",e);let t={};function e(e){if(e.targetTouches.length>2)return void(t={});let l=[];for(let n=0;n<e.targetTouches.length;n++){let i=e.targetTouches[n],a=i.identifier;void 0!==t[a]&&l.push(i)}if(1===l.length){let e=l[0];Fo.position.x+=(e.clientX-t[e.identifier].clientX)/Bo*Ho,Fo.position.y-=(e.clientY-t[e.identifier].clientY)/Bo*Ho}else if(2===l.length){let e=l[0],n=l[1],i=t[e.identifier].clientX/Bo*Ho-5,a=t[n.identifier].clientX/Bo*Ho-5,r=-t[e.identifier].clientY/Bo*Ho+5,q=-t[n.identifier].clientY/Bo*Ho+5,o=e.clientX/Bo*Ho-5,s=n.clientX/Bo*Ho-5,m=-e.clientY/Bo*Ho+5,h=a-i,c=q-r,u=s-o,d=-n.clientY/Bo*Ho+5-m,x=Fo.position.x-i,p=Fo.position.y-r,f=Math.atan2(d,u)-Math.atan2(c,h),_=Math.sqrt(u*u+d*d)/Math.sqrt(h*h+c*c);Fo.position.x=(Math.cos(f)*x-Math.sin(f)*p)*_+o,Fo.position.y=(Math.sin(f)*x+Math.cos(f)*p)*_+m,Fo.rotation.z+=f,Fo.scale.x*=_,Fo.scale.y*=_}t={};for(let l=0;l<e.targetTouches.length;l++){let n=e.targetTouches[l],i=n.identifier;t[i]=n}}}()}();
//# sourceMappingURL=index.1506ffe8.js.map
